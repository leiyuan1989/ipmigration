// ***************************************************************************
// *                                                                         *
// *                              CALIBRE  FILE                              *
// *                                                                         *
// *                           TECHNOLOGIES  XP018                           *
// *                                                                         *
// *                         Verification  (DRC/LVS)                         *
// *                                                                         *
// *                             Version   6.1.2                             *
// *                               23-SEP-2019                               *
// *                       created by Michael Dornheim                       *
// *                                                                         *
// *-------------------------------------------------------------------------*
// * Documents:                                                              *
// * "Design Rule Specification       (DR_018_04  Release 6.1)"              *
// * "Process&Device Specification    (PDS_018_04 Release 6.1)"              *
// *-------------------------------------------------------------------------*
// *                                                                         *
// * Note:    NLEAK & PLEAK rules not checked                                *
// *                                                                         *
// *-------------------------------------------------------------------------*
// *                                                                         *
// *   Any queries or questions should be addressed to:                      *
// *                                                                         *
// *                                        hotline@xfab.com                 *
// *                                                                         *
// ***************************************************************************
// * Company confidential.                                                   *
// * Do not copy or print this document without permission of                *
// * X-FAB Design Support. Modifications are not allowed.                    *
// ***************************************************************************
// ***************************************************************************
// * DISCLAIMER                                                              *
// * The information furnished herein by X-FAB Global Services GmbH (X-FAB)  *
// * is substantially correct and accurate.  However, X-FAB shall not be     *
// * liable to licensee or any third party for any damages, including but not*
// * limited to property damage, loss of profits, loss of use, interruption  *
// * of business or indirect, special, incidental or consequential damages,  *
// * of any kind, in connection with or arising out of the furnishing,       *
// * performance or use of the technical data. No obligation or liability    *
// * to licensee or any third party shall arise or flow out of X-FAB         *
// * rendering technical or other services.                                  *
// *                                                                         *
// * X-FAB makes no warranty, express, implied, statutory, or descriptive of *
// * the information contained herein or of warranties of merchantability,   *
// * fitness for a particular purpose, or non-infringement. X-FAB reserves   *
// * the right to change specifications and prices at any time and without   *
// * notice. Therefore, prior to designing this product into a system, it is *
// * necessary to check with X-FAB for current information. The products     *
// * listed herein are intended for use in standard commercial applications. *
// * Applications requiring extended temperature range, unusual environmental*
// * requirements, or high reliability applications, such as military,       *
// * medical life-support or life-sustaining equipment are specifically not  *
// * recommended without additional processing by X-FAB for each application.*
// ***************************************************************************



//------------------------------------------------------------
//             Setup Environment
//------------------------------------------------------------
 
PRECISION  1000
RESOLUTION 5
 
UNIT CAPACITANCE FF
UNIT LENGTH      U
UNIT RESISTANCE  OHM
 

MASK RESULTS DATABASE "mask.db"
FLAG OFFGRID YES
FLAG ACUTE YES
FLAG SKEW YES
FLAG NONSIMPLE YES
FLAG NONSIMPLE PATH YES
 
TEXT DEPTH PRIMARY
 
LAYOUT SYSTEM GDSII
LAYOUT PATH "<path_name>"
LAYOUT PRIMARY "<primary_cell_name>"

SOURCE SYSTEM SPICE
SOURCE PATH "<path_name>"
SOURCE PRIMARY "<subckt_cell_name>"
LAYOUT PROCESS BOX RECORD YES


//------------------------------------------------------------
//         Setup Defaults for DRC
//------------------------------------------------------------

DRC CHECK TEXT       COMMENTS RFI
DRC KEEP EMPTY       NO  
DRC MAXIMUM RESULTS  ALL
ERC MAXIMUM RESULTS  100
DRC MAXIMUM VERTEX   4096
 
DRC RESULTS DATABASE "calibre_drc.db" ASCII
ERC RESULTS DATABASE "calibre_erc.db" ASCII
DRC SUMMARY REPORT   "calibre_drc.sum"
 
 
//------------------------------------------------------------
//         Setup Defaults for LVS
//------------------------------------------------------------
 
MASK SVDB DIRECTORY svdb XCALIBRE
 
LVS REPORT                       "lvs.rep"
LVS REPORT OPTION                S
LVS POWER NAME                   VDD? DVDD VCC VDDA VDDB ADVDD VDDM
LVS GROUND NAME                  GND? DVSS VSS GROUND AGND DGND VSSM
LVS ABORT ON SUPPLY ERROR        NO
LVS ALL CAPACITOR PINS SWAPPABLE NO
LVS PIN NAME PROPERTY PHY_PIN    PIN
LVS COMPONENT SUBTYPE PROPERTY   LVS_SUBTYPE
LVS COMPONENT TYPE PROPERTY      LVS_TYPE
LVS FILTER UNUSED BIPOLAR        NO
LVS FILTER UNUSED MOS            NO
LVS FILTER UNUSED RESISTORS      NO
LVS FILTER UNUSED DIODES         NO
LVS FILTER UNUSED CAPACITORS     NO
LVS IGNORE PORTS                 NO
LVS CHECK PORT NAMES             YES
LVS INJECT LOGIC                 NO
LVS RECOGNIZE GATES              NONE
LVS REDUCE PARALLEL BIPOLAR      NO
LVS REDUCE PARALLEL CAPACITORS   NO
LVS REDUCE PARALLEL DIODES       YES
                                 [effective A, P, PERIMETER
                                    A = sum (A)
                                    P = sum (P)
                                    PERIMETER = sum (PERIMETER)
                                 ]
LVS REDUCE DZA_A      PARALLEL   YES
                                 [effective AREA, PERIMETER
                                    AREA = sum (AREA)
                                    PERIMETER = sum (PERIMETER)
                                 ]
LVS REDUCE DZA_B      PARALLEL   YES
                                 [effective AREA, PERIMETER
                                    AREA = sum (AREA)
                                    PERIMETER = sum (PERIMETER)
                                 ]
LVS REDUCE DZA_D      PARALLEL   YES
                                 [effective AREA, PERIMETER
                                    AREA = sum (AREA)
                                    PERIMETER = sum (PERIMETER)
                                 ]
LVS REDUCE DZA_M      PARALLEL   YES 
                                 [effective AREA, PERIMETER
                                    AREA = sum (AREA)
                                    PERIMETER = sum (PERIMETER)
                                 ]
LVS REDUCE PARALLEL MOS          YES     [TOLERANCE L 0]
LVS REDUCE SERIES   MOS          NO
LVS REDUCE MOSVC      PARALLEL   YES     [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVCI_A   PARALLEL   YES     [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVCI_B   PARALLEL   YES     [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVCI_D   PARALLEL   YES     [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVCI_M   PARALLEL   YES     [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVCI_N   PARALLEL   YES     [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVC5      PARALLEL   YES    [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVC5I_A   PARALLEL   YES    [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVC5I_B   PARALLEL   YES    [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVC5I_D   PARALLEL   YES    [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVC5I_M   PARALLEL   YES    [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE MOSVC5I_N   PARALLEL   YES    [TOLERANCE L 0
                                          effective W, L
                                          P = sum (W*L)
                                          Q = sum (W/L)
                                          W = sqrt (P*Q)
                                          L = sqrt (P/Q)
                                         ]
LVS REDUCE SPLIT    GATES        NO
LVS REDUCE PARALLEL RESISTORS    NO
LVS REDUCE SERIES   CAPACITORS   NO
LVS REDUCE SERIES   RESISTORS    NO
LVS REDUCE tag_25v    PARALLEL   YES
LVS REDUCE tag_60v    PARALLEL   YES
LVS REDUCE tag_100v   PARALLEL   YES
LVS REDUCE tag_m25v   PARALLEL   YES
LVS REDUCE tag_m60v   PARALLEL   YES
LVS REDUCE tag_m100v  PARALLEL   YES
LVS REPORT MAXIMUM               100
LVS PROPERTY RESOLUTION MAXIMUM  1000
LVS SPICE REPLICATE DEVICES      YES
LVS SPICE MULTIPLIER NAME  "M"
 
LVS WRITE LAYOUT NETLIST         "netlistLAYOUT"
LVS WRITE SOURCE NETLIST         "netlistSOURCE"

 
//------------------------------------------------------------
//            INPUT-LAYERS
//------------------------------------------------------------
 
LAYER MAP   2     DATATYPE  0 50020
LAYER nwell       50020                //  NW, N-well
LAYER MAP   3     DATATYPE  0 50030
LAYER MAP   3     DATATYPE  1 50031
LAYER diff_dg     50030                //  DF, Active Area
LAYER diff_dyi    50031                //  DF, (DUMMY) Active Area
LAYER MAP   4     DATATYPE  0 50040
LAYER mvdg        50040                //  MV, 5V Gate Oxide
LAYER MAP   7     DATATYPE  0 50070
LAYER pimp        50070                //  IP, P+ Implant
LAYER MAP   8     DATATYPE  0 50080
LAYER nimp        50080                //  IN, N+ Implant
LAYER MAP  10     DATATYPE  0 50100
LAYER pwblk       50100                //  PB, P-well Block
LAYER MAP  13     DATATYPE  0 50130
LAYER MAP  13     DATATYPE  1 50131
LAYER poly_dg     50130                //  P1, Poly1
LAYER poly_dyi    50131                //  P1, (DUMMY) Poly1
LAYER MAP  13     TEXTTYPE  5 50135
LAYER id_txt      50135                //      Gate/Resistor identification text
                                       //        (special differentiation)
LAYER MAP  13     TEXTTYPE 15 10135
LAYER ip1txt      10135                //      Voltage class identification text
                                       //        (special differentiation)
LAYER MAP  13     DATATYPE  4 50134
LAYER blk_p1      50134                //      Poly1 Dummy Block
LAYER MAP  15     DATATYPE  0 50150
LAYER cont        50150                //  CT, Contact
LAYER MAP  16     DATATYPE  0 50160
LAYER MAP  16     DATATYPE  1 50161
LAYER MAP  16     DATATYPE  9 50169
LAYER MAP  16     DATATYPE 10 10160
LAYER met1_dg     50160 50169          //  M1, Metal1
LAYER met1_dyi    50161                //  M1, (DUMMY) Metal1
LAYER met1_bnd    10160                //  M1, Metal1 boundary
LAYER MAP  16     DATATYPE  4 50164
LAYER blk_m1      50164                //      Metal1 Dummy Block
LAYER MAP  16     TEXTTYPE 15 10165
LAYER id1txt      10165                //      Voltage class identification text
                                       //        (special differentiation)
LAYER MAP  17     DATATYPE  0 50170
LAYER via1        50170                //  V1, Via1
LAYER MAP  18     DATATYPE  0 50180
LAYER MAP  18     DATATYPE  1 50181
LAYER MAP  18     DATATYPE  9 50189
LAYER MAP  18     DATATYPE 10 10180
LAYER met2_dg     50180 50189          //  M2, Metal2
LAYER met2_dyi    50181                //  M2, (DUMMY) Metal2
LAYER met2_bnd    10180                //  M2, Metal2 boundary
LAYER MAP  18     DATATYPE  4 50184
LAYER blk_m2      50184                //      Metal2 Dummy Block
LAYER MAP  18     TEXTTYPE 15 10185
LAYER id2txt      10185                //      Voltage class identification text
                                       //        (special differentiation)
LAYER MAP  19     DATATYPE  0 50190
LAYER pad         50190                //  PA, Passivation
LAYER MAP  19     TEXTTYPE  5 50195
LAYER idptxt      50195                //  (pad: USERPAD,PROBEPAD) identification text

#IFDEF METAL3
LAYER MAP  27     DATATYPE  0 50270
LAYER via2        50270                //  V2, Via2
LAYER MAP  28     DATATYPE  0 50280
LAYER MAP  28     DATATYPE  1 50281
LAYER MAP  28     DATATYPE  9 50289
LAYER MAP  28     DATATYPE 10 10280
LAYER met3_dg     50280 50289          //  M3, Metal3
LAYER met3_dyi    50281                //  M3, (DUMMY) Metal3
LAYER met3_bnd    10280                //  M3, Metal3 boundary
LAYER MAP  28     DATATYPE  4 50284
LAYER blk_m3      50284                //      Metal3 Dummy Block
LAYER MAP  28     TEXTTYPE 15 10285
LAYER id3txt      10285                //      Voltage class identification text
                                       //        (special differentiation)
#ENDIF

#IFDEF METAL4
LAYER MAP  29     DATATYPE  0 50290
LAYER via3        50290                //  V3, Via3
LAYER MAP  31     DATATYPE  0 50310
LAYER MAP  31     DATATYPE  1 50311
LAYER MAP  31     DATATYPE  9 50319
LAYER met4_dg     50310 50319          //  M4, Metal4
LAYER met4_dyi    50311                //  M4, (DUMMY) Metal4
LAYER MAP  31     DATATYPE  4 50314
LAYER blk_m4      50314                //      Metal4 Dummy Block
LAYER MAP  31     TEXTTYPE 15 10315
LAYER id4txt      10315                //      Voltage class identification text
                                       //        (special differentiation)
#ENDIF

#IFDEF METAL5
LAYER MAP  32     DATATYPE  0 50320
LAYER via4        50320                //  V4, Via4
LAYER MAP  50     DATATYPE  0 50500
LAYER MAP  50     DATATYPE  1 50501
LAYER MAP  50     DATATYPE  9 50509
LAYER met5_dg     50500 50509          //  M5, Metal5
LAYER met5_dyi    50501                //  M5, (DUMMY) Metal5
LAYER MAP  50     DATATYPE  4 50504
LAYER blk_m5      50504                //      Metal5 Dummy Block
LAYER MAP  50     TEXTTYPE 15 10505
LAYER id5txt      10505                //      Voltage class identification text
                                       //        (special differentiation)
#ENDIF

#IFDEF MIDMET
LAYER MAP  51     DATATYPE  0 50510
LAYER viatp       50510                //  VT, Top Via
LAYER MAP  33     DATATYPE  0 50330
LAYER MAP  33     DATATYPE  1 50331
LAYER MAP  33     DATATYPE  9 50339
LAYER mettp_dg    50330 50339          //  MT, Top Metal
LAYER mettp_dyi   50331                //  MT, (DUMMY) Top Metal
LAYER MAP  33     DATATYPE  4 50334
LAYER blk_mtp     50334                //      Top Metal Dummy Block
LAYER MAP  33     TEXTTYPE 15 10335
LAYER idttxt      10335                //      Voltage class identification text
                                       //        (special differentiation)
#ENDIF

#IFDEF THKMET
LAYER MAP  36     DATATYPE  0 50360
LAYER viatpl      50360                //  VL, Thick Via
LAYER MAP  35     DATATYPE  0 50350
LAYER MAP  35     DATATYPE  1 50351
LAYER MAP  35     DATATYPE  9 50359
LAYER mettpl_dg   50350 50359          //  ML, Thick Metal
LAYER mettpl_dyi  50351                //  ML, (DUMMY) Thick Metal
LAYER MAP  35     DATATYPE  4 50354
LAYER blk_mtpl    50354                //      Thick Metal Dummy Block
LAYER MAP  35     TEXTTYPE 15 10355
LAYER idltxt      10355                //      Voltage class identification text
                                       //        (special differentiation)
#ENDIF

LAYER MAP  34     DATATYPE  0 50340
LAYER sblk        50340                //  SB, Silicide Block

LAYER MAP  39     DATATYPE  0 50390
LAYER lvt         50390                //  LV, LVT Implant

LAYER MAP  46     DATATYPE  0 50460
LAYER nopim       50460                //  IB, Polyimide Block

LAYER MAP  37     DATATYPE  0 50370
LAYER capm2       50370                //  DM, Double MIM Capacitor Metal
LAYER MAP  38     DATATYPE  0 50380
LAYER capm3       50380                //  TM, Triple MIM Capacitor Metal
LAYER MAP 173     DATATYPE  0 51730
LAYER capmh       51730                //  CH, Single MIMH Top Plate Metal
LAYER MAP 115     DATATYPE  0 51150
LAYER capm23f     51150                //  C3, Single MIM Top Plate Metal
LAYER MAP 116     DATATYPE  0 51160
LAYER capmh23f    51160                //  H3, Single MIMH Top Plate Metal
LAYER MAP 117     DATATYPE  0 51170
LAYER capm34f     51170                //  C4, Single MIM Top Plate Metal
LAYER MAP 118     DATATYPE  0 51180
LAYER capmh34f    51180                //  H4, Single MIMH Top Plate Metal
LAYER MAP 119     DATATYPE  0 51190
LAYER capm45f     51190                //  C5, Single MIM Top Plate Metal
LAYER MAP 120     DATATYPE  0 51200
LAYER capmh45f    51200                //  H5, Single MIMH Top Plate Metal
LAYER MAP 174     DATATYPE  0 51740
LAYER capmh2      51740                //  DH, Double MIMH Capacitor Metal
LAYER MAP 175     DATATYPE  0 51750
LAYER capmh3      51750                //  TH, Triple MIMH Capacitor Metal
LAYER MAP 176     DATATYPE  0 51760
LAYER capm2a      51760                //  D3, Double MIM Capacitor Metal (Bottom Metal3)
LAYER MAP 177     DATATYPE  0 51770
LAYER capmh2a     51770                //  K3, Double MIMH Capacitor Metal (Bottom Metal3)
LAYER MAP 360     DATATYPE  0 53600
LAYER capm2b      53600                //  D4, Double MIM Capacitor Metal (Bottom Metal4)
LAYER MAP 361     DATATYPE  0 53610
LAYER capmh2b     53610                //  K4, Double MIMH Capacitor Metal (Bottom Metal4)
LAYER MAP 362     DATATYPE  0 53620
LAYER capm3a      53620                //  T3, Triple MIM Capacitor Metal (Bottom Metal3)
LAYER MAP 363     DATATYPE  0 53630
LAYER capmh3a     53630                //  J3, Triple MIMH Capacitor Metal (Bottom Metal3)
LAYER MAP  47     DATATYPE  0 50470
LAYER capm        50470                //  CM, Single MIM Top Plate Metal

LAYER MAP  42     DATATYPE  0 50420
LAYER mres        50420                //  MR, MRES P+ Poly Implant
LAYER MAP  65     DATATYPE  0 50650
LAYER hres        50650                //  HR, High resistive Poly1
LAYER MAP  96     DATATYPE  0 50960
LAYER dnw_mv      50960                //  WM, Deep N-well(middle Volt)

LAYER MAP  89     DATATYPE  0 50890
LAYER pdd         50890                //  PT, P-drain Extension Implant
LAYER MAP  90     DATATYPE  0 50900
LAYER sci         50900                //  SC, SONOS Channel Implant
LAYER MAP  92     DATATYPE  0 50920
LAYER depl        50920                //  DL, Depletion
LAYER MAP  95     DATATYPE  0 50950
LAYER pwiso       50950                //  PI, Isolated P-well

LAYER MAP 106     DATATYPE  0 51060
LAYER pd2         51060                //  PY, P-drain Extension Implant
LAYER MAP 107     DATATYPE  0 51070
LAYER nd2         51070                //  NY, N-drain Extension Implant

LAYER MAP 128     DATATYPE  0 51280
LAYER dnw_nvm     51280                //  WN, Deep N-well(NVM)
LAYER MAP 130     DATATYPE  0 51300
LAYER vdnwell     51300                //  WV, Very deep N-well
LAYER MAP 131     DATATYPE  0 51310
LAYER vnc         51310                //  NV, Very deep N-contact
LAYER MAP 132     DATATYPE  0 51320
LAYER dnc         51320                //  NC, Deep N-contact
LAYER MAP 133     DATATYPE  0 51330
LAYER dpb         51330                //  DB, Deep P-barrier
LAYER MAP 134     DATATYPE  0 51340
LAYER dpc         51340                //  PC, Deep P-contact
LAYER MAP 136     DATATYPE  0 51360
LAYER ndd         51360                //  NX, N-drain Extension Implant
LAYER MAP 140     DATATYPE  0 51400
LAYER pws         51400                //  PS, SONOS P-well
LAYER MAP 141     DATATYPE  0 51410
LAYER dnwel60     51410                //  WD, Deep N-well
LAYER MAP 142     DATATYPE  0 51420
LAYER dnwel25     51420                //  WB, Deep N-well
LAYER MAP 143     DATATYPE  0 51430
LAYER dnwel15     51430                //  WA, Deep N-well

LAYER MAP 209     DATATYPE  0 52090
LAYER pzener      52090                //  PZ, PZENER Implant

LAYER MAP  16     DATATYPE  2 50162
LAYER m1hole      50162                //      Slots on Metal1
LAYER MAP  18     DATATYPE  2 50182
LAYER m2hole      50182                //      Slots on Metal2
#IFDEF METAL3
LAYER MAP  28     DATATYPE  2 50282
LAYER m3hole      50282                //      Slots on Metal3
#ENDIF
#IFDEF METAL4
LAYER MAP  31     DATATYPE  2 50312
LAYER m4hole      50312                //      Slots on Metal4
#ENDIF
#IFDEF METAL5
LAYER MAP  50     DATATYPE  2 50502
LAYER m5hole      50502                //      Slots on Metal5
#ENDIF
#IFDEF MIDMET
LAYER MAP  33     DATATYPE  2 50332
LAYER mthole      50332                //      Slots on Top Metal
#ENDIF
LAYER MAP  83     DATATYPE  4 50834
LAYER blkall      50834                //  BA, Dummy Block
LAYER MAP  56     DATATYPE  5 50565
LAYER diodef      50565                //      Diode Definition
LAYER MAP  56     TEXTTYPE  5 50565
LAYER iddtxt      50565                //      Diode identification text
                                       //        (special differentiation)
LAYER MAP  78     DATATYPE  5 50785
LAYER capdef      50785                //      Capacitor Definition
LAYER MAP  78     TEXTTYPE  5 50785
LAYER idctxt      50785                //      Capacitor identification text
                                       //        (special differentiation)
LAYER MAP 100     DATATYPE  5 51005
LAYER devmark     51005                //      Device label
LAYER MAP 100     TEXTTYPE  5 51005
LAYER devlbl      51005                //      Device label
LAYER MAP   2     DATATYPE  5 50025
LAYER nwrdef      50025                //  NW, N-well Resistor Definition
LAYER MAP  96     DATATYPE  5 50965
LAYER dnmrdef     50965                //  WM, Deep N-well(middle Volt) Resistor Definition
LAYER MAP  13     DATATYPE  5 50135
LAYER p1rdef      50135                //      Poly1 Resistor Definition

LAYER MAP  16     DATATYPE  5 50165
LAYER m1rdef      50165                //      Metal1 Resistor Definition
LAYER MAP  18     DATATYPE  5 50185
LAYER m2rdef      50185                //      Metal2 Resistor Definition

#IFDEF METAL3
LAYER MAP  28     DATATYPE  5 50285
LAYER m3rdef      50285                //      Metal3 Resistor Definition
#ENDIF

#IFDEF METAL4
LAYER MAP  31     DATATYPE  5 50315
LAYER m4rdef      50315                //      Metal4 Resistor Definition
#ENDIF

#IFDEF METAL5
LAYER MAP  50     DATATYPE  5 50505
LAYER m5rdef      50505                //      Metal5 Resistor Definition
#ENDIF

#IFDEF MIDMET
LAYER MAP  33     DATATYPE  5 50335
LAYER mtrdef      50335                //      Top Metal Resistor Definition
#ENDIF

#IFDEF THKMET
LAYER MAP  35     DATATYPE  5 50355
LAYER mlrdef      50355                //      Thick Metal Resistor Definition
#ENDIF

LAYER MAP 191     DATATYPE  5 51915
LAYER subcut      51915                //      Multiple Substrate Definition

LAYER MAP  20     DATATYPE 19 10209
LAYER MAP  20     DATATYPE 10 10200
LAYER locked      10209 10200          //      IP Core Definition
LAYER MAP  20     DATATYPE 20 20200
LAYER MAP  73     DATATYPE 10 10730
LAYER locked1     20200 10730          //      IP Core Definition
LAYER MAP  20     DATATYPE 24 20204
LAYER MAP  74     DATATYPE 10 10740
LAYER locked2     20204 10740          //      IP Core Definition
LAYER MAP  40     DATATYPE 10 10400
LAYER locked3     10400                //      IP Core Definition
LAYER MAP  41     DATATYPE 10 10410
LAYER locked4     10410                //      IP Core Definition

LAYER MAP   3     DATATYPE 14 10034
LAYER noblkdf     10034                //      Active Area NOBLK Definition
LAYER MAP  13     DATATYPE 14 10134
LAYER noblkp1     10134                //      Poly1 NOBLK Definition

LAYER xflay       1                    //      reserved


//LVS TEXT LAYER

LAYER MAP  13     TEXTTYPE  3 50133
LAYER POLY1_TEXT  50133
LAYER MAP  16     TEXTTYPE  3 50163
LAYER MET1_TEXT   50163
LAYER MAP  18     TEXTTYPE  3 50183
LAYER MET2_TEXT   50183


TEXT LAYER POLY1_TEXT MET1_TEXT MET2_TEXT
PORT LAYER TEXT POLY1_TEXT MET1_TEXT MET2_TEXT

ATTACH POLY1_TEXT   p1trm
ATTACH POLY1_TEXT   csf_p1
ATTACH MET1_TEXT    m1trm
ATTACH MET1_TEXT    csf_m1
ATTACH MET2_TEXT    m2trm
ATTACH MET2_TEXT    csf_m2
LVS BLACK BOX PORT  poly_dg POLY1_TEXT   p1trm
LVS BLACK BOX PORT  poly_dg POLY1_TEXT   csf_p1
LVS BLACK BOX PORT  met1_dg MET1_TEXT    m1trm
LVS BLACK BOX PORT  met1_dg MET1_TEXT    csf_m1
LVS BLACK BOX PORT  met2_dg MET2_TEXT    m2trm
LVS BLACK BOX PORT  met2_dg MET2_TEXT    csf_m2

#IFDEF METAL3
LAYER MAP  28     TEXTTYPE  3 50283
LAYER MET3_TEXT   50283
TEXT LAYER MET3_TEXT
PORT LAYER TEXT MET3_TEXT
ATTACH MET3_TEXT  m3trm
ATTACH MET3_TEXT  csf_m3
LVS BLACK BOX PORT  met3_dg MET3_TEXT    m3trm
LVS BLACK BOX PORT  met3_dg MET3_TEXT    csf_m3
#ENDIF

#IFDEF METAL4
LAYER MAP  31     TEXTTYPE  3 50313
LAYER MET4_TEXT   50313
TEXT LAYER MET4_TEXT
PORT LAYER TEXT MET4_TEXT
ATTACH MET4_TEXT  m4trm
ATTACH MET4_TEXT  csf_m4
LVS BLACK BOX PORT  met4_dg MET4_TEXT    m4trm
LVS BLACK BOX PORT  met4_dg MET4_TEXT    csf_m4
#ENDIF

#IFDEF METAL5
LAYER MAP  50     TEXTTYPE  3 50503
LAYER MET5_TEXT   50503
TEXT LAYER MET5_TEXT
PORT LAYER TEXT MET5_TEXT
ATTACH MET5_TEXT  m5trm
ATTACH MET5_TEXT  csf_m5
LVS BLACK BOX PORT  met5_dg MET5_TEXT    m5trm
LVS BLACK BOX PORT  met5_dg MET5_TEXT    csf_m5
#ENDIF

#IFDEF MIDMET
LAYER MAP  33     TEXTTYPE  3 50333
LAYER METTP_TEXT  50333
TEXT LAYER METTP_TEXT
PORT LAYER TEXT METTP_TEXT
ATTACH METTP_TEXT mttrm
ATTACH METTP_TEXT csf_mt
LVS BLACK BOX PORT  mettp_dg METTP_TEXT  mttrm
LVS BLACK BOX PORT  mettp_dg METTP_TEXT  csf_mt
#ENDIF

#IFDEF THKMET
LAYER MAP  35     TEXTTYPE  3 50353
LAYER METL_TEXT   50353
TEXT LAYER METL_TEXT
PORT LAYER TEXT METL_TEXT
ATTACH METL_TEXT  mltrm
LVS BLACK BOX PORT  mettpl_dg METL_TEXT  mltrm
#ENDIF


s_res    = (SIZE subcut BY 0.005) NOT subcut
bulk_1   = SIZE (EXTENT) BY 1.0
bulk     = bulk_1   NOT          s_res
emptlay  = pad      NOT          bulk_1           // empty layer for layer copy

#IFDEF MOS5
mv       = mvdg     OR           bulk_1
#ELSE
mv       = mvdg     OR           emptlay
#ENDIF

dnw_al1  = dnwel15  OR           dnwel25
dnw_al2  = dnw_al1  OR           dnwel60
dnw_mv1  = (dnw_mv  NOT          dnw_al2) NOT dnw_nvm
dnw_al3  = dnw_mv   OR           dnw_nvm
dnw_al   = dnw_al2  OR           dnw_al3
dnw_all  = dnw_al   OR           vdnwell
nddtrm   = ndd      NOT         (dnw_all NOT dpb)
nwtrm1   = nwell    NOT         (dnw_all OR ndd)
apwell1  = pwiso    OR          ((pdd OR pd2) OR (dpb OR pws))
apwell   = apwell1  OR           dpc
pwitrm   = apwell   AND          dnw_all

anwell1  = nwell    OR           ndd
anwell2  = dnc      OR           vnc
anwell3  = anwell1  OR           anwell2
anwell   = anwell3  OR           dnw_all
pwift    = pwitrm   NOT          anwell3
dnwelft  = dnw_all  NOT          pwitrm
anwelft  = anwell   NOT          pwift
alwell   = anwell   OR           apwell

isowell  = (pwiso   OR           pws) AND dnw_al


implt    = nimp     OR           pimp

locked_al       = (locked OR locked1) OR ((locked2 OR locked3) OR locked4)
#IFDEF METAL3
locked_am3      = (locked OR locked1) OR (locked2 OR locked3)
#ENDIF
#IFDEF METAL4
locked_am4      = (locked OR locked1) OR locked2
#ENDIF
#IFDEF METAL5
locked_am5      = locked OR locked1
#ENDIF
#IFDEF MIDMET
#IFDEF METAL5
locked_amt5     = COPY locked
#ELSE
#IFDEF METAL4
locked_amt4     = locked OR locked1
#ELSE
#IFDEF METAL3
locked_amt3     = (locked OR locked1) OR locked2
#ELSE
locked_amt2     = (locked OR locked1) OR (locked2 OR locked3)
#ENDIF
#ENDIF
#ENDIF
#ENDIF
#IFDEF THKMET
#IFDEF METAL5
locked_aml5     = COPY locked
#ELSE
#IFDEF MIDMET
#IFDEF METAL4
locked_amlt4    = COPY locked
#ELSE
#IFDEF METAL3
locked_amlt3    = locked OR locked1
#ELSE
locked_amlt2    = (locked OR locked1) OR locked2
#ENDIF
#ENDIF
#ELSE
#IFDEF METAL4
locked_aml4     = locked OR locked1
#ELSE
#IFDEF METAL3
locked_aml3     = (locked OR locked1) OR locked2
#ELSE
locked_aml2     = (locked OR locked1) OR (locked2 OR locked3)
#ENDIF
#ENDIF
#ENDIF

#ENDIF
#ENDIF

locked_ext = EXTENTS locked_al
locked_chk = locked_ext NOT locked_al
locked_m1n = ((locked_chk AND met1_bnd) INTERACT locked_al) SIZE BY 0.23 INSIDE OF locked_chk
locked_m2n = ((locked_chk AND met2_bnd) INTERACT locked_al) SIZE BY 0.28 INSIDE OF locked_chk
#IFDEF METAL3
locked_m3n = ((locked_chk AND met3_bnd) INTERACT locked_al) SIZE BY 0.28 INSIDE OF locked_chk
#ENDIF

//------------------------------------------------------------
//      DUMMY Pattern Generation
//------------------------------------------------------------

#IFDEF DUMMY_FILL
dummy_fill_area  = SIZE bulk_1    BY -1.0

no_diff_poly_1   = (SIZE diff_dg  BY 3.0) OR  (SIZE poly_dg  BY 3.0)
no_diff_poly_2   = (SIZE diff_dyi BY 0.5) OR  (SIZE poly_dyi BY 1.0)
no_diff_poly_31  = (no_diff_poly_1        OR  no_diff_poly_2) OR (locked_al SIZE BY 3.6)
no_diff_poly_3   = no_diff_poly_31        OR  (blkall OR blk_p1)
no_diff_poly_4   = (anwell SIZE BY 5)     NOT (anwell SIZE BY -5)
no_diff_poly_51  = no_diff_poly_3         OR  no_diff_poly_4
no_diff_poly_52  = (apwell SIZE BY 5)     NOT (apwell SIZE BY -5)
no_diff_poly_53  = (pwblk  SIZE BY 5)     NOT (pwblk  SIZE BY -5)
no_diff_poly_5   = no_diff_poly_51        OR  (no_diff_poly_52 OR no_diff_poly_53)
no_diff_poly_6   = no_diff_poly_5         OR  (sblk SIZE BY 3)
no_diff_poly_8   = no_diff_poly_6         OR  ((mres OR hres) SIZE BY 0.4)
no_diff_poly     = no_diff_poly_8         OR  (nwrdef OR dnmrdef)
no_diff_fill     = no_diff_poly           OR  (implt SIZE BY 0.3)

#IFDEF FILL4MACRO
dummy_fill_area0 = SIZE dummy_fill_area BY -3
diff_fill_all    = RECTANGLES 3 3 0.5 INSIDE OF LAYER dummy_fill_area0
#ELSE
diff_fill_all    = RECTANGLES 3 3 0.5 INSIDE OF LAYER (EXTENT)
#ENDIF

poly_fill_area   = dummy_fill_area   NOT      no_diff_poly
diff_fill_area   = dummy_fill_area   NOT      no_diff_fill
poly_fill_a1     = diff_fill_all     INTERACT poly_fill_area
poly_fill_all    = SIZE poly_fill_a1   BY -0.8
diff_fill_a1     = SIZE poly_fill_a1   BY -0.4

diff_dyf_1       = poly_fill_a1      NOT      diff_fill_a1
diff_dyf         = diff_dyf_1        INSIDE   diff_fill_area

poly_dyf         = poly_fill_all     INSIDE   poly_fill_area


#IFDEF FILL4MACRO
dummy_fill_area1 = SIZE dummy_fill_area BY -4
thinmet_fill_all = RECTANGLES 5 2 2 INSIDE OF LAYER dummy_fill_area1
#ELSE
thinmet_fill_all = RECTANGLES 5 2 2 INSIDE OF LAYER (EXTENT)
#ENDIF

no_met1_1        = SIZE met1_dg     BY  4.0
no_met1_2        = SIZE met1_dyi    BY  2.0
no_met1_311      = (locked_al        OR       (met1_bnd INTERACT locked_al)) SIZE BY 4
no_met1_31       = (no_met1_1        OR       no_met1_2) OR no_met1_311
no_met1_3        = no_met1_31        OR       (blkall OR blk_m1)
no_met1_fill     = no_met1_3         OR       (hres SIZE BY 5)
met1_fill_area   = dummy_fill_area   NOT      no_met1_fill
met1_dyf         = thinmet_fill_all  INSIDE   met1_fill_area

no_met2_1        = SIZE met2_dg     BY  4.0
no_met2_2        = SIZE met2_dyi    BY  2.0
no_met2_31       = (locked_al        OR       (met2_bnd INTERACT locked_al)) SIZE BY 4
no_met2_3        = (no_met2_1        OR       no_met2_2) OR no_met2_31
no_met2_fill     = no_met2_3         OR       (blkall OR blk_m2)
met2_fill_area   = dummy_fill_area   NOT      no_met2_fill
met2_dyf         = thinmet_fill_all  INSIDE   met2_fill_area

#IFDEF METAL3
no_met3_1        = SIZE met3_dg     BY  4.0
no_met3_2        = SIZE met3_dyi    BY  2.0
no_met3_31       = (locked_am3       OR       (met3_bnd INTERACT locked_am3)) SIZE BY 4
no_met3_3        = (no_met3_1        OR       no_met3_2) OR no_met3_31
no_met3_fill     = no_met3_3         OR       (blkall OR blk_m3)
met3_fill_area   = dummy_fill_area   NOT      no_met3_fill
met3_dyf         = thinmet_fill_all  INSIDE   met3_fill_area
#ENDIF


#IFDEF METAL4
no_met4_1        = SIZE met4_dg     BY  4.0
no_met4_2        = SIZE met4_dyi    BY  2.0
no_met4_3        = (no_met4_1        OR       no_met4_2) OR (locked_am4 SIZE BY 4)
no_met4_fill     = no_met4_3         OR       (blkall OR blk_m4)
met4_fill_area   = dummy_fill_area   NOT      no_met4_fill
met4_dyf         = thinmet_fill_all  INSIDE   met4_fill_area
#ENDIF


#IFDEF METAL5
no_met5_1        = SIZE met5_dg     BY  4.0
no_met5_2        = SIZE met5_dyi    BY  2.0
no_met5_3        = (no_met5_1        OR       no_met5_2) OR (locked_am5 SIZE BY 4)
no_met5_fill     = no_met5_3         OR       (blkall OR blk_m5)
met5_fill_area   = dummy_fill_area   NOT      no_met5_fill
met5_dyf         = thinmet_fill_all  INSIDE   met5_fill_area
#ENDIF


#IFDEF MIDMET
#IFDEF FILL4MACRO
dummy_fill_areat = SIZE dummy_fill_area BY -2
mettp_fill_all   = RECTANGLES 2 4 2 INSIDE OF LAYER dummy_fill_areat
#ELSE
mettp_fill_all   = RECTANGLES 2 4 2 INSIDE OF LAYER (EXTENT)
#ENDIF
#IFDEF METAL5
no_mettp_1       = SIZE mettp_dg    BY  2.0
no_mettp_2       = SIZE mettp_dyi   BY  2.0
no_mettp_31      = (no_mettp_1       OR       no_mettp_2) OR (locked_amt5 SIZE BY 2)
no_mettp_3       = no_mettp_31       OR       (blkall OR blk_mtp)
no_mettp_fill    = no_mettp_3        OR       (pad SIZE BY 5)
mettp_fill_area  = dummy_fill_area   NOT      no_mettp_fill
mettp_dyf        = mettp_fill_all    INSIDE   mettp_fill_area
#ELSE
#IFDEF METAL4
no_mettp_1       = SIZE mettp_dg   BY  2.0
no_mettp_2       = SIZE mettp_dyi  BY  2.0
no_mettp_31      = (no_mettp_1      OR       no_mettp_2) OR (locked_amt4 SIZE BY 2)
no_mettp_3       = no_mettp_31      OR       (blkall OR blk_mtp)
no_mettp_fill    = no_mettp_3       OR       (pad SIZE BY 5)
mettp_fill_area  = dummy_fill_area  NOT      no_mettp_fill
mettp_dyf        = mettp_fill_all   INSIDE   mettp_fill_area
#ELSE
#IFDEF METAL3
no_mettp_1       = SIZE mettp_dg   BY  2.0
no_mettp_2       = SIZE mettp_dyi  BY  2.0
no_mettp_31      = (no_mettp_1      OR       no_mettp_2) OR (locked_amt3 SIZE BY 2)
no_mettp_3       = no_mettp_31      OR       (blkall OR blk_mtp)
no_mettp_fill    = no_mettp_3       OR       (pad SIZE BY 5)
mettp_fill_area  = dummy_fill_area  NOT      no_mettp_fill
mettp_dyf        = mettp_fill_all   INSIDE   mettp_fill_area
#ELSE
no_mettp_1       = SIZE mettp_dg   BY  2.0
no_mettp_2       = SIZE mettp_dyi  BY  2.0
no_mettp_31      = (no_mettp_1      OR       no_mettp_2) OR (locked_amt2 SIZE BY 2)
no_mettp_3       = no_mettp_31      OR       (blkall OR blk_mtp)
no_mettp_fill    = no_mettp_3       OR       (pad SIZE BY 5)
mettp_fill_area  = dummy_fill_area  NOT      no_mettp_fill
mettp_dyf        = mettp_fill_all   INSIDE   mettp_fill_area
#ENDIF
#ENDIF
#ENDIF
#ENDIF


#IFDEF THKMET
#IFDEF FILL4MACRO
dummy_fill_areal = SIZE dummy_fill_area BY -2
mettpl_fill_all  = RECTANGLES 7 5 5 INSIDE OF LAYER dummy_fill_areal
#ELSE
mettpl_fill_all  = RECTANGLES 7 5 5 INSIDE OF LAYER (EXTENT)
#ENDIF
#IFDEF METAL5
no_mettpl_1      = SIZE mettpl_dg  BY 5.0
no_mettpl_2      = SIZE mettpl_dyi BY 5.0
no_mettpl_3      = (no_mettpl_1     OR       no_mettpl_2) OR (locked_aml5 SIZE BY 5)
no_mettpl_fill   = no_mettpl_3      OR       (blkall OR blk_mtpl)
mettpl_fill_area = dummy_fill_area  NOT      no_mettpl_fill
mettpl_dyf       = mettpl_fill_all  INSIDE   mettpl_fill_area
#ELSE
#IFDEF MIDMET
#IFDEF METAL4
no_mettpl_1      = SIZE mettpl_dg  BY 5.0
no_mettpl_2      = SIZE mettpl_dyi BY 5.0
no_mettpl_3      = (no_mettpl_1     OR       no_mettpl_2) OR (locked_amlt4 SIZE BY 5)
no_mettpl_fill   = no_mettpl_3      OR       (blkall OR blk_mtpl)
mettpl_fill_area = dummy_fill_area  NOT      no_mettpl_fill
mettpl_dyf       = mettpl_fill_all  INSIDE   mettpl_fill_area
#ELSE
#IFDEF METAL3
no_mettpl_1      = SIZE mettpl_dg  BY 5.0
no_mettpl_2      = SIZE mettpl_dyi BY 5.0
no_mettpl_3      = (no_mettpl_1     OR       no_mettpl_2) OR (locked_amlt3 SIZE BY 5)
no_mettpl_fill   = no_mettpl_3      OR       (blkall OR blk_mtpl)
mettpl_fill_area = dummy_fill_area  NOT      no_mettpl_fill
mettpl_dyf       = mettpl_fill_all  INSIDE   mettpl_fill_area
#ELSE
no_mettpl_1      = SIZE mettpl_dg  BY 5.0
no_mettpl_2      = SIZE mettpl_dyi BY 5.0
no_mettpl_3      = (no_mettpl_1     OR       no_mettpl_2) OR (locked_amlt2 SIZE BY 5)
no_mettpl_fill   = no_mettpl_3      OR       (blkall OR blk_mtpl)
mettpl_fill_area = dummy_fill_area  NOT      no_mettpl_fill
mettpl_dyf       = mettpl_fill_all  INSIDE   mettpl_fill_area
#ENDIF
#ENDIF
#ELSE
#IFDEF METAL4
no_mettpl_1      = SIZE mettpl_dg  BY 5.0
no_mettpl_2      = SIZE mettpl_dyi BY 5.0
no_mettpl_3      = (no_mettpl_1     OR       no_mettpl_2) OR (locked_aml4 SIZE BY 5)
no_mettpl_fill   = no_mettpl_3      OR       (blkall OR blk_mtpl)
mettpl_fill_area = dummy_fill_area  NOT      no_mettpl_fill
mettpl_dyf       = mettpl_fill_all  INSIDE   mettpl_fill_area
#ELSE
#IFDEF METAL3
no_mettpl_1      = SIZE mettpl_dg  BY 5.0
no_mettpl_2      = SIZE mettpl_dyi BY 5.0
no_mettpl_3      = (no_mettpl_1     OR       no_mettpl_2) OR (locked_aml3 SIZE BY 5)
no_mettpl_fill   = no_mettpl_3      OR       (blkall OR blk_mtpl)
mettpl_fill_area = dummy_fill_area  NOT      no_mettpl_fill
mettpl_dyf       = mettpl_fill_all  INSIDE   mettpl_fill_area
#ELSE
no_mettpl_1      = SIZE mettpl_dg  BY 5.0
no_mettpl_2      = SIZE mettpl_dyi BY 5.0
no_mettpl_3      = (no_mettpl_1     OR       no_mettpl_2) OR (locked_aml2 SIZE BY 5)
no_mettpl_fill   = no_mettpl_3      OR       (blkall OR blk_mtpl)
mettpl_fill_area = dummy_fill_area  NOT      no_mettpl_fill
mettpl_dyf       = mettpl_fill_all  INSIDE   mettpl_fill_area
#ENDIF
#ENDIF
#ENDIF

#ENDIF
#ENDIF

#ENDIF


#IFNDEF DUMMY_FILL
diff_dyf = COPY emptlay
poly_dyf = COPY emptlay
met1_dyf = COPY emptlay
met2_dyf = COPY emptlay
#IFDEF METAL3
met3_dyf = COPY emptlay
#ENDIF
#IFDEF METAL4
met4_dyf = COPY emptlay
#ENDIF
#IFDEF METAL5
met5_dyf = COPY emptlay
#ENDIF
#IFDEF MIDMET
mettp_dyf = COPY emptlay
#ENDIF
#IFDEF THKMET
mettpl_dyf = COPY emptlay
#ENDIF
#ENDIF


#IFDEF DUMMY_FILL_RESULTS
dummy_diff_dyf    {copy diff_dyf}
dummy_poly_dyf    {copy poly_dyf}
dummy_met1_dyf    {copy met1_dyf}
dummy_met2_dyf    {copy met2_dyf}
#IFDEF METAL3
dummy_met3_dyf    {copy met3_dyf}
#ENDIF
#IFDEF METAL4
dummy_met4_dyf    {copy met4_dyf}
#ENDIF
#IFDEF METAL5
dummy_met5_dyf    {copy met5_dyf}
#ENDIF
#IFDEF MIDMET
dummy_mettp_dyf   {copy mettp_dyf}
#ENDIF
#IFDEF THKMET
dummy_mettpl_dyf  {copy mettpl_dyf}
#ENDIF
#ENDIF


diff_dy  = diff_dyi OR           diff_dyf
poly_dy  = poly_dyi OR           poly_dyf
met1_dy  = met1_dyi OR           met1_dyf
met2_dy  = met2_dyi OR           met2_dyf
diff     = diff_dg  OR           diff_dy
poly1    = poly_dg  OR           poly_dy
met1     = met1_dg  OR           met1_dy
met2     = met2_dg  OR           met2_dy
met1sl   = met1     NOT          m1hole
met2sl   = met2     NOT          m2hole

#IFDEF METAL3
met3_dy  = met3_dyi OR           met3_dyf
met3     = met3_dg  OR           met3_dy
met3sl   = met3     NOT          m3hole
#ENDIF
#IFDEF METAL4
met4_dy  = met4_dyi OR           met4_dyf
met4     = met4_dg  OR           met4_dy
met4sl   = met4     NOT          m4hole
#ENDIF
#IFDEF METAL5
met5_dy  = met5_dyi OR           met5_dyf
met5     = met5_dg  OR           met5_dy
met5sl   = met5     NOT          m5hole
#ENDIF
#IFDEF MIDMET
mettp_dy = mettp_dyi OR          mettp_dyf
mettp    = mettp_dg  OR          mettp_dy
mettsl   = mettp     NOT         mthole
#ENDIF
#IFDEF THKMET
mettpl_dy = mettpl_dyi OR        mettpl_dyf
mettpl    = mettpl_dg  OR        mettpl_dy
#ENDIF

capm2_b   = capm2     OR         emptlay
capm2_t   = capm2_b   OR         emptlay
capm2a_b  = capm2a    OR         emptlay
capm2a_t  = capm2a_b  OR         emptlay
capm2b_b  = capm2b    OR         emptlay
capm2b_t  = capm2b_b  OR         emptlay
capm3_b   = capm3     OR         emptlay
capm3_m   = capm3_b   OR         emptlay
capm3_t   = capm3_m   OR         emptlay
capm3a_b  = capm3a    OR         emptlay
capm3a_m  = capm3a_b  OR         emptlay
capm3a_t  = capm3a_m  OR         emptlay
capmh2_b  = capmh2    OR         emptlay
capmh2_t  = capmh2_b  OR         emptlay
capmh2a_b = capmh2a   OR         emptlay
capmh2a_t = capmh2a_b OR         emptlay
capmh2b_b = capmh2b   OR         emptlay
capmh2b_t = capmh2b_b OR         emptlay
capmh3_b  = capmh3    OR         emptlay
capmh3_m  = capmh3_b  OR         emptlay
capmh3_t  = capmh3_m  OR         emptlay
capmh3a_b = capmh3a   OR         emptlay
capmh3a_m = capmh3a_b OR         emptlay
capmh3a_t = capmh3a_m OR         emptlay


gate     = diff     AND          poly1
diff1    = diff     NOT          poly1
ndiff1   = diff1    AND          nimp
pdiff1   = diff1    AND          pimp
ndif     = diff     AND          nimp
pdif     = diff     AND          pimp

ptap     = pdiff1   NOT          anwell
pwitap   = pwift    AND          pdiff1
ntap     = nwtrm1   AND          ndiff1
dntap    = dnwelft  AND          ndiff1
nddtap   = nddtrm   AND          ndiff1

ptap_hol = HOLES    INNER        ptap
dntap_h  = HOLES    INNER        dntap
ptap_h4  = VERTEX   ptap_hol == 4
dntap_h4 = VERTEX   dntap_h == 4
dntap_h8 = VERTEX   dntap_h == 8

b1_df1   = diff_dg  NOT          implt
d_ds1    = RECTANGLE b1_df1 >= 2.4 BY == 0.94

d_ds21   = SIZE     d_ds1    BY  0.15
d_ds22   = (pdiff1  INTERACT     d_ds21) OR d_ds1
d_ds23   = (d_ds22  INSIDE d_ds21) AND (d_ds21 INSIDE d_ds22)
d_ds31   = SIZE     d_ds23   BY  0.3
d_ds32   = SIZE     d_ds31   BY  0.1
d_ds33   = gate     INTERACT     d_ds31
d_ds34   = (d_ds33  AND          pimp) OR d_ds23
d_ds35   = (d_ds34  INSIDE d_ds31) AND (d_ds31 INSIDE d_ds34)
d_ds36   = (d_ds33  NOT          implt) OR d_ds35
d_ds37   = (d_ds36  INSIDE d_ds32) AND (d_ds32 INSIDE d_ds36)
d_ds41   = EXPAND EDGE (LENGTH (COIN EDGE d_ds37 gate) == 2.04) OUTSIDE BY 0.3
d_ds42   = SIZE     (d_ds41 OR d_ds37)   BY  0.22
d_ds43   = (poly1   INTERACT     d_ds42) OR d_ds22
d_ds44   = RECTANGLE ((d_ds43  INSIDE d_ds42) AND (d_ds42 INSIDE d_ds43)) == 2.48 BY == 4.54
d_dsc1   = (d_ds1 INSIDE d_ds44) AND cont
d_dsc2   = RECTANGLE (SIZE d_dsc1  BY  0.125 OVERUNDER) == 1.63 BY == 0.22
d_dsc3   = EXPAND EDGE (LENGTH (INSIDE EDGE d_dsc2 d_ds1) == 0.22) OUTSIDE BY 0.025
d_dsc4   = SIZE     (d_dsc2 OR d_dsc3)   BY  0.36
d_dsc5   = (d_ds44  AND          poly1) AND cont
d_dsm1   = d_ds44   AND          met1sl
d_dsm2   = d_dsm1   ENCLOSE      d_dsc1
d_dsm3   = d_dsm1   ENCLOSE      d_dsc5
d_dsm4   = (d_dsm3  INSIDE d_dsm2) AND (d_dsm2 INSIDE d_dsm3)
d_dsm5   = d_ds44   ENCLOSE      d_dsm4
d_dsd1   = d_ds1    INSIDE       d_dsc4
d_dsd2   = d_dsd1   INSIDE       d_dsm5
d_ds451  = d_ds44   ENCLOSE      d_dsd2

d_ds21a  = SIZE     d_ds1    BY  0.3
d_ds22a  = (pdiff1  INTERACT     d_ds21a) OR d_ds1
d_ds23a  = (d_ds22a INSIDE d_ds21a) AND (d_ds21a INSIDE d_ds22a)
d_ds31a  = SIZE     d_ds23a  BY  0.15
d_ds32a  = SIZE     d_ds31a  BY  0.1
d_ds33a  = gate     INTERACT     d_ds31a
d_ds34a  = (d_ds33a AND          pimp) OR d_ds23a
d_ds35a  = (d_ds34a INSIDE d_ds31a) AND (d_ds31a INSIDE d_ds34a)
d_ds36a  = (d_ds33a NOT          implt) OR d_ds35a
d_ds37a  = (d_ds36a INSIDE d_ds32a) AND (d_ds32a INSIDE d_ds36a)
d_ds41a  = EXPAND EDGE (LENGTH (COIN EDGE d_ds37a gate) == 2.04) OUTSIDE BY 0.3
d_ds42a  = SIZE     (d_ds41a OR d_ds37a)   BY  0.22
d_ds43a  = (poly1   INTERACT     d_ds42a) OR d_ds22a
d_ds44a  = RECTANGLE ((d_ds43a INSIDE d_ds42a) AND (d_ds42a INSIDE d_ds43a)) == 2.48 BY >= 4.54
d_dsc1a  = (d_ds1 INSIDE d_ds44a) AND cont
d_dsc2a  = RECTANGLE (SIZE d_dsc1a BY  0.205 OVERUNDER) >= 1.63 BY == 0.22
d_dsc3a  = EXPAND EDGE (LENGTH (INSIDE EDGE d_dsc2a d_ds1) == 0.22) OUTSIDE BY 0.025
d_dsc4a  = SIZE     (d_dsc2a OR d_dsc3a)   BY  0.36
d_dsc5a  = (d_ds44a AND          poly1) AND cont
d_dsm1a  = d_ds44a  AND          met1sl
d_dsm2a  = d_dsm1a  ENCLOSE      d_dsc1a
d_dsm3a  = d_dsm1a  ENCLOSE      d_dsc5a
d_dsm4a  = (d_dsm3a INSIDE d_dsm2a) AND (d_dsm2a INSIDE d_dsm3a)
d_dsm5a  = d_ds44a  ENCLOSE      d_dsm4a
d_dsd1a  = d_ds1    INSIDE       d_dsc4a
d_dsd2a  = d_dsd1a  INSIDE       d_dsm5a
d_ds45a  = d_ds44a  ENCLOSE      d_dsd2a
d_ds45   = d_ds451  OR           d_ds45a

d_dsa1   = d_ds45   INSIDE       nwell
d_dsa2   = SIZE     d_dsa1   BY  0.12
d_dsa3   = SIZE     d_dsa2   BY  0.42
d_dsa41  = (d_dsa2  NOT          d_ds45) AND diff
d_dsa42  = (d_dsa3  NOT          d_dsa2) NOT ndiff1
d_dsa4   = (d_dsa3  OUTSIDE      d_dsa41) OUTSIDE d_dsa42
d_dsa5   = (SIZE    d_dsa4   BY  0.32) INSIDE nwell
d_dsa6   = nwell    ENCLOSE      d_dsa5
d_dsa71  = SIZE     d_dsa6   BY  0.12
d_dsa72  = SIZE     d_dsa6   BY  0.125
d_dsa73  = d_dsa71  NOT          d_dsa6
d_dsa74  = d_dsa73  NOT          diff
d_dsa75  = (d_dsa74 INSIDE d_dsa73) AND (d_dsa73 INSIDE d_dsa74)
d_dsa76  = d_dsa72  NOT          d_dsa71
d_dsa77  = (d_dsa72 INSIDE       mv) AND ptap
d_dsa78  = (d_dsa76 INSIDE d_dsa77) AND (d_dsa77 INSIDE d_dsa76)
d_dsa8   = d_dsd2   INSIDE       (d_dsa72 ENCLOSE d_dsa75)
d_dsa8a  = d_dsd2a  INSIDE       (d_dsa72 ENCLOSE d_dsa75)
d_dsa    = d_dsa8   INSIDE       (d_dsa72 ENCLOSE d_dsa78)
d_dsaa   = d_dsa8a  INSIDE       (d_dsa72 ENCLOSE d_dsa78)
d_dsa0   = d_dsa    OR           d_dsaa
d_dsaw   = (d_ds45  ENCLOSE      d_dsa0) SIZE BY 0.33

d_dsb1   = d_ds45   INSIDE       dnwel60
d_dsb21  = SIZE     d_dsb1   BY  0.53
d_dsb31  = SIZE     d_dsb21  BY  0.42
d_dsb41  = (d_dsb21 NOT          d_ds45)  AND diff
d_dsb42  = (d_dsb31 NOT          d_dsb21) NOT ndiff1
d_dsb43  = (d_dsb31 OUTSIDE      d_dsb41) OUTSIDE d_dsb42
d_dsb22  = SIZE     d_dsb1   BY  0.21
d_dsb32  = SIZE     d_dsb22  BY  1.06
d_dsb44  = (d_dsb22 NOT          d_ds45)  AND (dnc or nwell)
d_dsb45  = (d_dsb32 NOT          d_dsb22) NOT dnc
d_dsb46  = (d_dsb32 OUTSIDE      d_dsb44) OUTSIDE d_dsb45
d_dsb4   = d_dsb46  ENCLOSE      (d_dsb43 ENCLOSE (d_dsb21 ENCLOSE d_ds45 == 1))
d_dsb5   = (SIZE    d_dsb4   BY  2.68) INSIDE dnwel60
d_dsb6   = (d_dsb32 INSIDE       d_dsb5) INSIDE mv
d_dsb7   = d_dsb5   ENCLOSE      d_dsb6
d_dsb    = d_dsd2   INSIDE       d_dsb7
d_dsba   = d_dsd2a  INSIDE       d_dsb7
d_dsb0   = d_dsb    OR           d_dsba
d_dsbw   = (d_ds45  ENCLOSE      d_dsb0) SIZE BY 0.74

d_dsdf   = d_dsa0   OR           d_dsb0
d_dsc    = d_dsdf   AND          cont
d_dsg    = (d_ds45  ENCLOSE      d_dsdf) AND gate


gate0    = gate     NOT          d_dsg
gate1c   = gate0    CUT          anwelft
gate1    = gate0    NOT          gate1c

pgate1   = gate1    AND          nwell
pgate2   = pgate1   AND          pimp
mosvc1   = (pgate1  AND          nimp) NOT lvt
mosvc2   = mosvc1   AND          nwtrm1
mosvcm   = mosvc2   AND          mv
mosvc    = mosvc2   NOT          mv

ngate11  = gate1    NOT          anwelft
ngate1   = ngate11  AND          nimp
mosvci1  = (ngate11 AND          pimp) NOT lvt
mosvci2  = mosvci1  AND          pwiso
mosvci   = mosvci2  NOT          mv
mosvci_d = mosvci   INSIDE       dnwel60
mosvci_b = mosvci   INSIDE       dnwel25
mosvci_a = mosvci   INSIDE       dnwel15
mosvci_m = mosvci   INSIDE       dnw_mv1
mosvci_n = mosvci   INSIDE       dnw_nvm
mosvcim  = mosvci2  AND          mv
mosvcim_d = mosvcim INSIDE       dnwel60
mosvcim_b = mosvcim INSIDE       dnwel25
mosvcim_a = mosvcim INSIDE       dnwel15
mosvcim_m = mosvcim INSIDE       dnw_mv1
mosvcim_n = mosvcim INSIDE       dnw_nvm

nngate1  = ngate1   AND          pwblk
nn       = nngate1  NOT          mv
nnm      = nngate1  AND          mv

ngate2   = ngate1   NOT          nngate1

ndgate   = ngate2   AND          depl
ndmgate  = ndgate   AND          mv
ndmi_a   = ndmgate  AND          dnw_al
ndmi_6a  = ndmi_a   WITH TEXT "6T" id_txt
ndmi_d_6 = ndmi_6a  INSIDE       dnwel60
ndmi_b_6 = ndmi_6a  INSIDE       dnwel25
ndmi_a_6 = ndmi_6a  INSIDE       dnwel15
ndmi_m_6 = ndmi_6a  INSIDE       dnw_mv1
ndmi_n_6 = ndmi_6a  INSIDE       dnw_nvm
ndmi     = ndmi_a   NOT          ndmi_6a
ndm      = ndmgate  NOT          dnw_all

ndsgat1  = ngate2   AND          pws
ndsgate  = ndsgat1  AND          sci
ndsgat2  = ndsgat1  NOT          sci
ndsmi    = ndsgate  AND          mv
ndsiP    = devmark  WITH TEXT "ndsiP" devlbl
ndsmiP   = ndsmi    INTERACT     ndsiP
ndsmiE   = ndsmi    NOT          ndsmiP
ne5m     = ndsgat2  AND          mv

ngate21  = ngate2   NOT          (depl OR sci)
ngate3   = ngate21  NOT          apwell
ne_a     = ngate3   NOT          mv
ne       = ne_a     NOT          lvt
nel      = ne_a     AND          lvt
nem      = ngate3   AND          mv
ngate4   = ngate21  AND          pwiso
nei_a1   = ngate4   NOT          mv
nei_a    = nei_a1   NOT          lvt
neli_a   = nei_a1   AND          lvt
nei_6a   = nei_a    WITH TEXT "6T" id_txt
nei_d_6  = nei_6a   INSIDE       dnwel60
nei_b_6  = nei_6a   INSIDE       dnwel25
nei_a_6  = nei_6a   INSIDE       dnwel15
nei_m_6  = nei_6a   INSIDE       dnw_mv1
nei_n_6  = nei_6a   INSIDE       dnw_nvm
nei      = nei_a    NOT          nei_6a
nemi_a   = ngate4   AND          mv
nemi_6a  = nemi_a   WITH TEXT "6T" id_txt
nemi_d_6 = nemi_6a  INSIDE       dnwel60
nemi_b_6 = nemi_6a  INSIDE       dnwel25
nemi_a_6 = nemi_6a  INSIDE       dnwel15
nemi_m_6 = nemi_6a  INSIDE       dnw_mv1
nemi_n_6 = nemi_6a  INSIDE       dnw_nvm
nemi     = nemi_a   NOT          nemi_6a
neli_6a  = neli_a   WITH TEXT "6T" id_txt
neli_d_6 = neli_6a  INSIDE       dnwel60
neli_b_6 = neli_6a  INSIDE       dnwel25
neli_a_6 = neli_6a  INSIDE       dnwel15
neli_m_6 = neli_6a  INSIDE       dnw_mv1
neli_n_6 = neli_6a  INSIDE       dnw_nvm
neli     = neli_a   NOT          neli_6a

ngi_6t   = ((nei_6a OR           nemi_6a) OR (neli_6a OR ndmi_6a)) OR mosvci2

pgate3   = pgate2   NOT          dnw_all
pe_a1    = pgate3   NOT          mv
pe_a     = pe_a1    NOT          lvt
pel_a    = pe_a1    AND          lvt
pe_5     = pe_a     WITH TEXT "5T" id_txt
pe       = pe_a     NOT          pe_5
pel_5    = pel_a    WITH TEXT "5T" id_txt
pel      = pel_a    NOT          pel_5
pem_a    = pgate3   AND          mv
pem_5    = pem_a    WITH TEXT "5T" id_txt
pem      = pem_a    NOT          pem_5
pgate4   = pgate2   AND          dnw_al
pei_a1   = pgate4   NOT          mv
pei_a    = pei_a1   NOT          lvt
peli_a   = pei_a1   AND          lvt
pei_5a   = pei_a    WITH TEXT "5T" id_txt
pei_d_5  = pei_5a   INSIDE       dnwel60
pei_b_5  = pei_5a   INSIDE       dnwel25
pei_a_5  = pei_5a   INSIDE       dnwel15
pei_m_5  = pei_5a   INSIDE       dnw_mv1
pei_n_5  = pei_5a   INSIDE       dnw_nvm
pei      = pei_a    NOT          pei_5a
peli_5a  = peli_a   WITH TEXT "5T" id_txt
peli_d_5 = peli_5a  INSIDE       dnwel60
peli_b_5 = peli_5a  INSIDE       dnwel25
peli_a_5 = peli_5a  INSIDE       dnwel15
peli_m_5 = peli_5a  INSIDE       dnw_mv1
peli_n_5 = peli_5a  INSIDE       dnw_nvm
peli     = peli_a   NOT          peli_5a
pemi_a   = pgate4   AND          mv
pemi_5a  = pemi_a   WITH TEXT "5T" id_txt
pemi_d_5 = pemi_5a  INSIDE       dnwel60
pemi_b_5 = pemi_5a  INSIDE       dnwel25
pemi_a_5 = pemi_5a  INSIDE       dnwel15
pemi_m_5 = pemi_5a  INSIDE       dnw_mv1
pemi_n_5 = pemi_5a  INSIDE       dnw_nvm
pemi     = pemi_a   NOT          pemi_5a

pgi_5t   = (pe_5    OR           pei_5a) OR ((pem_5 OR pemi_5a) OR (pel_5 OR peli_5a))

gate1cm  = gate1c   AND          mv
pgat1cm  = gate1cm  AND          pimp
pgat2cm  = pgat1cm  AND          ((dnw_al2 INSIDE mv) OUTSIDE pwiso)
pgat3cm  = pgat1cm  AND          dnw_nvm
ngat1cm  = gate1cm  AND          nimp
ngat2cm  = ngat1cm  AND          ((dnw_al2 INSIDE mv) OUTSIDE nwell)
ngat3cm  = ngat1cm  NOT          dnw_all

pm_a1    = pgat2cm  CUT          pdd == 1
pm_a2    = pm_a1    CUT          nwell == 1
pm_a3    = pm_a2    AND          dnwel60
pmb      = pm_a3    WITH TEXT "pmb" id_txt
pmc      = pm_a3    WITH TEXT "pmc" id_txt
pm_al    = pmb      OR           pmc
pmb_b    = pmb      WITH TEXT "bjt" id_txt
pmb_d    = pmb      NOT          pmb_b
pmc_b    = pmc      WITH TEXT "bjt" id_txt
pmc_d    = pmc      NOT          pmc_b

pmm_a1   = pgat2cm  CUT          pdd == 2
pmm_a2   = pmm_a1   CUT          nwell == 1
pmma     = pmm_a2   AND          dnwel25
pmm_a3   = pmm_a2   AND          dnwel60
pmmc     = pmm_a3   WITH TEXT "pmmc" id_txt
pmmb     = pmm_a3   NOT          pmmc
pmm_al   = pmma     OR           (pmmb OR pmmc)
pmx_al   = pm_al    OR           pmm_al
pmx_b    = pmb      OR           pmmb
pmx_c    = pmc      OR           pmmc
pmma_b   = pmma     WITH TEXT "bjt" id_txt
pmma_d   = pmma     NOT          pmma_b
pmmb_b   = pmmb     WITH TEXT "bjt" id_txt
pmmb_d   = pmmb     NOT          pmmb_b
pmmc_b   = pmmc     WITH TEXT "bjt" id_txt
pmmc_d   = pmmc     NOT          pmmc_b

p_bjt    = ((pmb_b  OR           pmmb_b) OR (pmc_b OR pmmc_b)) OR pmma_b
pdd_b    = pwitrm   INTERACT     p_bjt
p_bjtx   = pdd_b    NOT          p_bjt

nm_a1    = ngat3cm  CUT          ndd == 1
nm_a2    = nm_a1    CUT          pwblk == 1
nmb      = nm_a2    WITH TEXT "nmb" id_txt
nmc      = nm_a2    WITH TEXT "nmc" id_txt
nm_al    = nmb      OR           nmc
nmb_b    = nmb      WITH TEXT "bjt" id_txt
nmb_d    = nmb      NOT          nmb_b
nmc_b    = nmc      WITH TEXT "bjt" id_txt
nmc_d    = nmc      NOT          nmc_b

nmm_a1   = ngat3cm  CUT          ndd == 2
nmm_a2   = nmm_a1   CUT          pwblk == 2
nmmb     = nmm_a2   WITH TEXT "nmmb" id_txt
nmmc     = nmm_a2   WITH TEXT "nmmc" id_txt
nmma     = nmm_a2   NOT          (nmmb OR nmmc)
nmx_al   = nm_al    OR           nmm_a2
nmx_b    = nmb      OR           nmmb
nmx_c    = nmc      OR           nmmc
nmma_b   = nmma     WITH TEXT "bjt" id_txt
nmma_d   = nmma     NOT          nmma_b
nmmb_b   = nmmb     WITH TEXT "bjt" id_txt
nmmb_d   = nmmb     NOT          nmmb_b
nmmc_b   = nmmc     WITH TEXT "bjt" id_txt
nmmc_d   = nmmc     NOT          nmmc_b

nmx_ndd  = nddtrm   INTERACT     nmx_al

n_bjt    = ((nmb_b  OR           nmmb_b) OR (nmc_b OR nmmc_b)) OR nmma_b
ndd_b    = nddtrm   INTERACT     n_bjt
n_bjtx   = ndd_b    NOT          n_bjt

nmv_a0   = ngat3cm  CUT          nwell == 1
nham1    = nmv_a0   WITH TEXT "nham" id_txt
nham     = nham1    NOT          nwell


ped11    = pgat2cm  CUT          (pdd OR pd2) == 1
ped121   = ped11    CUT          nwell == 1
ped122   = (ped121  AND          nwell) RECTANGLE == 0.66
ped122e  = (ped121  AND          nwell) RECTANGLE == 0.46
ped123   = ped121   ENCLOSE      (ped122 OR ped122e)
ped211   = diff     ENCLOSE      ped123 == 2

ped212   = pdiff1   INSIDE       ped211
ped213   = ndiff1   INSIDE       ped211
ped21    = (ped211  ENCLOSE      ped212 == 2) ENCLOSE ped213 == 1
ped124   = ped123   INSIDE       ped21
ped221   = poly1    ENCLOSE      ped124 == 2
ped22_h  = (HOLES   INNER        ped221) VERTEX == 8
ped2221  = ped22_h  AND          dnc
ped2222  = ped2221  SIZE BY  0.2
ped2223  = ped22_h  SIZE BY -0.2
ped2224  = (ped22_h NOT          ped2222) WITH WIDTH >= 0.005
ped2225  = (ped2221 NOT          ped2223) WITH WIDTH >= 0.005
ped222   = ped22_h  OUTSIDE      (ped2224 OR ped2225)
ped2230  = nwell    ENCLOSE      ped222 == 1
ped222a  = ped222   OUTSIDE      nd2
ped2231  = ped2230  OUTSIDE      nd2
ped2232  = ped222a  SIZE BY  0.66
ped2233  = ped2231  SIZE BY -0.66
ped2234  = (ped222a NOT          ped2233) WITH WIDTH >= 0.005
ped2235  = (ped2231 NOT          ped2232) WITH WIDTH >= 0.005
ped2236  = ped2231  OUTSIDE      (ped2234 OR ped2235)
ped2237  = (ped2231 INSIDE ped2236) AND (ped2236 INSIDE ped2231)
ped223   = ped221   INTERACT     ped2237 == 1
ped125   = ped124   INSIDE       ped223
ped12    = ped125   NOT          pdd

peda111  = ped12    INSIDE       dnwel15
peda1111 = dnwel15  ENCLOSE      peda111
peda112  = ped21    ENCLOSE      peda111 == 2
peda11   = peda112  RECTANGLE == 4.06
peda113  = (peda11  AND          ped212) RECTANGLE == 0.58
peda114  = (peda11  AND          ped213) RECTANGLE == 0.48
peda115  = (peda11  AND          ped125) RECTANGLE == 1.21
peda116  = ((peda11 ENCLOSE      peda113 == 2) ENCLOSE peda114 == 1) ENCLOSE peda115 == 2
peda121  = (ped2237 NOT          peda116) AREA == 3.6239
peda122  = (peda121 NOT          (ped223 OR ped2221)) AREA == 0.4825
peda123  = (ped2237 ENCLOSE      peda122 == 2) ENCLOSE (peda116 AND ped2237) == 1
peda1241 = peda123  SIZE BY  0.7
peda1242 = peda123  SIZE BY -0.66
peda124  = peda1241 NOT          peda1242
peda125  = (peda124 NOT          poly1) WITH WIDTH >= 0.005
peda126  = peda1111 AND          poly1
peda1271 = (peda126 NOT          peda124) WITH WIDTH >= 0.010
peda1272 = INT (peda126 NOT peda124) == 0.005 REGION
peda12   = peda123  INSIDE       (peda1111 OUTSIDE (peda125 OR (peda1271 OR peda1272)))

peda131  = peda12   SIZE BY  1.27
peda132  = peda12   SIZE BY  0.85
peda133  = peda131  NOT          peda132
peda1341 = (peda133 NOT          pdiff1) WITH WIDTH >= 0.010
peda1342 = INT (peda133 NOT pdiff1) == 0.005 REGION
peda135  = (peda132 AND          diff) NOT peda116
peda13   = peda12   INSIDE       (peda131 OUTSIDE (peda135 OR (peda1341 OR peda1342)))

peda1411 = pdiff1   INTERACT     peda133
peda1412 = peda1411 SIZE BY  0.6
peda1413 = peda13   SIZE BY  1.87
peda142  = peda13   SIZE BY  0.2
peda141  = peda1412 OR           peda1413
peda143  = peda141  NOT          peda142
peda144  = (peda143 NOT          pdd) WITH WIDTH >= 0.005
peda145  = peda142  AND          pdd
peda14   = peda13   INSIDE       (peda141 OUTSIDE (peda144 OR peda145))

peda1511 = (pdd     ENCLOSE      peda1411) OR (peda14 SIZE BY 1)
peda151  = peda1511 SIZE BY  1.16
peda152  = peda1511 SIZE BY  0.3
peda153  = peda151  NOT          peda152
peda154  = (peda153 NOT          dnc) WITH WIDTH >= 0.005
peda155  = (peda152 AND          (dnc OR nwell)) NOT INSIDE peda14
peda15   = peda14   INSIDE       (peda151 OUTSIDE (peda154 OR peda155))

peda21   = peda126  INTERACT     peda15 == 1
peda2    = peda21   ENCLOSE      peda111 == 2
peda     = peda2    AND          peda111
peda2_b  = peda2    WITH TEXT "bjt" id_txt
peda2_d  = peda2    NOT          peda2_b
peda_mwa = ((dnwel15 INTERACT    peda) AND diff) SIZE BY 2.25

ped_611  = ped12    INSIDE       dnwel60
ped_6111 = dnwel60  ENCLOSE      ped_611
ped_612  = ped21    ENCLOSE      ped_611 == 2
pedb11   = ped_612  RECTANGLE == 4.26
pedb113  = (pedb11  AND          ped212) RECTANGLE == 0.68
pedb114  = (pedb11  AND          ped213) RECTANGLE == 0.48
pedb115  = (pedb11  AND          ped125) RECTANGLE == 1.21
pedb116  = ((pedb11 ENCLOSE      pedb113 == 2) ENCLOSE pedb114 == 1) ENCLOSE pedb115 == 2
pedb121  = (ped2237 NOT          pedb116) AREA == 4.1464
pedb122  = (pedb121 NOT          (ped223 OR ped2221)) AREA == 0.5515
pedb123  = (ped2237 ENCLOSE      pedb122 == 2) ENCLOSE (pedb116 AND ped2237) == 1

pedb1241 = pedb123  SIZE BY  0.77
pedb1242 = pedb123  SIZE BY -0.66
pedb124  = pedb1241 NOT          pedb1242
pedb125  = (pedb124 NOT          poly1) WITH WIDTH >= 0.005
ped_621  = ped_6111 AND          poly1
pedb127  = (ped_621 NOT          pedb124) WITH WIDTH >= 0.005
pedb12   = pedb123  INSIDE       (ped_6111 OUTSIDE (pedb125 OR pedb127))

pedb131  = pedb12   SIZE BY  2.11
pedb132  = pedb12   SIZE BY  1.69
pedb133  = pedb131  NOT          pedb132
pedb134  = pedb133  NOT          pdiff1
pedb1351 = (pedb132 AND          diff) NOT pedb116
pedb1352 = EXPAND EDGE (INSIDE EDGE pedb12 pedb116) OUTSIDE BY 1.69
pedb135  = pedb1352 NOT          pedb116
pedb1354 = (pedb135 AND          diff) RECTANGLE == 0.4
pedb1355 = (pedb135 AND          pdiff1) RECTANGLE == 0.02
pedb1356 = (pedb135 AND          b1_df1) RECTANGLE == 0.38
pedb1357 = (pedb135 NOT          diff) RECTANGLE == 0.74
pedb1358 = pedb1355 OR           pedb1356
pedb1359 = (pedb135 ENCLOSE      ((pedb1354 INSIDE pedb1358) AND (pedb1358 INSIDE pedb1354)) == 1) ENCLOSE pedb1357 == 1
pedb136  = pedb1351 NOT          pedb1359
pedb1361 = (pedb136 AND          diff) AREA == 0.08
pedb1362 = (pedb136 AND          pdiff1) AREA == 0.0078
pedb1363 = (pedb136 AND          b1_df1) AREA == 0.0722
pedb1364 = pedb136  ENCLOSE      ((pedb1361 ENCLOSE pedb1362 == 1) ENCLOSE (pedb1361 ENCLOSE pedb1363 == 1) == 1) == 1
pedb137  = (pedb132 ENCLOSE      (pedb132 AND diff) == 3) ENCLOSE (pedb1351 ENCLOSE pedb1364 == 2) == 2
pedb138  = pedb136  NOT          pedb1364
pedb13   = (pedb12  INSIDE       (ped_6111 OUTSIDE (pedb134 OR pedb138))) INSIDE pedb137

pedb1411 = pdiff1   INTERACT     pedb133
pedb1412 = pedb1411 SIZE BY  0.95
pedb1413 = pedb13   SIZE BY  3.06
pedb142  = pedb13   SIZE BY  0.2
pedb141  = pedb1412 OR           pedb1413
pedb143  = pedb141  NOT          pedb142
pedb144  = (pedb143 NOT          pdd) WITH WIDTH >= 0.005
pedb145  = pedb142  AND          pdd
pedb14   = pedb13   INSIDE       (pedb141 OUTSIDE (pedb144 OR pedb145))

pedb1511 = (pdd     ENCLOSE      pedb1411) OR (pedb14 SIZE BY 1)
pedb151  = pedb1511 SIZE BY  1.26
pedb152  = pedb1511 SIZE BY  0.4
pedb153  = pedb151  NOT          pedb152
pedb154  = (pedb153 NOT          dnc) WITH WIDTH >= 0.005
pedb155  = (pedb152 AND          (dnc OR nwell)) NOT INSIDE pedb14
pedb15   = pedb14   INSIDE       (pedb151 OUTSIDE (pedb154 OR pedb155))

pedb161  = EXPAND EDGE (INSIDE EDGE pedb15 pedb116) OUTSIDE BY 1.57
pedb162  = EXPAND EDGE (INSIDE EDGE pedb15 pedb116) OUTSIDE BY 1.07
pedb163  = pedb161  NOT          pedb162
pedb164  = EXPAND EDGE (INSIDE EDGE pedb163 sblk) OUTSIDE BY 0.8
pedb165  = pedb163  OR           pedb164
pedb166  = pedb165  NOT          sblk
ped_622  = ped_6111 AND          sblk
pedb167  = ped_622  NOT          pedb165
pedb16   = pedb15   INSIDE       (ped_6111 OUTSIDE (pedb166 OR pedb167))

pedb21   = ped_621  INTERACT     pedb16 == 1
pedb2    = pedb21   ENCLOSE      ped_611 == 2
pedb     = pedb2    AND          ped_611
pedb2_b  = pedb2    WITH TEXT "bjt" id_txt
pedb2_d  = pedb2    NOT          pedb2_b
pedb_mwd = ((dnwel60 INTERACT    pedb) AND diff) SIZE BY 2.75

pedc11   = ped_612  RECTANGLE == 4.56
pedc113  = (pedc11  AND          ped212) RECTANGLE == 0.68
pedc114  = (pedc11  AND          ped213) RECTANGLE == 0.48
pedc115  = (pedc11  AND          ped125) RECTANGLE == 1.36
pedc116  = ((pedc11 ENCLOSE      pedc113 == 2) ENCLOSE pedc114 == 1) ENCLOSE pedc115 == 2
pedc121  = (ped2237 NOT          pedc116) AREA == 4.1464
pedc122  = (pedc121 NOT          (ped223 OR ped2221)) AREA == 0.5408
pedc123  = (ped2237 ENCLOSE      pedc122 == 2) ENCLOSE (pedc116 AND ped2237) == 1
pedc1241 = pedc123  SIZE BY  1.22
pedc1242 = pedc123  SIZE BY -0.66
pedc124  = pedc1241 NOT          pedc1242
pedc125  = pedc124  NOT          poly1
pedc127  = (ped_621 NOT          pedc124) WITH WIDTH >= 0.005
pedc12   = pedc123  INSIDE       (ped_6111 OUTSIDE (pedc125 OR pedc127))

pedc131  = pedc12   SIZE BY  3.02
pedc132  = pedc12   SIZE BY  2.42
pedc133  = pedc131  NOT          pedc132
pedc1341 = (pedc133 NOT          pdiff1) WITH WIDTH >= 0.010
pedc1342 = INT (pedc133 NOT pdiff1) == 0.005 REGION
pedc1351 = (pedc132 AND          diff) NOT pedc116
pedc1352 = EXPAND EDGE (INSIDE EDGE pedc12 pedc116) OUTSIDE BY 2.42
pedc135  = pedc1352 NOT          pedc116
pedc1354 = (pedc135 AND          diff) RECTANGLE == 0.35
pedc1355 = (pedc135 NOT          diff) RECTANGLE == 1.37
pedc1356 = (pedc135 AND          b1_df1) RECTANGLE == 0.35
pedc1357 = (pedc135 ENCLOSE      ((pedc1354 INSIDE pedc1356) AND (pedc1356 INSIDE pedc1354)) == 1) ENCLOSE pedc1355 == 1
pedc136  = pedc1351 NOT          pedc1357
pedc1361 = (pedc136 AND          diff) AREA == 0.13125
pedc1362 = (pedc136 AND          pdiff1) AREA == 0.0169
pedc1363 = (pedc136 AND          b1_df1) AREA == 0.11435
pedc1364 = pedc136  ENCLOSE      ((pedc1361 ENCLOSE pedc1362 == 1) ENCLOSE pedc1363 == 1) == 1
pedc137  = (pedc132 ENCLOSE      (pedc132 AND diff) == 3) ENCLOSE (pedc1351 ENCLOSE pedc1364 == 2) == 2
pedc138  = pedc136  NOT          pedc1364
pedc13   = (pedc12  INSIDE       (ped_6111 OUTSIDE ((pedc1341 OR pedc1342) OR pedc138))) INSIDE pedc137

pedc1411 = pdiff1   INTERACT     pedc133
pedc1412 = pedc1411 SIZE BY  1.35
pedc1413 = pedc13   SIZE BY  4.37
pedc142  = pedc13   SIZE BY  0.29
pedc141  = pedc1412 OR           pedc1413
pedc143  = pedc141  NOT          pedc142
pedc144  = pedc143  NOT          pdd
pedc145  = pedc142  AND          pdd
pedc14   = pedc13   INSIDE       (pedc141 OUTSIDE (pedc144 OR pedc145))

pedc1511 = (pdd     ENCLOSE      pedc1411) OR (pedc14 SIZE BY 1)
pedc151  = pedc1511 SIZE BY  1.26
pedc152  = pedc1511 SIZE BY  0.4
pedc153  = pedc151  NOT          pedc152
pedc154  = (pedc153 NOT          dnc) WITH WIDTH >= 0.005
pedc155  = (pedc152 AND          (dnc OR nwell)) NOT INSIDE pedc14
pedc15   = pedc14   INSIDE       (pedc151 OUTSIDE (pedc154 OR pedc155))

pedc161  = EXPAND EDGE (INSIDE EDGE pedc15 pedc116) OUTSIDE BY 2.39
pedc162  = EXPAND EDGE (INSIDE EDGE pedc15 pedc116) OUTSIDE BY 1.85
pedc163  = pedc161  NOT          pedc162
pedc164  = EXPAND EDGE (INSIDE EDGE pedc163 sblk) OUTSIDE BY 0.95
pedc165  = pedc163  OR           pedc164
pedc166  = pedc165  NOT          sblk
pedc167  = ped_622  NOT          pedc165
pedc16   = pedc15   INSIDE       (ped_6111 OUTSIDE (pedc166 OR pedc167))

pedc21   = ped_621  INTERACT     pedc16 == 1
pedc2    = pedc21   ENCLOSE      ped_611 == 2
pedc     = pedc2    AND          ped_611
pedc2_b  = pedc2    WITH TEXT "bjt" id_txt
pedc2_d  = pedc2    NOT          pedc2_b
pedc_mwd = ((dnwel60 INTERACT    pedc) AND diff) SIZE BY 3.15

pedd11   = (ped_612 WITH WIDTH == 4.56) NOT pedc11
pedd113  = (pedd11  AND          ped212) RECTANGLE == 0.68
pedd114  = (pedd11  AND          ped213) RECTANGLE == 0.48
pedd115  = (pedd11  AND          ped125) RECTANGLE == 1.36
pedd116  = ((pedd11 ENCLOSE      pedd113 == 2) ENCLOSE pedd114 == 1) ENCLOSE pedd115 == 2
pedd121  = (ped2237 NOT          pedd116) AREA == 8.8864
pedd122  = (pedd121 NOT          (ped223 OR ped2221)) AREA == 1.1493
pedd123  = (ped2237 ENCLOSE      pedd122 == 2) ENCLOSE (pedd116 AND ped2237) == 1
pedd1241 = (pedd123 AND          pedd116) SIZE BY  1.42
pedd1242 = pedd123  SIZE BY -0.66
pedd1243 = pedd123  SIZE BY  1.7 INSIDE OF ped223
pedd1244 = pedd1243 NOT          pedd1241
pedd1245 = (ped223  ENCLOSE      (pedd1241 NOT pedd1242) == 2) ENCLOSE (pedd1244 AREA == 16.7284) == 2
pedd124  = pedd1241 NOT          pedd1242
pedd125  = pedd124  NOT          poly1
pedd127  = ped_621  NOT          ((ped_621 INSIDE pedd1245) AND (pedd1245 INSIDE ped_621))
pedd12   = pedd123  INSIDE       (ped_6111 OUTSIDE (pedd125 OR pedd127))
pedd131  = pedd12   SIZE BY  3.92
pedd132  = pedd12   SIZE BY  3.38
pedd133  = pedd131  NOT          pedd132
pedd134  = (pedd133 NOT          pdiff1) WITH WIDTH >= 0.005
pedd1351 = (pedd132 AND          diff) NOT pedd116
pedd1353 = pedd1351 WITH WIDTH >= 0.010
pedd1352 = EXPAND EDGE (INSIDE EDGE pedd12 pedd116) OUTSIDE BY 3.38
pedd135  = pedd1352 NOT          pedd116
pedd1354 = (pedd135 AND          diff) RECTANGLE == 0.76
pedd1355 = (pedd135 AND          ndiff1) RECTANGLE == 0.1
pedd1356 = (pedd135 AND          b1_df1) RECTANGLE == 0.66
pedd1357 = (pedd135 NOT          diff) RECTANGLE == 1.92
pedd1358 = pedd1355 OR           pedd1356
pedd1359 = (pedd135 ENCLOSE      ((pedd1354 INSIDE pedd1358) AND (pedd1358 INSIDE pedd1354)) == 1) ENCLOSE pedd1357 == 1
pedd136  = pedd1351 NOT          pedd1359
pedd1361 = (pedd136 AND          diff) AREA == 0.5396
pedd1362 = (pedd136 AND          pdiff1) AREA == 0.0081
pedd1363 = (pedd136 AND          ndiff1) AREA == 0.038
pedd1364 = (pedd136 AND          b1_df1) AREA == 0.4935
pedd1365 = pedd136  ENCLOSE      (((pedd1361 ENCLOSE pedd1362 == 1) ENCLOSE pedd1363 == 1) ENCLOSE pedd1364 == 1) == 1
pedd1366 = (pedd136 AND          pdiff1) AREA == 0.02905
pedd1367 = ((pedd136 INSIDE pedd1366) AND (pedd1366 INSIDE pedd136)) NOT WITH WIDTH >= 0.01
pedd1368 = (pedd136 AND          ndiff1) AREA == 0.6284
pedd1371 = (pedd132 ENCLOSE      (pedd132 AND diff) == 7) ENCLOSE (pedd1351 ENCLOSE pedd1365 == 2) == 2
pedd1372 = pedd1371 ENCLOSE      pedd1367 == 4
pedd1373 = EXPAND EDGE (COIN EDGE pedd114 pedd116) OUTSIDE BY 1.5
pedd137  = pedd1372 ENCLOSE      ((diff ENCLOSE pedd116 == 1) ENCLOSE (pedd1368 INSIDE pedd1373) == 2) == 1
pedd13   = (pedd12  INSIDE       (ped_6111 OUTSIDE pedd134)) INSIDE pedd137

pedd1411 = pdiff1   INTERACT     pedd133
pedd1412 = pedd1411 SIZE BY  1.4
pedd1413 = pedd13   SIZE BY  5.32
pedd1421 = pedd13   SIZE BY  0.29
pedd1422 = pedd13   SIZE BY  0.42 OUTSIDE OF pdd
pedd1423 = pedd1422 NOT          pedd1421
pedd1424 = pedd1423 AREA == 1.129844
pedd142  = pedd1422 ENCLOSE      pedd1424 == 2
pedd141  = pedd1412 OR           pedd1413
pedd143  = pedd141  NOT          pedd142
pedd144  = (pedd143 NOT          pdd) WITH WIDTH >= 0.005
pedd145  = pedd1421 AND          pdd
pedd14   = pedd13   INSIDE       (pedd141 OUTSIDE (pedd144 OR pedd145))

pedd1511 = (pdd     ENCLOSE      pedd1411) OR (pedd14 SIZE BY 1)
pedd151  = pedd1511 SIZE BY  1.26
pedd152  = pedd1511 SIZE BY  0.4
pedd153  = pedd151  NOT          pedd152
pedd154  = (pedd153 NOT          dnc) WITH WIDTH >= 0.005
pedd155  = (pedd152 AND          (dnc OR nwell)) NOT INSIDE pedd14
pedd15   = pedd14   INSIDE       (pedd151 OUTSIDE (pedd154 OR pedd155))

pedd161  = EXPAND EDGE (INSIDE EDGE pedd15 pedd116) OUTSIDE BY 3.38
pedd162  = EXPAND EDGE (INSIDE EDGE pedd15 pedd116) OUTSIDE BY 2.72
pedd163  = pedd161  NOT          pedd162
pedd164  = EXPAND EDGE (INSIDE EDGE pedd163 sblk) OUTSIDE BY 1.43
pedd165  = pedd163  OR           pedd164
pedd166  = pedd165  NOT          sblk
pedd167  = ped_622  NOT          pedd165
pedd16   = pedd15   INSIDE       (ped_6111 OUTSIDE (pedd166 OR pedd167))

pedd21   = ped_621  INTERACT     pedd16 == 1
pedd2    = pedd21   ENCLOSE      ped_611 == 2
pedd     = pedd2    AND          ped_611
pedd2_b  = pedd2    WITH TEXT "bjt" id_txt
pedd2_d  = pedd2    NOT          pedd2_b
pedd_mwd = ((dnwel60 INTERACT    pedd) AND diff) SIZE BY 3.2

pede222  = ped222   INSIDE       nd2
pede2231 = ped2230  INSIDE       nd2
pede2232 = pede222  SIZE BY  0.46
pede2233 = pede2231 SIZE BY -0.46
pede2234 = (pede222  NOT         pede2233) WITH WIDTH >= 0.005
pede2235 = (pede2231 NOT         pede2232) WITH WIDTH >= 0.005
pede2236 = pede2231  OUTSIDE     (pede2234 OR pede2235)
pede2237 = (pede2231 INSIDE pede2236) AND (pede2236 INSIDE pede2231)
pede223  = ped221   INTERACT     pede2237 == 1

ped125e  = ped124   INSIDE       pede223
ped12e   = ped125e  NOT          pd2

pede111  = ped12e   INSIDE       nd2
pede1111 = dnwel15  ENCLOSE      pede111
pede112  = ped21    ENCLOSE      pede111 == 2
pede11   = pede112  RECTANGLE == 3.66
pede113  = (pede11  AND          ped212) RECTANGLE == 0.58
pede114  = (pede11  AND          ped213) RECTANGLE == 0.48
pede115  = (pede11  AND          ped125e) RECTANGLE == 1.01
pede116  = ((pede11 ENCLOSE      pede113 == 2) ENCLOSE pede114 == 1) ENCLOSE pede115 == 2
pede121  = (pede2237 NOT         pede116) AREA == 3.2263
pede122  = (pede121 NOT          (pede223 OR ped2221)) AREA == 0.5625
pede123  = (pede2237 ENCLOSE     pede122 == 2) ENCLOSE (pede116 AND pede2237) == 1
pede1241 = pede123  SIZE BY  0.7
pede1242 = pede123  SIZE BY -0.46
pede124  = pede1241 NOT          pede1242
pede125  = (pede124 NOT          poly1) WITH WIDTH >= 0.005
pede126  = pede1111 AND          poly1
pede1271 = (pede126 NOT          pede124) WITH WIDTH >= 0.010
pede1272 = INT (pede126 NOT pede124) == 0.005 REGION
pede12   = pede123  INSIDE       (pede1111 OUTSIDE (pede125 OR (pede1271 OR pede1272)))

pede131  = pede12   SIZE BY  1.27
pede132  = pede12   SIZE BY  0.85
pede133  = pede131  NOT          pede132
pede134  = (pede133 NOT          pdiff1) WITH WIDTH >= 0.005
pede135  = (pede132 AND          diff) NOT pede116
pede13   = pede12   INSIDE       (pede131 OUTSIDE (pede135 OR pede134))

pede1411 = pdiff1   INTERACT     pede133
pede1412 = pede1411 SIZE BY  0.6
pede1413 = pede13   SIZE BY  1.87
pede142  = pede13   SIZE BY  0.2
pede141  = pede1412 OR           pede1413
pede143  = pede141  NOT          pede142
pede144  = (pede143 NOT          pd2) WITH WIDTH >= 0.005
pede145  = pede142  AND          pd2
pede14   = pede13   INSIDE       (pede141 OUTSIDE (pede144 OR pede145))

pede1511 = (pd2     ENCLOSE      pede1411) OR (pede14 SIZE BY 1)
pede151  = pede1511 SIZE BY  1.16
pede152  = pede1511 SIZE BY  0.3
pede153  = pede151  NOT          pede152
pede154  = (pede153 NOT          dnc) WITH WIDTH >= 0.005
pede155  = (pede152 AND          (dnc OR nwell)) NOT INSIDE pede14
pede15   = pede14   INSIDE       (pede151 OUTSIDE (pede154 OR pede155))

pede21   = pede126  INTERACT     pede15 == 1
pede2    = pede21   ENCLOSE      pede111 == 2
pede     = pede2    AND          pede111
pede2_b  = pede2    WITH TEXT "bjt" id_txt
pede2_d  = pede2    NOT          pede2_b
pede_mwa = ((dnwel15 INTERACT    pede) AND diff) SIZE BY 2.25


ned11    = ngat2cm  CUT          pwiso == 1
ned11_h  = HOLES    INNER        ned11
ned12    = ned11_h  ENCLOSE      (ned11_h AND diff) == 1
ned13    = (ned12   AND          diff) RECTANGLE == 1.56
ned14    = (ned13   AND          ndiff1) RECTANGLE == 0.54
ned15    = (ned13   AND          pdiff1) RECTANGLE == 0.48
ned16    = (ned13   ENCLOSE      ned14 == 2) ENCLOSE ned15 == 1
ned21    = (ned11_h NOT          ned16) AREA == 1.6396
ned22    = ned21    NOT          poly1
ned23    = ned22    RECTANGLE == 0.27 BY == 1.56
ned24    = (ned21   ENCLOSE      ned22 == 1) ENCLOSE ned23 == 1
ned25    = (ned11_h ENCLOSE      ned16 == 1) ENCLOSE ned24 == 2
ned26    = pwiso    ENCLOSE      ned25
ned2_al1 = ned26    AND          ned11
ned31    = EXPAND EDGE (COIN EDGE ned16 ned2_al1) OUTSIDE BY 1.53
ned_al1  = ned31    AND          ned2_al1
ned2_al2 = ned2_al1 ENCLOSE      ned_al1 ==2
ned2_al3 = ned11    ENCLOSE      ned2_al2 ==1
ned2_al4 = (dntap_h8 ENCLOSE ned2_al3 ==1) ENCLOSE diff == 1
ned2_al5 = ned11    AND          ned2_al4
ned2_ri  = (ned12   OR           ned2_al4) OR ((dnw_al2 ENCLOSE ned2_al4) AND diff)
ned2_r21 = ned2_ri  SIZE BY 0.24
ned2_r22 = ned2_ri  SIZE BY 1.24
ned2_r23 = ned2_r21 NOT          ned2_ri
ned2_r2  = ned2_r22 NOT          ned2_r21
ned2_r25 = ned2_r23 AND          pdd
ned2_r26 = (ned2_r2 NOT          (pdd OUTSIDE diff)) WITH WIDTH >= 0.005
ned2_r27 = ned2_r22 OUTSIDE      (ned2_r25 OR ned2_r26)
ned32    = ned2_al5 INSIDE       (dnwel25 OUTSIDE sblk)
ned33    = ned2_al5 INSIDE       dnwel60
ned41    = ned23    INSIDE       ned26
ned42    = EXPAND EDGE (COIN EDGE ned41 ned16) OUTSIDE BY 0.21
ned43    = EXPAND EDGE (COIN EDGE ned42 ned31) OUTSIDE BY 0.65
ned44    = ned43    INSIDE       ned_al1

neda11   = ned32    WITH WIDTH == 1.53
neda12   = (neda11  OR           ned16) RECTANGLE == 4.62
neda131  = ((ned32  INTERACT     neda12) NOT neda12) AREA == 7.222175
neda132  = (neda131 NOT          pwiso) AREA == 5.4716
neda133  = ((ned32  ENCLOSE      neda131 == 2) ENCLOSE neda132 == 2) ENCLOSE neda11 == 2
neda134  = (neda12  NOT          ned16) OR neda131
neda13   = (neda133 INSIDE neda134) AND (neda134 INSIDE neda133)
neda14   = SIZE     neda12   BY  0.32
neda151  = dntap_h8 ENCLOSE      neda14
neda15   = neda151  OUTSIDE      (dpc OR pdd)
neda161  = (neda15  NOT          neda14) AREA == 18.6112
neda16   = (neda161 NOT          poly1) AREA == 9.577025
neda17   = ((neda15 ENCLOSE      neda16 == 2) ENCLOSE neda14 == 1) ENCLOSE neda13 == 1
neda172  = ned2_al3 OR           ned25
neda18   = neda17   OUTSIDE      (isowell NOT neda172)
neda     = (ned_al1 INSIDE       neda18) NOT ned44
neda2    = ned32    ENCLOSE      neda == 2
neda2_b  = neda2    WITH TEXT "bjt" id_txt
neda2_d  = neda2    NOT          neda2_b

nedb11   = ned32    WITH WIDTH == 1.4
nedb12   = (nedb11  OR           ned16) RECTANGLE == 4.36
nedb131  = ((ned32  INTERACT     nedb12) NOT nedb12) AREA == 6.4491
nedb132  = (nedb131 NOT          isowell) AREA == 4.568925
nedb133  = ((ned32  ENCLOSE      nedb131 == 2) ENCLOSE nedb132 == 2) ENCLOSE nedb11 == 2
nedb134  = (nedb12  NOT          ned16) OR nedb131
nedb13   = (nedb133 INSIDE nedb134) AND (nedb134 INSIDE nedb133)
nedb14   = SIZE     nedb12   BY  0.7
nedb141  = EXPAND EDGE (COIN EDGE ned16 nedb11) OUTSIDE BY 2.1
nedb142  = (nedb14  AND          pdd) RECTANGLE == 0.5
nedb143  = (nedb14  NOT          nedb142) RECTANGLE == 0.1
nedb151  = dntap_h8 ENCLOSE      nedb14
nedb152  = nedb151  AND          dpc
nedb153  = (nedb151 AND          ned15) SIZE BY 0.24
nedb154  = (nedb153 INSIDE nedb152) AND (nedb152 INSIDE nedb153)
nedb15   = dntap_h8 ENCLOSE      nedb154
nedb161  = (nedb15  NOT          nedb14) AREA == 24.4892
nedb16   = (nedb161 NOT          poly1) AREA == 18.058425
nedb171  = ((nedb15 ENCLOSE      nedb16 == 2) ENCLOSE nedb14 == 1) ENCLOSE nedb13 == 1
nedb173  = SIZE     neda172  BY  0.22
nedb174  = nedb173  NOT          neda172
nedb175  = ned2_r22 NOT          nedb173
nedb176  = nedb174  NOT          poly1
nedb177  = (nedb175 AND          poly1) WITH WIDTH >= 0.005
nedb17   = nedb171  OUTSIDE      (nedb176 OR nedb177)
nedb181  = (EXPAND EDGE (COIN EDGE ned15 nedb12) OUTSIDE BY 2.12) SIZE BY 0.16
nedb182  = (nedb181 AND          pdd) RECTANGLE == 0.8 BY == 0.95
nedb183  = (nedb17  AND          pdd) NOT nedb182
nedb184  = (nedb183 SIZE BY 0.1) AND (ned2_ri AND diff)
nedb185  = EXPAND EDGE (NOT INSIDE EDGE (nedb183 SIZE BY 0.105) diff) BY 0.005
nedb186  = ned2_ri  OUTSIDE      (nedb184 OR nedb185)
nedb18   = ((nedb17 INSIDE       (nedb15 INTERACT pdd)) INSIDE nedb186) INSIDE ned2_r27
nedb     = (ned_al1 INSIDE       nedb18) NOT ned44
nedb2    = ned32    ENCLOSE      nedb == 2
nedb2_b  = nedb2    WITH TEXT "bjt" id_txt
nedb2_d  = nedb2    NOT          nedb2_b
nedb_mwb = ((dnwel25 INTERACT    nedb) AND diff) SIZE BY 2.74

nedc11   = ned33    WITH WIDTH == 1.3
nedc12   = (nedc11  OR           ned16) RECTANGLE == 4.16
nedc131  = ((ned33  INTERACT     nedc12) NOT nedc12) AREA == 6.251975
nedc132  = (nedc131 NOT          isowell) AREA == 4.0128
nedc133  = ((ned33  ENCLOSE      nedc131 == 2) ENCLOSE nedc132 == 2) ENCLOSE nedc11 == 2
nedc134  = (nedc12  NOT          ned16) OR nedc131
nedc13   = (nedc133 INSIDE nedc134) AND (nedc134 INSIDE nedc133)
nedc14   = SIZE     nedc12   BY  1.8
nedd14   = SIZE     nedc12   BY  3.2
nedc151  = dntap_h8 ENCLOSE      nedc12
nedc152  = nedc151  AND          dpc
nedc1531 = (nedc151 AND          ned15) SIZE BY 0.34
nedc1532 = EXPAND EDGE (COIN EDGE ned16 nedc12) OUTSIDE BY 0.01
nedc1533 = EXPAND EDGE (COIN EDGE ned16 nedc12) OUTSIDE BY 0.17
nedc153  = nedc1531 OR           ((nedc1533 NOT nedc1532) SIZE BY 0.22)
nedc154  = (nedc153 INSIDE nedc152) AND (nedc152 INSIDE nedc153)
nedc15   = (nedc151 ENCLOSE      nedc154) ENCLOSE nedc14
nedd15   = (nedc151 ENCLOSE      nedc154) ENCLOSE nedd14
nedc161  = (nedc15  NOT          nedc14) AREA == 45.2732
nedc16   = (nedc161 NOT          poly1) AREA == 42.7612
nedc171  = ((nedc15 ENCLOSE      nedc16 == 2) ENCLOSE nedc14 == 1) ENCLOSE nedc13 == 1
nedc173  = SIZE     neda172  BY  0.42
nedc174  = nedc173  NOT          neda172
nedc175  = ned2_r22 NOT          nedc173
nedc176  = nedc174  NOT          poly1
nedc177  = (nedc175 AND          poly1) WITH WIDTH >= 0.005
nedc17   = nedc171  OUTSIDE      (nedc176 OR nedc177)
nedc181  = (EXPAND EDGE (COIN EDGE ned15 nedc12) OUTSIDE BY 2.17) SIZE BY 0.16
nedc182  = (nedc181 AND          pdd) RECTANGLE == 0.8 BY == 0.9
nedd181  = dntap    INTERACT     nedd15
nedd182  = nedd181  SIZE BY 0.4
nedc183  = nedc151  NOT          nedd182
nedc1841 = SIZE     neda172  BY  0.15
nedc1842 = SIZE     nedc183  BY -0.2
nedc184  = nedc1842 NOT          nedc1841
nedc185  = nedc183  NOT          nedc184
nedc186  = (nedc184 NOT          pdd) WITH WIDTH >= 0.005
nedc187  = (nedc185 AND          pdd) NOT nedc182
nedc188  = ned2_ri  OUTSIDE      (nedc186  OR           nedc187)
nedc18   = ((nedc17 INSIDE       (nedc15 INTERACT pdd)) INSIDE nedc188) INSIDE ned2_r27
nedc191  = nedc18   OR           (dntap INTERACT nedc18)
nedc19   = nedc191  OUTSIDE      sblk
nedc     = (ned_al1 INSIDE       nedc19) NOT ned44
nedc2    = ned33    ENCLOSE      nedc == 2
nedc2_b  = nedc2    WITH TEXT "bjt" id_txt
nedc2_d  = nedc2    NOT          nedc2_b
nedc_mwd = ((dnwel60 INTERACT    nedc) AND diff) SIZE BY 4.2

nedd161  = (nedd15  NOT          nedd14) AREA == 42.2303
nedd16   = (nedd161 NOT          poly1) AREA == 42.2303
nedd171  = ((nedd15 ENCLOSE      nedd16 == 2) ENCLOSE nedd14 == 1) ENCLOSE nedc13 == 1
nedd173  = SIZE     neda172  BY  1.02
nedd174  = nedd173  NOT          neda172
nedd175  = ned2_r22 NOT          nedd173
nedd176  = nedd174  NOT          poly1
nedd177  = (nedd175 AND          poly1) WITH WIDTH >= 0.005
nedd17   = nedd171  OUTSIDE      (nedd176 OR nedd177)
nedd183  = ((nedd17 INSIDE       (nedd15 INTERACT pdd)) INSIDE nedc188) INSIDE ned2_r27
nedd184  = nedd182  NOT          nedd181
nedd185  = b1_df1   INTERACT     nedd181
nedd1861 = (nedd184 NOT          nedd185) WITH WIDTH >= 0.005
nedd1862 = nedd185  NOT          nedd184
nedd186  = nedd182  INTERACT     (nedd1861 OR nedd1862)
nedd18   = nedd183  OUTSIDE      nedd186
nedd191  = nedd181  SIZE BY 0.02
nedd192  = nedd182  SIZE BY 0.22
nedd193  = nedd192  NOT          nedd191
nedd194  = nedd192  OR           nedd18
nedd195  = sblk     INTERACT     nedd194
nedd1961 = (nedd193 NOT          nedd195) WITH WIDTH >= 0.005
nedd1962 = (nedd195 NOT          nedd193) WITH WIDTH >=0.010
nedd1963 = INT (nedd195 NOT nedd193) == 0.005 REGION
nedd196  = nedd194  INTERACT     ((nedd1961 OR nedd1962) OR nedd1963)
nedd19   = nedd18   OUTSIDE      nedd196
nedd     = (ned_al1 INSIDE       nedd19) NOT ned44
nedd2    = ned33    ENCLOSE      nedd == 2
nedd2_b  = nedd2    WITH TEXT "bjt" id_txt
nedd2_d  = nedd2    NOT          nedd2_b
nedd_mwd = ((dnwel60 INTERACT    nedd) AND diff) SIZE BY 4.2

nede21   = (ned11_h NOT          ned16) AREA == 1.4036
nede22   = nede21   NOT          poly1
nede23   = nede22   RECTANGLE == 0.27 BY == 1.56
nede24   = (nede21  ENCLOSE      nede22 == 1) ENCLOSE nede23 == 1
nede25   = (ned11_h ENCLOSE      ned16 == 1) ENCLOSE nede24 == 2
nede26   = pwiso    ENCLOSE      nede25
nede2_al1 = nede26  AND          ned11
nede31    = EXPAND EDGE (COIN EDGE ned16 nede2_al1) OUTSIDE BY 1.13
nede_al1  = nede31   AND          nede2_al1
nede2_al2 = nede2_al1 ENCLOSE     nede_al1 ==2
nede2_al3 = ned11    ENCLOSE      nede2_al2 ==1
nede2_al4 = (dntap_h8 ENCLOSE nede2_al3 ==1) ENCLOSE diff == 1
nede2_al5 = ned11    AND          nede2_al4
nede2_ri  = (ned12   OR           nede2_al4) OR ((dnw_al2 ENCLOSE nede2_al4) AND diff)
nede2_r21 = nede2_ri  SIZE BY 0.24
nede2_r22 = nede2_ri  SIZE BY 1.24
nede2_r23 = nede2_r21 NOT          nede2_ri
nede2_r2  = nede2_r22 NOT          nede2_r21
nede2_r25 = nede2_r23 AND          pdd
nede2_r26 = (nede2_r2 NOT          (pdd OUTSIDE diff)) WITH WIDTH >= 0.005
nede2_r27 = nede2_r22 OUTSIDE      (nede2_r25 OR nede2_r26)
nede33    = nede2_al5 INSIDE       nd2
nede41    = nede23    INSIDE       nede26
nede42    = EXPAND EDGE (COIN EDGE nede41 ned16) OUTSIDE BY 0.21
nede43    = EXPAND EDGE (COIN EDGE nede42 nede31) OUTSIDE BY 0.45
nede44    = nede43    INSIDE       nede_al1
nede11   = nede33   WITH WIDTH == 1.13
nede12   = (nede11  OR           ned16) RECTANGLE == 3.82
nede131  = ((nede33 INTERACT     nede12) NOT nede12) AREA == 4.197375
nede132  = (nede131 NOT          pwiso) AREA == 3.394275
nede133  = ((nede33 ENCLOSE      nede131 == 2) ENCLOSE nede132 == 2) ENCLOSE nede11 == 2
nede134  = (nede12  NOT          ned16) OR nede131
nede13   = (nede133 INSIDE nede134) AND (nede134 INSIDE nede133)
nede14   = SIZE     nede12   BY  0.32
nede151  = dntap_h8 ENCLOSE      nede14
nede15   = nede151  OUTSIDE      (dpc OR pdd)
nede161  = (nede15  NOT          nede14) AREA == 15.8092
nede16   = (nede161 NOT          poly1) AREA == 10.1381
nede17   = ((nede15 ENCLOSE      nede16 == 2) ENCLOSE nede14 == 1) ENCLOSE nede13 == 1
nede172  = nede2_al3 OR          nede25
nede18   = nede17   OUTSIDE      (isowell NOT nede172)
nede     = (nede_al1 INSIDE      nede18) NOT nede44
nede2    = nede33    ENCLOSE     nede == 2
nede2_b  = nede2    WITH TEXT "bjt" id_txt
nede2_d  = nede2    NOT          nede2_b


ned_al   = ((neda   OR           nedb) OR (nedc OR nedd)) OR nede
ned2_al  = ((neda2  OR           nedb2) OR (nedc2 OR nedd2)) OR nede2
ped_al   = ((peda   OR           pedb) OR (pedc OR pedd)) OR pede
ped2_al  = ((peda2  OR           pedb2) OR (pedc2 OR pedd2)) OR pede2
dmos2_al = ned2_al  OR           ped2_al

gat_ext  = gate     OR           emptlay


qnva_1   = (pdd     RECTANGLE == 3.04) INSIDE dnwel60
qnva_11  = qnva_1   ENCLOSE      diff     == 3
qnva_12  = qnva_11  ENCLOSE      ndiff1   == 1
qnva_13  = qnva_12  ENCLOSE      pdiff1   == 2
qnva_21  = (diff    INSIDE       qnva_13) RECTANGLE == 0.42 BY >= 2
qnva_22  = VERTEX   (SIZE  (SIZE qnva_21  BY  0.23 OVERUNDER) BY 0.43) == 4
qnva_23  = (qnva_13 INSIDE qnva_22) AND (qnva_22 INSIDE qnva_13)
qnva_31  = SIZE     qnva_23  BY  0.17
qnva_32  = SIZE     qnva_23  BY  2.01
qnva_33  = (qnva_31 NOT          dnc) NOT nwell
qnva_34  = (qnva_33 INSIDE qnva_31) AND (qnva_31 INSIDE qnva_33)
qnva_35  = qnva_32  NOT          qnva_31
qnva_36  = (qnva_35 AND          dnc) AND nwell
qnva_37  = (qnva_35 INSIDE qnva_36) AND (qnva_36 INSIDE qnva_35)
qnva_41  = SIZE     qnva_23  BY  0.43
qnva_42  = SIZE     qnva_23  BY  0.435
qnva_43  = qnva_41  NOT          qnva_23
qnva_44  = qnva_43  NOT          diff
qnva_45  = (qnva_44 INSIDE qnva_43) AND (qnva_43 INSIDE qnva_44)
qnva_46  = qnva_42  NOT          qnva_41
qnva_47  = qnva_42  AND          ndiff1
qnva_48  = (qnva_46 INSIDE qnva_47) AND (qnva_47 INSIDE qnva_46)
qnva_51  = qnva_23  INSIDE       (qnva_32 ENCLOSE qnva_37)
qnva_52  = qnva_51  INSIDE       (qnva_42 ENCLOSE qnva_45)
qnva_53  = qnva_52  INSIDE       (qnva_42 ENCLOSE qnva_48)
qnva_54  = qnva_53  INSIDE       qnva_34

qnva_dw1 = dnwel60  ENCLOSE      (qnva_54  SIZE BY  3.85)
qnva_nw  = qnva_dw1 SIZE BY -1.84
qnva_61  = qnva_dw1 NOT          qnva_nw
qnva_62  = qnva_61  AND          nwell
qnva_63  = qnva_dw1 OUTSIDE      qnva_62
qnva_64  = qnva_63  ENCLOSE      qnva_54
qnva_65  = dnwel60  ENCLOSE      qnva_64
qnva_66  = (qnva_65 INSIDE qnva_64) AND (qnva_64 INSIDE qnva_65)
qnva_67  = qnva_54  INSIDE       qnva_66

qnva_71  = qnva_66  INSIDE       mv
qnva_72  = qnva_66  NOT          qnva_71

qnva     = (qnva_67 INSIDE       qnva_72) AND ndiff1
qnva5    = (qnva_67 INSIDE       qnva_71) AND ndiff1
qnva_all = qnva     OR           qnva5
qnva_dnw = qnva_67  SIZE BY  1.09


qnvb_1   = (ndd     INSIDE       vdnwell) RECTANGLE == 2.2 BY >= 2.2
qnvb_11  = qnvb_1   ENCLOSE      diff     == 1
qnvb_12  = qnvb_11  ENCLOSE      ndiff1   == 1
qnvb_13  = qnvb_12  OUTSIDE      pdiff1
qnvb_21  = (diff    INSIDE       qnvb_13) RECTANGLE == 1.6 
qnvb_22  = SIZE     qnvb_21  BY  0.3
qnvb_23  = (qnvb_13 INSIDE qnvb_22) AND (qnvb_22 INSIDE qnvb_13)
qnvb_24  = dpb      ENCLOSE      qnvb_23  == 1
qnvb_31  = SIZE     qnvb_23  BY  0.8
qnvb_32  = SIZE     qnvb_23  BY  1.46
qnvb_33  = qnvb_31  NOT          dpc
qnvb_34  = (qnvb_33 INSIDE qnvb_31) AND (qnvb_31 INSIDE qnvb_33)
qnvb_35  = qnvb_32  NOT          qnvb_34
qnvb_36  = qnvb_35  AND          (dpc INSIDE (pwiso INSIDE dpc))
qnvb_37  = (qnvb_35 INSIDE qnvb_36) AND (qnvb_36 INSIDE qnvb_35)
qnvb_41  = SIZE     qnvb_32  BY  0.3
qnvb_42  = qnvb_41  NOT          (dpc NOT qnvb_37)
qnvb_43  = (qnvb_42 INSIDE qnvb_24) AND (qnvb_24 INSIDE qnvb_42)
qnvb_51  = SIZE     qnvb_43  BY  2.5
qnvb_52  = SIZE     qnvb_43  BY  4.4
qnvb_53  = qnvb_51  NOT          vnc
qnvb_54  = (qnvb_53 INSIDE qnvb_51) AND (qnvb_51 INSIDE qnvb_53)
qnvb_55  = qnvb_52  NOT          qnvb_51
qnvb_56  = qnvb_55  AND          vnc
qnvb_57  = (qnvb_55 INSIDE qnvb_56) AND (qnvb_56 INSIDE qnvb_55)
qnvb_61  = qnvb_23  INSIDE       (qnvb_32 ENCLOSE qnvb_37)
qnvb_62  = qnvb_61  INSIDE       (qnvb_41 ENCLOSE qnvb_43)
qnvb_63  = qnvb_62  INSIDE       (qnvb_52 ENCLOSE qnvb_54)
qnvb_64  = qnvb_63  INSIDE       (qnvb_52 ENCLOSE qnvb_57)
qnvb_d1  = qnvb_64  AND          ndiff1
qnvb_r1  = (SIZE    qnvb_d1  BY  1.64) NOT (SIZE    qnvb_d1  BY  1.22)
qnvb_r2  = (SIZE    qnvb_d1  BY  6.03) NOT ((SIZE    qnvb_d1  BY  4.99) ENCLOSE qnvb_64 == 1)
qnvb_d2  = (qnvb_r1 OR           qnvb_r2) NOT diff
qnvb_d3  = ((SIZE   qnvb_d1  BY  6.03) NOT ((qnvb_r1 AND pdiff1) OR (qnvb_r2 AND ndiff1))) AND diff
qnvb_d4  = (qnvb_d2 OR qnvb_d3)  NOT qnvb_d1

qnvb_v1  = SIZE     qnvb_d1  BY  6.96
qnvb_v2  = qnvb_v1  INSIDE       vdnwell
qnvb_vd1 = qnvb_v2  OUTSIDE      qnvb_d4
qnvb     = qnvb_23  INSIDE       qnvb_vd1
qnvb_vd  = SIZE     qnvb     BY  5.21


qnvc_ip1 = ((pwiso  OUTSIDE      poly1) INSIDE mv) INSIDE dnw_mv
qnvc_ip2 = qnvc_ip1 OUTSIDE      diodef
qnvc_ip3 = qnvc_ip2 ENCLOSE      b1_df1
qnvc_ip4 = qnvc_ip3 ENCLOSE      diff   == 1
qnvc_ip5 = qnvc_ip4 ENCLOSE      ndiff1 == 1
qnvc_ip6 = qnvc_ip5 ENCLOSE      pdiff1
qnvc_nd1 = ndiff1   INSIDE       qnvc_ip6
qnvc     = RECTANGLE qnvc_nd1 >= 3 BY == 1.36
qnvc_nd2 = VERTEX   qnvc_nd1 == 8
qnvcra   = qnvc_nd2 AREA == 2.1348
qnvcrb   = qnvc_nd2 AREA == 8.5392
qnvc_all = qnvc     OR           (qnvcra OR qnvcrb)
qnvc_dnw = dnw_mv   ENCLOSE      qnvc_all
qnvc_pw  = qnvc_ip6 ENCLOSE      qnvc_all
qnvc_dnx = SIZE     qnvc_pw  BY  1
qnvc_dw  = SIZE (EXTENTS qnvc_dnx) BY 1
qnvc_dwc = SIZE     qnvc_dw  BY -0.5

qnvc_pw0 = qnvc_pw  ENCLOSE      qnvc
qnvc_nw1 = SIZE     qnvc_pw0 BY  0.48
qnvc_nw2 = SIZE     qnvc_pw0 BY  1.62
qnvc_nw  = qnvc_nw2 NOT          qnvc_nw1
qnvcapw0 = EXTENTS (qnvc_pw ENCLOSE qnvcra)
qnvcanw1 = SIZE     qnvcapw0 BY  0.48
qnvcanw2 = INT qnvcanw1 < 1.405 ABUT==90 REGION
qnvcanw3 = SIZE     qnvcanw1 BY  1.14
qnvcanw4 = qnvcanw1 NOT          qnvcanw2
qnvcanw  = qnvcanw3 NOT          qnvcanw4
qnvcbpw0 = EXTENTS (qnvc_pw ENCLOSE qnvcrb)
qnvcbnw1 = SIZE     qnvcbpw0 BY  0.48
qnvcbnw2 = INT qnvcbnw1 < 1.7 ABUT==90 REGION
qnvcbnw3 = SIZE     qnvcbnw1 BY  1.14
qnvcbnw4 = qnvcbnw1 NOT          qnvcbnw2
qnvcbnw  = qnvcbnw3 NOT          qnvcbnw4

qnvc_pw1 = EXPAND EDGE (LENGTH qnvc == 1.36) INSIDE BY 1.06
qnvc_pw2 = qnvc     NOT          qnvc_pw1
qnvc_pw3 = SIZE     qnvc_pw2 BY  1.56
qnvcapw1 = SIZE (EXTENTS qnvcra) BY  1.55
qnvcapw2 = INT qnvcapw1 < 1.13 ABUT==90 REGION
qnvcapw3 = qnvcapw1 NOT          qnvcapw2
qnvcbpw1 = SIZE (EXTENTS qnvcrb) BY  1.55
qnvcbpw2 = INT qnvcbpw1 < 1.42 ABUT==90 REGION
qnvcbpw3 = qnvcbpw1 NOT          qnvcbpw2

qnvc_dn1 = SIZE     qnvc_pw0 BY  0.6
qnvc_dn2 = SIZE     qnvc_pw0 BY  1.5
qnvc_dn  = qnvc_dn2 NOT          qnvc_dn1
qnvcadn1 = SIZE     qnvcapw0 BY  0.6
qnvcadn2 = SIZE     qnvcapw0 BY  1.5
qnvcadn3 = INT qnvcadn1 < 1.475 ABUT==90 REGION
qnvcadn4 = qnvcadn1 NOT          qnvcadn3
qnvcadn  = qnvcadn2 NOT          qnvcadn4
qnvcbdn1 = SIZE     qnvcbpw0 BY  0.6
qnvcbdn2 = SIZE     qnvcbpw0 BY  1.5
qnvcbdn3 = INT qnvcbdn1 < 1.77 ABUT==90 REGION
qnvcbdn4 = qnvcbdn1 NOT          qnvcbdn3
qnvcbdn  = qnvcbdn2 NOT          qnvcbdn4

qnvc_dp1 = EXPAND EDGE (LENGTH qnvc > 1.36) OUTSIDE BY 1.06
qnvc_dp2 = EXPAND EDGE (LENGTH qnvc > 1.36) OUTSIDE BY 0.34
qnvc_dp  = qnvc_dp1 NOT          qnvc_dp2
qnvcadp1 = SIZE (EXTENTS qnvcra) BY  1.06
qnvcadp2 = SIZE (EXTENTS qnvcra) BY  0.34
qnvcadp3 = INT qnvcadp1 < 0.85  ABUT==90 REGION
qnvcadp4 = INT qnvcadp2 < 0.435 ABUT==90 REGION
qnvcadp5 = qnvcadp1 NOT          qnvcadp3
qnvcadp6 = qnvcadp2 NOT          qnvcadp4
qnvcadp  = qnvcadp5 NOT          qnvcadp6
qnvcbdp1 = SIZE (EXTENTS qnvcrb) BY  1.06
qnvcbdp2 = SIZE (EXTENTS qnvcrb) BY  0.34
qnvcbdp3 = INT qnvcbdp1 < 1.14  ABUT==90 REGION
qnvcbdp4 = INT qnvcbdp2 < 0.69  ABUT==90 REGION
qnvcbdp5 = qnvcbdp1 NOT          qnvcbdp3
qnvcbdp6 = qnvcbdp2 NOT          qnvcbdp4
qnvcbdp  = qnvcbdp5 NOT          qnvcbdp6
qnvc_df  = qnvc_dp1 OR           qnvc

qnvc_sb1 = EXPAND EDGE (LENGTH qnvc > 1.36) OUTSIDE BY 0.22
qnvc_sb2 = EXPAND EDGE (LENGTH qnvc > 1.36) INSIDE  BY 0.05
qnvc_sb3 = qnvc_sb1 OR           qnvc_sb2
qnvc_sb  = SIZE     qnvc_sb3 BY  0.3
qnvcasb1 = SIZE (EXTENTS qnvcra) BY  0.52
qnvcasb2 = SIZE (EXTENTS qnvcra) BY -0.18
qnvcasb3 = INT qnvcasb1 < 0.535 ABUT==90 REGION
qnvcasb4 = INT qnvcasb2 < 0.125 ABUT==90 REGION
qnvcasb5 = qnvcasb1 NOT          qnvcasb3
qnvcasb6 = qnvcasb2 NOT          qnvcasb4
qnvcasb  = qnvcasb5 NOT          qnvcasb6
qnvcbsb1 = SIZE (EXTENTS qnvcrb) BY  0.52
qnvcbsb2 = SIZE (EXTENTS qnvcrb) BY -0.18
qnvcbsb3 = INT qnvcbsb1 < 0.79  ABUT==90 REGION
qnvcbsb4 = INT qnvcbsb2 < 0.38  ABUT==90 REGION
qnvcbsb5 = qnvcbsb1 NOT          qnvcbsb3
qnvcbsb6 = qnvcbsb2 NOT          qnvcbsb4
qnvcbsb  = qnvcbsb5 NOT          qnvcbsb6


qpvhasp1 = (pdd     ENCLOSE      pwiso    == 1) INSIDE vdnwell
qpvhasv1 = (vdnwell ENCLOSE      qpvhasp1 <= 2) OUTSIDE diodef
qpvhasp2 = qpvhasv1 AND          pwiso
qpvhasp3 = qpvhasp2 NOT          pdd
qpvhasp4 = HOLES    INNER        qpvhasp3
qpvhasp5 = qpvhasp1 INSIDE       qpvhasp4
qpvhasc1 = qpvhasp5 ENCLOSE      ndiff1   == 1

qpvhas51 = (pdiff   AND          qpvhasp3) AND dnwtrm NOT CONNECTED
qpvhas52 = (ndiff   AND          qpvhasp5) AND pwitrm NOT CONNECTED
qpvhascr = qpvhasc1 AND          (qpvhasv1 OUTSIDE (qpvhas51 OR qpvhas52))

qpvhasp6 = SIZE     qpvhascr BY  5.43  UNDEROVER
qpvhasp7 = SIZE     qpvhasp6 BY  5.43  OVERUNDER
qpvhas_emr = RECTANGLE (EXTENTS qpvhasp7) == 10.87
qpvhas_em3 = INT qpvhas_emr < 2.19 ABUT==90 REGION
qpvhas_pt0 = qpvhas_emr NOT qpvhas_em3
qpvhas_em1 = RECTANGLE qpvhas_emr == 10.87 BY >= 14 <= 110
qpvhas_em2 = INT qpvhas_em1 < 2.19 ABUT==90 REGION
qpvhas_pt1 = qpvhas_pt0 NOT (qpvhas_em1 NOT qpvhas_em2)

qpvhas_emq = RECTANGLE qpvhas_emr > 10.87
qpvhas_p11 = SIZE     qpvhas_emr BY -1
qpvhas_p12 = INT qpvhas_p11 < 1.62 ABUT==90 REGION
qpvhas_pi1 = qpvhas_p11 NOT          qpvhas_p12
qpvhas_p21 = SIZE     qpvhas_emr BY  3.5
qpvhas_p22 = INT qpvhas_p21 < 4.25 ABUT==90 REGION
qpvhas_pi2 = qpvhas_p21 NOT          qpvhas_p22
qpvhas_p31 = EXPAND EDGE (LENGTH qpvhas_emq == 10.87) OUTSIDE BY 0.5
qpvhas_p32 = qpvhas_emr OR           qpvhas_p31
qpvhas_p33 = SIZE     qpvhas_p32 BY  6.61
qpvhas_p34 = INT qpvhas_p33 < 5.3  ABUT==90 REGION
qpvhas_pi3 = qpvhas_p33 NOT          qpvhas_p34
qpvhas_pi4 = qpvhas_pi1 OR           (qpvhas_pi3 NOT qpvhas_pi2)

qpvhas_nw1 = SIZE     qpvhas_p32 BY  9.72
qpvhas_nw  = qpvhas_nw1 NOT          qpvhas_pi3

qpvhas_d11 = EXPAND EDGE (LENGTH qpvhas_emq == 10.87) INSIDE BY 1
qpvhas_d12 = qpvhas_emr NOT          qpvhas_d11
qpvhas_dp1 = SIZE     qpvhas_d12 BY -4.89
qpvhas_dn1 = SIZE     qpvhas_d12 BY -3
qpvhas_dn2 = SIZE     qpvhas_d12 BY -4.33
qpvhas_dn3 = qpvhas_dn1 NOT          qpvhas_dn2
qpvhas_d21 = SIZE     qpvhas_emr BY  4
qpvhas_d22 = INT qpvhas_d21 < 4.53 ABUT==90 REGION
qpvhas_dp2 = qpvhas_d21 NOT          qpvhas_d22
qpvhas_d31 = SIZE     qpvhas_p32 BY  6.33
qpvhas_d32 = INT qpvhas_d31 < 5.3  ABUT==90 REGION
qpvhas_dp3 = qpvhas_d31 NOT          qpvhas_d32
qpvhas_dp4 = qpvhas_dp3 NOT          qpvhas_dp2
qpvhas_dp  = qpvhas_dp1 OR           qpvhas_dp4
qpvhas_d41 = SIZE     qpvhas_p32 BY  6.89
qpvhas_d42 = INT qpvhas_d41 < 5.3  ABUT==90 REGION
qpvhas_dn4 = qpvhas_d41 NOT          qpvhas_d42
qpvhas_d51 = SIZE     qpvhas_p32 BY  8.22
qpvhas_dn5 = qpvhas_d51 NOT          qpvhas_dn4
qpvhas_dn  = qpvhas_dn3 OR           qpvhas_dn5

qpvhas_6d1 = SIZE     qpvhas_emr BY  2
qpvhas_6d2 = INT qpvhas_6d1 < 3.35 ABUT==90 REGION
qpvhas_dw6 = qpvhas_6d1 NOT          qpvhas_6d2

qpvhasv2 = SIZE     qpvhas_p32 BY 12.16
qpvhasvd = (qpvhasv1 ENCLOSE qpvhasv2) AND (qpvhasv2 ENCLOSE qpvhasv1)

qpvhas_s11 = SIZE     qpvhas_d12 BY -2.78
qpvhas_s12 = SIZE     qpvhas_d12 BY -3.69
qpvhas_sb1 = qpvhas_s11 NOT          qpvhas_s12
qpvhas_s21 = SIZE     qpvhas_emr BY  3.78
qpvhas_s22 = INT qpvhas_s21 < 4.41 ABUT==90 REGION
qpvhas_s23 = qpvhas_s21 NOT          qpvhas_s22
qpvhas_s24 = SIZE     qpvhas_p32 BY  5.22
qpvhas_s25 = INT qpvhas_s24 < 4.97 ABUT==90 REGION
qpvhas_s26 = qpvhas_s24 NOT          qpvhas_s25
qpvhas_sb2 = qpvhas_s26 NOT          qpvhas_s23
qpvhas_s31 = SIZE     qpvhas_p32 BY  8.44
qpvhas_s32 = SIZE     qpvhas_p32 BY  8
qpvhas_sb3 = qpvhas_s31 NOT          qpvhas_s32
qpvhas_sb  = qpvhas_sb1 OR           (qpvhas_sb2 OR qpvhas_sb3)

qpvhas_m111 = SIZE    qpvhas_d12  BY -2.9
qpvhas_m112 = SIZE    qpvhas_d12  BY -2.75
qpvhas_m121 = SIZE    qpvhas_p32  BY  8.5
qpvhas_m122 = SIZE    qpvhas_p32  BY  4.5
qpvhas_m123 = INT qpvhas_m122 < 4.94 ABUT==90 REGION
qpvhas_m124 = qpvhas_m122 NOT         qpvhas_m123
qpvhas_m125 = SIZE    qpvhas_p32  BY  8.55
qpvhas_m126 = qpvhas_m121 NOT         qpvhas_m124
qpvhas_m127 = qpvhas_m125 NOT         qpvhas_m124
qpvhas_m131 = SIZE    qpvhas_p32  BY  9.68
qpvhas_m132 = SIZE    qpvhas_m131 BY  7.65
qpvhas_m13  = qpvhas_m132 NOT         qpvhas_m131
qpvhas_m1m  = qpvhas_m111 OR          (qpvhas_m126 OR qpvhas_m13)
qpvhas_m1n  = qpvhas_m112 OR          (qpvhas_m127 OR qpvhas_m13)

qpvhas_m21 = SIZE    qpvhas_p32  BY 17.35
qpvhas_m22 = SIZE    qpvhas_p32  BY -0.15
qpvhas_m23 = SIZE    qpvhas_p32  BY -1.3
qpvhas_m2m  = qpvhas_m111 OR          (qpvhas_m21 NOT qpvhas_m22)
qpvhas_m2n  = qpvhas_m112 OR          (qpvhas_m21 NOT qpvhas_m23)


qpvh_1   = (pdd     INSIDE       vdnwell) RECTANGLE == 5 BY >= 5
qpvh_10  = qpvh_1   OUTSIDE      diodef
qpvh_11  = qpvh_10  ENCLOSE      diff     == 1
qpvh_12  = qpvh_11  ENCLOSE      pdiff1   == 1
qpvh_13  = qpvh_12  OUTSIDE      ndiff1
qpvh_21  = (diff    INSIDE       qpvh_13) RECTANGLE == 2
qpvh_22  = SIZE     qpvh_21  BY  1.5
qpvh_23  = (qpvh_13 INSIDE qpvh_22) AND (qpvh_22 INSIDE qpvh_13)
qpvh_31  = SIZE     qpvh_23  BY  1.13
qpvh_32  = SIZE     qpvh_23  BY  3.03
qpvh_33  = qpvh_31  NOT          vnc
qpvh_34  = (qpvh_33 INSIDE qpvh_31) AND (qpvh_31 INSIDE qpvh_33)
qpvh_35  = qpvh_32  NOT          qpvh_31
qpvh_36  = qpvh_35  AND          vnc
qpvh_37  = (qpvh_35 INSIDE qpvh_36) AND (qpvh_36 INSIDE qpvh_35)
qpvh_41  = SIZE     qpvh_32  BY  0.8
qpvh_42  = qpvh_41  NOT          qpvh_32
qpvh_43  = qpvh_42  NOT          vnc
qpvh_44  = (qpvh_43 INSIDE qpvh_42) AND (qpvh_42 INSIDE qpvh_43)
qpvh_50  = qpvh_23  INSIDE       (qpvh_31 ENCLOSE qpvh_34)
qpvh_51  = qpvh_50  INSIDE       (qpvh_32 ENCLOSE qpvh_37)
qpvh_52  = qpvh_51  INSIDE       (qpvh_41 ENCLOSE qpvh_44)
qpvh_d1  = qpvh_52  AND          pdiff1
qpvh_r1  = (SIZE    qpvh_d1  BY  3.84) NOT ((SIZE    qpvh_d1  BY  3.42) ENCLOSE qpvh_52 == 1)
qpvh_d2  = qpvh_r1  NOT          diff
qpvh_d3  = ((SIZE   qpvh_d1  BY  5.33) NOT (qpvh_r1 AND ndiff1) ) AND diff
qpvh_d4  = (qpvh_d2 OR qpvh_d3)  NOT qpvh_d1

qpvh_v1  = SIZE     qpvh_d1  BY  5.33
qpvh_v2  = (qpvh_v1 INSIDE vdnwell) AND (vdnwell INSIDE qpvh_v1)
qpvh_vd1 = qpvh_v2  OUTSIDE      qpvh_d4
qpvh_vd  = qpvh_vd1 ENCLOSE      qpvh_52
qpvh     = qpvh_23  INSIDE       qpvh_vd


npdct    = 
      ((EXPAND EDGE (EXT [ndiff1] pdiff1 < 0.005 ABUT<90 SINGULAR) OUTSIDE BY 0.005)
      OR
      (EXPAND EDGE (EXT ndiff1 [pdiff1] < 0.005 ABUT<90 SINGULAR) OUTSIDE BY 0.005))
      NOT sblk

ndiffc = npdct AND ndiff
pdiffc = npdct AND pdiff
npdtap = (npdct ENCLOSE ndiffc) ENCLOSE pdiffc


rnw1     = nwrdef   AND          nwell
nw_scr   = nwell    WITH TEXT "scr" iddtxt
rnw_scr1 = ((nw_scr AND          rnw1) TOUCH pdiff1 == 1) TOUCH ndiff1 == 1
rnw2     = rnw1     NOT          rnw_scr1
rnw      = rnw2     NOT          mv
rnwm     = rnw2     AND          mv
rnw_scr  = rnw_scr1 NOT          mv
rnwm_scr = rnw_scr1 AND          mv
nwtrm    = nwtrm1   NOT          rnw1

rdnwmv   = dnmrdef  AND          dnw_mv
dnwtrm   = dnw_all  NOT          rdnwmv

dmos_gat = ned_al   OR           ped_al
dnwtrm_d = dnwtrm   INTERACT     dmos_gat
dmos_dnx = dnwtrm_d NOT          dmos_gat
dmos_pwx = (pdd     OR           pd2) OR dmos_gat

//  ===  ESD  ===
dnw_esd0 = (dnwtrm  INSIDE       diodef) OUTSIDE poly1
dnw_esd1 = dnw_esd0 WITH TEXT "ESD_DIODE" iddtxt
dnw_esd2 = dnw_esd0 WITH TEXT "niscr" iddtxt
niscr_w1 = dnw_esd2 ENCLOSE      ndif == 1
niscr_w2 = niscr_w1 ENCLOSE      pdif == 2
niscr_31 = niscr_w2 WITH WIDTH >= 9.44
niscr_32 = niscr_w2 WITH WIDTH >  9.44
niscr_w3 = dnwel60  INSIDE       (niscr_31 NOT niscr_32)
niscr_wr = niscr_w3 SIZE BY 2.8 UNDEROVER
niscr_d1 = (niscr_wr NOT (EXPAND EDGE (LENGTH niscr_wr == 9.44) INSIDE BY 0.79)) SIZE BY 4.79
niscr_d2 = niscr_d1 NOT (INT niscr_d1 < 3.79 ABUT==90 REGION)
niscr_d3 = (niscr_d2 SIZE BY 0.005) NOT niscr_d2
niscr_d4 = niscr_d2 NOT niscr_w3


dnw_esd3 = dnw_esd0 WITH TEXT "hvscr?" iddtxt
hvscr1_0 = (pdd WITH TEXT "hvscr1" iddtxt) INSIDE dnw_esd3
dvdnw_sc = dnw_esd3 INSIDE       vdnwell
hvscr_0  = (pdd WITH TEXT "hvscr" iddtxt) INSIDE dvdnw_sc

hvscr1_1 = dnwel60  ENCLOSE      hvscr1_0 <= 2
hvscr1_2 = hvscr1_0 INSIDE       hvscr1_1
hvscr1_3 = hvscr1_2 ENCLOSE      pdiff == 1
hvscr1_4 = RECTANGLE (hvscr1_3 AND pdiff) == 1.09 BY > 2
hvscr_d6 = hvscr1_1 OUTSIDE      (pdd OUTSIDE hvscr1_4)

hvscr_1  = vdnwell  ENCLOSE      hvscr_0 <= 2
hvscr_2  = hvscr_0  INSIDE       hvscr_1
hvscr_3  = hvscr_2  ENCLOSE      pdiff <= 2
hvscr_4  = RECTANGLE (hvscr_3 AND pdiff) == 1.09 BY > 2
hvscr_vd = hvscr_1  OUTSIDE      (pdd OUTSIDE hvscr_4)

dpdd_d6a = dnw_esd1 AND          ((pdd WITH TEXT "ESD_DIODE" iddtxt) AND dnwel60)
dpdd_vda = dnw_esd1 AND          ((pdd WITH TEXT "ESD_DIODE" iddtxt) AND vdnwell)
hvscr_al = hvscr_d6 OR           hvscr_vd

hvscra_p0  = hvscr_al  AND          pdd
hvscra_p1  = SIZE    hvscra_p0 BY  5.43  UNDEROVER
hvscra_p2  = SIZE    hvscra_p1 BY  5.43  OVERUNDER
hvscra_emr = RECTANGLE (EXTENTS hvscra_p2) == 10.87
hvscra_em3 = INT hvscra_emr < 1 ABUT==90 REGION
hvscra_pt0 = hvscra_emr NOT hvscra_em3
hvscra_em1 = RECTANGLE hvscra_emr == 10.87 BY >= 14 <= 200
hvscra_em2 = INT hvscra_em1 < 1 ABUT==90 REGION
hvscra_pt1 = hvscra_pt0 NOT (hvscra_em1 NOT hvscra_em2)

hvscra_emq = RECTANGLE hvscra_emr > 10.87
hvscra_p11 = EXPAND EDGE (LENGTH hvscra_emq == 10.87) INSIDE BY 1.5
hvscra_p12 = hvscra_emq NOT          hvscra_p11
hvscra_p13 = SIZE     hvscra_p12 BY -1
hvscra_p14 = INT hvscra_p13 < 1    ABUT==90 REGION
hvscra_pi1 = hvscra_p13 NOT          hvscra_p14
hvscra_pi2 = (hvscra_p0 INTERACT     pwiso) AND hvscra_pi1
hvscrd_p21 = hvscra_p13 AND          hvscr_d6
hvscrd_p22 = EXPAND EDGE (LENGTH hvscrd_p21 == 8.87) OUTSIDE BY 0.5
hvscrd_p23 = hvscrd_p21 OR           hvscrd_p22
hvscrd_p24 = EXPAND EDGE (LENGTH hvscrd_p23 > 8.87) OUTSIDE BY 3.5
hvscrd_p25 = EXPAND EDGE (LENGTH hvscrd_p23 > 8.87) OUTSIDE BY 6.505
hvscrd_pi2 = hvscrd_p25 NOT          hvscrd_p24

hvscrv_p21 = hvscra_p13 AND          hvscr_vd
hvscrv_p22 = EXPAND EDGE (LENGTH hvscrv_p21 == 8.87) OUTSIDE BY 0.5
hvscrv_p23 = hvscrv_p21 OR           hvscrv_p22
hvscrv_p24 = hvscrv_p23 ENCLOSE      pdiff == 1
hvscrv_p25 = hvscrv_p23 ENCLOSE      pdiff == 2
hvscrv_p26 = EXPAND EDGE (LENGTH hvscrv_p24 > 8.87) OUTSIDE BY 3.5
hvscrv_p27 = EXPAND EDGE (LENGTH hvscrv_p24 > 8.87) OUTSIDE BY 7.61
hvscrv_p28 = EXPAND EDGE (LENGTH hvscrv_p25 > 8.87) OUTSIDE BY 5.5
hvscrv_p29 = EXPAND EDGE (LENGTH hvscrv_p25 > 8.87) OUTSIDE BY 7.61
hvscrv_pi2 = hvscrv_p27 NOT          hvscrv_p26
hvscrv_pi3 = hvscrv_p29 NOT          hvscrv_p28

hvscrd_emq = hvscra_emq AND          hvscr_d6
hvscrd_d11 = EXPAND EDGE (LENGTH hvscrd_emq == 10.87) OUTSIDE BY 0.24
hvscrd_d12 = hvscrd_emq OR           hvscrd_d11
hvscrd_dp1 = SIZE     hvscrd_d12 BY -4.89
hvscrd_d21 = EXPAND EDGE (LENGTH hvscrd_emq > 10.87) OUTSIDE BY 3
hvscrd_d22 = NOT COIN EDGE (LENGTH hvscrd_d21 > 10.87) hvscrd_emq
hvscrd_d23 = EXPAND EDGE hvscrd_d22 OUTSIDE BY 2.225
hvscrd_d24 = EXPAND EDGE (LENGTH hvscrd_d23 == 2.225) INSIDE BY 3.5
hvscrd_dp2 = hvscrd_d23 NOT          hvscrd_d24
hvscrd_dp  = hvscrd_dp1 OR           hvscrd_dp2

hvscrd_d31 = EXPAND EDGE (LENGTH hvscrd_emq == 10.87) INSIDE BY 1.5
hvscrd_d32 = hvscrd_emq NOT          hvscrd_d31
hvscrd_d33 = SIZE     hvscrd_d32 BY -3
hvscrd_d34 = SIZE     hvscrd_dp1 BY  0.56
hvscrd_dn1 = hvscrd_d33 NOT          hvscrd_d34
hvscrd_d41 = EXPAND EDGE (LENGTH hvscrd_emq == 10.87) INSIDE BY 3.5
hvscrd_d42 = hvscrd_emq NOT          hvscrd_d41
hvscrd_d43 = COIN EDGE (LENGTH hvscrd_emq > 10.87) hvscrd_d42
hvscrd_d44 = EXPAND EDGE hvscrd_d43 OUTSIDE BY 5.785
hvscrd_d45 = EXPAND EDGE hvscrd_d43 OUTSIDE BY 7.585
hvscrd_d46 = SIZE     hvscrd_dp2 BY  0.56
hvscrd_dn2 = hvscrd_d45 NOT          (hvscrd_d44 OR hvscrd_d46)
hvscrd_dn  = hvscrd_dn1 OR           hvscrd_dn2

hvscrv_emq = hvscra_emq AND          hvscr_vd
hvscrv_d11 = hvscrv_emq ENCLOSE      pdiff == 1
hvscrv_d12 = hvscrv_emq ENCLOSE      pdiff == 2
hvscrv_d13 = EXPAND EDGE (LENGTH hvscrv_d11 == 10.87) OUTSIDE BY 0.24
hvscrv_d14 = hvscrv_d11 OR           hvscrv_d13
hvscrv_dp1 = SIZE     hvscrv_d14 BY -4.89
hvscrv_d21 = EXPAND EDGE (LENGTH hvscrv_d11 > 10.87) OUTSIDE BY 3
hvscrv_d22 = NOT COIN EDGE (LENGTH hvscrv_d21 > 10.87) hvscrv_d11
hvscrv_d23 = EXPAND EDGE hvscrv_d22 OUTSIDE BY 3.33
hvscrv_d24 = EXPAND EDGE (LENGTH hvscrv_d23 == 3.33) INSIDE BY 3.5
hvscrv_dp2 = hvscrv_d23 NOT          hvscrv_d24
hvscrv_dp5 = hvscrv_dp1 OR           hvscrv_dp2
hvscrv_d31 = EXPAND EDGE (LENGTH hvscrv_d12 == 10.87) INSIDE BY 1.5
hvscrv_d32 = hvscrv_d12 NOT          hvscrv_d31
hvscrv_d33 = SIZE     hvscrv_d32 BY -3
hvscrv_d34 = SIZE     hvscrv_d12 BY -4.09
hvscrv_dp3 = hvscrv_d33 NOT          hvscrv_d34
hvscrv_d41 = EXPAND EDGE (LENGTH hvscrv_d12 == 10.87) INSIDE BY 3.5
hvscrv_d42 = hvscrv_d12 NOT          hvscrv_d41
hvscrv_d43 = COIN EDGE (LENGTH hvscrv_d12 > 10.87) hvscrv_d42
hvscrv_d44 = EXPAND EDGE hvscrv_d43 OUTSIDE BY 5
hvscrv_d45 = EXPAND EDGE hvscrv_d43 OUTSIDE BY 6.33
hvscrv_dp4 = hvscrv_d45 NOT          hvscrv_d44
hvscrv_dp6 = hvscrv_dp3 OR           hvscrv_dp4
hvscrv_dp  = hvscrv_dp5 OR           hvscrv_dp6

hvscrv_d51 = EXPAND EDGE (LENGTH hvscrv_d11 == 10.87) INSIDE BY 1.5
hvscrv_d52 = hvscrv_d11 NOT          hvscrv_d51
hvscrv_d53 = SIZE     hvscrv_d52 BY -3
hvscrv_d54 = SIZE     hvscrv_dp1 BY  0.56
hvscrv_dn1 = hvscrv_d53 NOT          hvscrv_d54
hvscrv_d61 = EXPAND EDGE (LENGTH hvscrv_emq == 10.87) INSIDE BY 3.5
hvscrv_d62 = hvscrv_emq NOT          hvscrv_d61
hvscrv_d63 = COIN EDGE (LENGTH hvscrv_emq > 10.87) hvscrv_d62
hvscrv_d64 = EXPAND EDGE hvscrv_d63 OUTSIDE BY 6.89
hvscrv_d65 = EXPAND EDGE hvscrv_d63 OUTSIDE BY 8.69
hvscrv_d66 = SIZE     hvscrv_dp2 BY  0.56
hvscrv_dn2 = hvscrv_d65 NOT          (hvscrv_d64 OR hvscrv_d66)
hvscrv_dn4 = hvscrv_dn1 OR           hvscrv_dn2
hvscrv_d71 = EXPAND EDGE (LENGTH hvscrv_d12 == 10.87) OUTSIDE BY 0.24
hvscrv_d72 = hvscrv_d12 OR           hvscrv_d71
hvscrv_dn3 = SIZE     hvscrv_d12 BY -4.65
hvscrv_dn  = hvscrv_dn4 OR           hvscrv_dn3

hvscrv_vd1 = EXPAND EDGE (LENGTH hvscrv_emq > 10.87) OUTSIDE BY 7.63
hvscrv_vd2 = hvscrv_emq OR           hvscrv_vd1
hvscrv_vd3 = SIZE     hvscrv_vd2 BY  5
hvscrv_vd4 = INT hvscrv_vd3 < 1    ABUT==90 REGION
hvscrv_vd  = hvscrv_vd3 NOT          hvscrv_vd4

hvscrd_nw1 = EXPAND EDGE (LENGTH hvscrd_emq == 10.87) INSIDE BY 2
hvscrd_nw2 = hvscrd_emq NOT          hvscrd_nw1
hvscrd_nw3 = EXPAND EDGE (LENGTH hvscrd_nw2 > 10.87) OUTSIDE BY 5.505
hvscrd_nw4 = EXPAND EDGE (LENGTH hvscrd_nw2 > 10.87) OUTSIDE BY 7.875
hvscrd_nw  = hvscrd_nw4 NOT          hvscrd_nw3

hvscrv_n11 = EXPAND EDGE (LENGTH hvscrv_emq == 10.87) INSIDE BY 2
hvscrv_n12 = hvscrv_emq NOT          hvscrv_n11
hvscrv_n13 = EXPAND EDGE (LENGTH hvscrv_n12 > 10.87) OUTSIDE BY 6.61
hvscrv_n14 = EXPAND EDGE (LENGTH hvscrv_n12 > 10.87) OUTSIDE BY 8.98
hvscrv_nw1 = hvscrv_n14 NOT          hvscrv_n13
hvscrv_n21 = EXPAND EDGE (LENGTH hvscrv_d12 == 10.87) OUTSIDE BY 2
hvscrv_n22 = hvscrv_d12 OR           hvscrv_n21
hvscrv_n23 = EXPAND EDGE (LENGTH hvscrv_n22 > 10.87) OUTSIDE BY 2
hvscrv_n24 = EXPAND EDGE (LENGTH hvscrv_n22 > 10.87) OUTSIDE BY 3.9
hvscrv_n25 = hvscrv_n24 NOT          hvscrv_n23
hvscrv_n26 = hvscr_vd   ENCLOSE      (hvscrv_n25 AND nwell)
hvscrv_nw2 = hvscrv_n26 AND          hvscrv_n25
hvscrv_nw  = hvscrv_nw1 OR           hvscrv_nw2

hvscrv_nc  = hvscrv_nw  AND          (hvscr_vd ENCLOSE hvscrv_d12)

hvscrd_6d1 = EXPAND EDGE (LENGTH hvscrd_emq > 10.87) OUTSIDE BY 6.525
hvscrd_6d2 = hvscrd_emq OR           hvscrd_6d1
hvscrd_6d3 = SIZE     hvscrd_6d2 BY  5
hvscrd_6d4 = INT hvscrd_6d3 < 1    ABUT==90 REGION
hvscrd_dw6 = hvscrd_6d3 NOT          hvscrd_6d4
hvscrv_dw1 = SIZE     hvscrv_emq BY  2
hvscrv_dw2 = hvscrv_dw1 ENCLOSE      hvscrv_d11
hvscrv_dw3 = EXPAND EDGE (LENGTH hvscrv_dw2 > 14.87) INSIDE BY 1
hvscrv_dw6 = hvscrv_vd  NOT          (hvscrv_dw1 NOT hvscrv_dw3)

hvscrd_s11 = EXPAND EDGE (LENGTH hvscrd_emq == 10.87) INSIDE BY 1.5
hvscrd_s12 = EXPAND EDGE (LENGTH hvscrd_emq == 10.87) INSIDE BY 1.905
hvscrd_s13 = EXPAND EDGE (LENGTH hvscrd_dp1 == 1.09) OUTSIDE BY 0.03
hvscrd_s14 = hvscrd_emq NOT          hvscrd_s11
hvscrd_s15 = hvscrd_emq NOT          hvscrd_s12
hvscrd_s16 = hvscrd_dp1 OR           hvscrd_s13
hvscrd_s17 = (SIZE    hvscrd_s14 BY -2.78) NOT (SIZE hvscrd_s15 BY -3.22)
hvscrd_s18 = SIZE     hvscrd_s16 BY  0.34
hvscrd_sb1 = hvscrd_s17  NOT          hvscrd_s18
hvscrd_s21 = EXPAND EDGE (LENGTH hvscrd_emq == 10.87) INSIDE BY 3.28
hvscrd_s22 = EXPAND EDGE (LENGTH hvscrd_s21 == 3.28) OUTSIDE BY 7.805
hvscrd_s23 = EXPAND EDGE (LENGTH hvscrd_emq > 10.87) OUTSIDE BY 7.805
hvscrd_s24 = EXPAND EDGE (LENGTH hvscrd_emq > 10.87) OUTSIDE BY 2.78
hvscrd_s25 = hvscrd_s23 NOT          hvscrd_s22
hvscrd_sb2 = hvscrd_s25 NOT          hvscrd_s24
hvscrd_s31 = EXPAND EDGE (LENGTH hvscrd_emq == 10.87) INSIDE BY 5.125
hvscrd_s32 = EXPAND EDGE (LENGTH hvscrd_s31 == 5.125) OUTSIDE BY 7.365
hvscrd_s33 = EXPAND EDGE (LENGTH hvscrd_emq > 10.87) OUTSIDE BY 7.365
hvscrd_s34 = EXPAND EDGE (LENGTH hvscrd_emq > 10.87) OUTSIDE BY 4.115
hvscrd_s35 = hvscrd_s33 NOT          hvscrd_s32
hvscrd_sb3 = hvscrd_s35 NOT          hvscrd_s34
hvscrd_sb4 = hvscrd_sb2 NOT          hvscrd_sb3
hvscrd_sb  = hvscrd_sb1 OR           hvscrd_sb4

hvscrv_s11 = EXPAND EDGE (LENGTH hvscrv_d11 == 10.87) INSIDE BY 1.5
hvscrv_s12 = EXPAND EDGE (LENGTH hvscrv_d11 == 10.87) INSIDE BY 1.905
hvscrv_s13 = EXPAND EDGE (LENGTH hvscrv_dp1 == 1.09) OUTSIDE BY 0.03
hvscrv_s14 = hvscrv_d11 NOT          hvscrv_s11
hvscrv_s15 = hvscrv_d11 NOT          hvscrv_s12
hvscrv_s16 = hvscrv_dp1 OR           hvscrv_s13
hvscrv_s17 = (SIZE    hvscrv_s14 BY -2.78) NOT (SIZE hvscrv_s15 BY -3.22)
hvscrv_s18 = SIZE     hvscrv_s16 BY  0.34
hvscrv_sb1 = hvscrv_s17  NOT          hvscrv_s18
hvscrv_s21 = EXPAND EDGE (LENGTH hvscrv_d11 == 10.87) INSIDE BY 3.28
hvscrv_s22 = EXPAND EDGE (LENGTH hvscrv_s21 == 3.28) OUTSIDE BY 8.91
hvscrv_s23 = EXPAND EDGE (LENGTH hvscrv_d11 > 10.87) OUTSIDE BY 8.91
hvscrv_s24 = EXPAND EDGE (LENGTH hvscrv_d11 > 10.87) OUTSIDE BY 2.78
hvscrv_s25 = hvscrv_s23 NOT          hvscrv_s22
hvscrv_sb2 = hvscrv_s25 NOT          hvscrv_s24
hvscrv_s31 = EXPAND EDGE (LENGTH hvscrv_d11 == 10.87) INSIDE BY 5.125
hvscrv_s32 = EXPAND EDGE (LENGTH hvscrv_s31 == 5.125) OUTSIDE BY 8.47
hvscrv_s33 = EXPAND EDGE (LENGTH hvscrv_d11 > 10.87) OUTSIDE BY 8.47
hvscrv_s34 = EXPAND EDGE (LENGTH hvscrv_d11 > 10.87) OUTSIDE BY 5.22
hvscrv_s35 = hvscrv_s33 NOT          hvscrv_s32
hvscrv_sb3 = hvscrv_s35 NOT          hvscrv_s34
hvscrv_sb4 = hvscrv_sb2 NOT          hvscrv_sb3
hvscrv_s51 = EXPAND EDGE (LENGTH hvscrv_d12 == 10.87) INSIDE BY 0.255
hvscrv_s52 = hvscrv_d12 NOT          hvscrv_s51
hvscrv_s53 = SIZE     hvscrv_d12 BY -4.43
hvscrv_s54 = SIZE     hvscrv_s52 BY -4.87
hvscrv_sb5 = hvscrv_s53 NOT          hvscrv_s54
hvscrv_s61 = EXPAND EDGE (LENGTH hvscrv_d12 == 10.87) INSIDE BY 3.28
hvscrv_s62 = EXPAND EDGE (LENGTH hvscrv_s61 == 3.28) OUTSIDE BY 8.91
hvscrv_s63 = EXPAND EDGE (LENGTH hvscrv_d12 > 10.87) OUTSIDE BY 8.91
hvscrv_s64 = EXPAND EDGE (LENGTH hvscrv_d12 > 10.87) OUTSIDE BY 4.78
hvscrv_s65 = hvscrv_s63 NOT          hvscrv_s62
hvscrv_sb6 = hvscrv_s65 NOT          hvscrv_s64
hvscrv_s71 = EXPAND EDGE (LENGTH hvscrv_d12 == 10.87) INSIDE BY 5.125
hvscrv_s72 = EXPAND EDGE (LENGTH hvscrv_s71 == 5.125) OUTSIDE BY 8.47
hvscrv_s73 = EXPAND EDGE (LENGTH hvscrv_d12 > 10.87) OUTSIDE BY 8.47
hvscrv_s74 = EXPAND EDGE (LENGTH hvscrv_d12 > 10.87) OUTSIDE BY 5.22
hvscrv_s75 = hvscrv_s73 NOT          hvscrv_s72
hvscrv_sb7 = hvscrv_s75 NOT          hvscrv_s74
hvscrv_sb8 = hvscrv_sb6 NOT          hvscrv_sb7
hvscrv_s91 = hvscrv_sb1 OR           hvscrv_sb4
hvscrv_s92 = hvscrv_s91 AND          (hvscr_vd ENCLOSE hvscrv_d11)
hvscrv_s93 = hvscrv_sb5 OR           hvscrv_sb8
hvscrv_s94 = hvscrv_s93 AND          (hvscr_vd ENCLOSE hvscrv_d12)
hvscrv_sb  = hvscrv_s92 OR           hvscrv_s94
//  ===  ESD  ===

rdn11    = ((((sblk AND          ndiff1) NOT anwelft) NOT pwblk) NOT qpvhasc1) NOT qnvc_all
niscr_wd = dnwel60  INSIDE       (((niscr_w3 SIZE BY 3.0) TOUCH rdn11 == 2) OR ((niscr_w3 SIZE BY 2.5) TOUCH rdn11 == 2))
rn_screx = rdn11    INSIDE       ((niscr_wd SIZE BY 4.35) OR hvscr_al)
rdn1     = rdn11    NOT          rn_screx
rdn_g1   = EXPAND EDGE (EXT rdn1 [gate] < 0.005 ABUT<90 SINGULAR) OUTSIDE BY 0.005
rdn_a1   = rdn1     OUTSIDE      rdn_g1
rdn2     = rdn1     OUTSIDE      rdn_a1
rdn_g2   = rdn2     NOT          rdn_g1
rdn3     = rdn_a1   NOT          mv
rdn      = rdn3     NOT          dnw_all
rdni     = rdn3     AND          dnw_all
rdn_g3   = rdn_g2   NOT          mv
rdn_g    = rdn_g3   NOT          dnw_all
rdn_gi   = rdn_g3   AND          dnw_all
rdn4     = rdn_a1   AND          mv
rdnm     = rdn4     NOT          dnw_all
rdnmi    = rdn4     AND          dnw_all
rdn_g41  = rdn_g2   AND          mv
rdn_g42  = rdn_g41  INTERACT     dpc
rdn_g43  = EXPAND EDGE (COIN EDGE rdn_g42 sblk) BY 0.5
rdn_g44  = dpc      INTERACT     rdn_g42
rdn_g45  = (rdn_g44 NOT          rdn_g43) SIZE BY  0.5
rdn_g46  = rdn_g45  NOT          rdn_g1
rdn_g47  = rdn_g42  OR           rdn_g1
rdn_g48  = EXPAND EDGE (COIN EDGE rdn_g42 sblk) OUTSIDE BY 1.0
rdn_g49  = (rdn_g47 OR           rdn_g48) SIZE BY -0.5
rdn_g51  = (rdn_g46 INSIDE rdn_g42) AND (rdn_g42 INSIDE rdn_g46)
rdn_g52  = (rdn_g49 INSIDE rdn_g44) AND (rdn_g44 INSIDE rdn_g49)
rdn_g5   = rdn_g51  INTERACT     rdn_g52
rdn_g4   = rdn_g41  NOT          rdn_g5
rdnm_g   = rdn_g4   NOT          dnw_all
rdnm_gi  = rdn_g4   AND          dnw_all
rdnm_dpc = rdn_g5   NOT          dnw_all
rdnm_dpi = rdn_g5   AND          dnw_all
rdn_a    = rdn_a1   OR           rdn_g2
ndiff    = ndiff1   NOT          rdn_a

rdp1     = (sblk    AND          pdiff1)     AND   nwell
rdp_g1   = EXPAND EDGE (EXT rdp1 [gate] < 0.005 ABUT<90 SINGULAR) OUTSIDE BY 0.005
rdp_a1   = rdp1     OUTSIDE      rdp_g1
rdp2     = rdp1     OUTSIDE      rdp_a1
rdp_g2   = rdp2     NOT          rdp_g1
rdp3     = rdp_a1   NOT          mv
rdp      = rdp3     NOT          dnw_all
rdpi     = rdp3     AND          dnw_all
rdp_g3   = rdp_g2   NOT          mv
rdp_g    = rdp_g3   NOT          dnw_all
rdp_gi   = rdp_g3   AND          dnw_all
rdp4     = rdp_a1   AND          mv
rdpm     = rdp4     NOT          dnw_all
rdpmi    = rdp4     AND          dnw_all
rdp_g4   = rdp_g2   AND          mv
rdpm_g   = rdp_g4   NOT          dnw_all
rdpm_gi  = rdp_g4   AND          dnw_all
rdp_a    = rdp_a1   OR           rdp_g2
pdiff    = pdiff1   NOT          rdp_a

res_corr = rdn_g1   OR           rdp_g1


rnp1h    = (hres    AND          poly1) AND sblk
rpp1k1   = mres     AND          poly1

rp_1     = (sblk     AND         (poly1 NOT (rnp1h OR rpp1k1))) NOT gate
rp_2     = EXPAND EDGE (EXT rp_1 [gate] < 0.005 ABUT<90 SINGULAR) OUTSIDE BY 0.22
rp_7     = EXPAND EDGE (EXT rp_1 [rpp1k1] < 0.005 ABUT<90 SINGULAR) OUTSIDE BY 0.22
rp_5     = rp_1     NOT          rp_2
rnp1     = rp_5     AND          nimp
rpp1     = (rp_5    AND          pimp)       NOT   rp_7
poly1re1 = rnp1     OR           rpp1
poly1re2 = poly1re1 OR           (rnp1h OR rpp1k1)
p1trm1   = poly1    NOT          poly1re2
rpp1s_a1 = ((p1rdef AND          p1trm1) AND pimp) NOT gate
rpp1s_a2 = EXPAND EDGE (INSIDE EDGE rpp1 poly1) BY 0.22
rpp1s    = rpp1s_a1 NOT          rpp1s_a2
p1trm2   = p1trm1   NOT          rpp1s

pfuse_0  = (p1rdef  AND          p1trm2) WITH TEXT "pfuse"  id_txt
pfuse1   = RECTANGLE pfuse_0 == 0.18 BY == 0.8
pfuse2   = SIZE ((EXPAND EDGE (LENGTH pfuse1 == 0.18) OUTSIDE BY 0.54) OR pfuse1) BY 0.84
pfuse3   = pfuse2   NOT          (EXPAND EDGE (LENGTH pfuse1 == 0.8) OUTSIDE BY 0.84)
pfuse41  = poly1    ENCLOSE      pfuse1 == 1
pfuse4   = (pfuse41 INSIDE pfuse3) AND (pfuse3 INSIDE pfuse41)
pfuse5   = (pfuse4  AND          cont) SIZE BY 0.13 OVERUNDER

pfuse10  = EXPAND EDGE (LENGTH pfuse1 == 0.18) OUTSIDE BY 0.06
pfuse11  = ((pfuse10 SIZE BY 0.62) AND pfuse4) NOT pfuse1
pfuse12  = pfuse11  SIZE BY -0.1
pfuse14  = pfuse5      OR          pfuse12
pfuse16  = RECTANGLE pfuse14 == 1.66 BY == 1.18

pfuse    = pfuse1   INSIDE       (pfuse4 ENCLOSE pfuse16 == 2)
pfuse_nw = (pfuse   SIZE BY 1.7) AND nwell
p1trm3   = p1trm2   NOT          pfuse
tp1_100  = EXPAND TEXT "tag_100v"  ip1txt BY 0.005
tp1_60   = EXPAND TEXT "tag_60v"   ip1txt BY 0.005
tp1_25   = EXPAND TEXT "tag_25v"   ip1txt BY 0.005
tp1_m100 = EXPAND TEXT "tag_m100v" ip1txt BY 0.005
tp1_m60  = EXPAND TEXT "tag_m60v"  ip1txt BY 0.005
tp1_m25  = EXPAND TEXT "tag_m25v"  ip1txt BY 0.005
p1_pvlbl = (tp1_60  OR           tp1_25) OR tp1_100
p1_mvlbl = (tp1_m60 OR           tp1_m25) OR tp1_m100
p1_vlbl  = p1_pvlbl OR           p1_mvlbl


rpp1k1_3 = rpp1k1   WITH TEXT "rpp1k1_3"  id_txt
rpp1k1_2 = rpp1k1   NOT          rpp1k1_3
rpp1k1_s = rpp1k1_3 NOT          anwell
rpp1k1_p = rpp1k1_3 AND          pwitrm
rpp1k1_x = rpp1k1_3 AND          anwelft
rpp1k1_n = rpp1k1_x AND          nwtrm
rpp1k1_d = rpp1k1_x AND          dnwtrm
rpp1k1nd = rpp1k1_x AND          nddtrm

rnp1h_3  = rnp1h    WITH TEXT "rnp1h_3"   id_txt
rnp1h_2  = rnp1h    NOT          rnp1h_3
rnp1h_s  = rnp1h_3  NOT          anwell
rnp1h_p  = rnp1h_3  AND          pwitrm
rnp1h_x  = rnp1h_3  AND          anwelft
rnp1h_n  = rnp1h_x  AND          nwtrm
rnp1h_d  = rnp1h_x  AND          dnwtrm
rnp1hnd  = rnp1h_x  AND          nddtrm

rnp1_3   = rnp1     WITH TEXT "rnp1_3"    id_txt
rnp1_2   = rnp1     NOT          rnp1_3
rnp1_s   = rnp1_3   NOT          anwell
rnp1_p   = rnp1_3   AND          pwitrm
rnp1_x   = rnp1_3   AND          anwelft
rnp1_n   = rnp1_x   AND          nwtrm
rnp1_d   = rnp1_x   AND          dnwtrm
rnp1nd   = rnp1_x   AND          nddtrm

rpp1_3   = rpp1     WITH TEXT "rpp1_3"    id_txt
rpp1_2   = rpp1     NOT          rpp1_3
rpp1_s   = rpp1_3   NOT          anwell
rpp1_p   = rpp1_3   AND          pwitrm
rpp1_x   = rpp1_3   AND          anwelft
rpp1_n   = rpp1_x   AND          nwtrm
rpp1_d   = rpp1_x   AND          dnwtrm
rpp1nd   = rpp1_x   AND          nddtrm

rpp1s_3  = rpp1s    WITH TEXT "rpp1s_3"   id_txt
rpp1s_2  = rpp1s    NOT          rpp1s_3
rpp1s_s  = rpp1s_3  NOT          anwell
rpp1s_p  = rpp1s_3  AND          pwitrm
rpp1s_x  = rpp1s_3  AND          anwelft
rpp1s_n  = rpp1s_x  AND          nwtrm
rpp1s_d  = rpp1s_x  AND          dnwtrm
rpp1snd  = rpp1s_x  AND          nddtrm


rm1      = met1sl   AND          m1rdef
rm2      = met2sl   AND          m2rdef
m1trm1   = met1sl   NOT          rm1
m2trm1   = met2sl   NOT          rm2
tm1_100  = EXPAND TEXT "tag_100v"  id1txt BY 0.005
tm1_60   = EXPAND TEXT "tag_60v"   id1txt BY 0.005
tm1_25   = EXPAND TEXT "tag_25v"   id1txt BY 0.005
tm1_m100 = EXPAND TEXT "tag_m100v" id1txt BY 0.005
tm1_m60  = EXPAND TEXT "tag_m60v"  id1txt BY 0.005
tm1_m25  = EXPAND TEXT "tag_m25v"  id1txt BY 0.005
m1_pvlbl = (tm1_60  OR           tm1_25) OR tm1_100
m1_mvlbl = (tm1_m60 OR           tm1_m25) OR tm1_m100
m1_vlbl  = m1_pvlbl OR           m1_mvlbl
tm2_100  = EXPAND TEXT "tag_100v"  id2txt BY 0.005
tm2_60   = EXPAND TEXT "tag_60v"   id2txt BY 0.005
tm2_25   = EXPAND TEXT "tag_25v"   id2txt BY 0.005
tm2_m100 = EXPAND TEXT "tag_m100v" id2txt BY 0.005
tm2_m60  = EXPAND TEXT "tag_m60v"  id2txt BY 0.005
tm2_m25  = EXPAND TEXT "tag_m25v"  id2txt BY 0.005
m2_pvlbl = (tm2_60  OR           tm2_25) OR tm2_100
m2_mvlbl = (tm2_m60 OR           tm2_m25) OR tm2_m100
m2_vlbl  = m2_pvlbl OR           m2_mvlbl

#IFDEF METAL3
rm3      = met3sl   AND          m3rdef
m3trm1   = met3sl   NOT          rm3
tm3_100  = EXPAND TEXT "tag_100v"  id3txt BY 0.005
tm3_60   = EXPAND TEXT "tag_60v"   id3txt BY 0.005
tm3_25   = EXPAND TEXT "tag_25v"   id3txt BY 0.005
tm3_m100 = EXPAND TEXT "tag_m100v" id3txt BY 0.005
tm3_m60  = EXPAND TEXT "tag_m60v"  id3txt BY 0.005
tm3_m25  = EXPAND TEXT "tag_m25v"  id3txt BY 0.005
m3_pvlbl = (tm3_60  OR           tm3_25) OR tm3_100
m3_mvlbl = (tm3_m60 OR           tm3_m25) OR tm3_m100
m3_vlbl  = m3_pvlbl OR           m3_mvlbl
#ENDIF

#IFDEF METAL4
rm4      = met4sl   AND          m4rdef
m4trm1   = met4sl   NOT          rm4
tm4_100  = EXPAND TEXT "tag_100v"  id4txt BY 0.005
tm4_60   = EXPAND TEXT "tag_60v"   id4txt BY 0.005
tm4_25   = EXPAND TEXT "tag_25v"   id4txt BY 0.005
tm4_m100 = EXPAND TEXT "tag_m100v" id4txt BY 0.005
tm4_m60  = EXPAND TEXT "tag_m60v"  id4txt BY 0.005
tm4_m25  = EXPAND TEXT "tag_m25v"  id4txt BY 0.005
m4_pvlbl = (tm4_60  OR           tm4_25) OR tm4_100
m4_mvlbl = (tm4_m60 OR           tm4_m25) OR tm4_m100
m4_vlbl  = m4_pvlbl OR           m4_mvlbl
#ENDIF

#IFDEF METAL5
rm5      = met5sl   AND          m5rdef
m5trm1   = met5sl   NOT          rm5
tm5_100  = EXPAND TEXT "tag_100v"  id5txt BY 0.005
tm5_60   = EXPAND TEXT "tag_60v"   id5txt BY 0.005
tm5_25   = EXPAND TEXT "tag_25v"   id5txt BY 0.005
tm5_m100 = EXPAND TEXT "tag_m100v" id5txt BY 0.005
tm5_m60  = EXPAND TEXT "tag_m60v"  id5txt BY 0.005
tm5_m25  = EXPAND TEXT "tag_m25v"  id5txt BY 0.005
m5_pvlbl = (tm5_60  OR           tm5_25) OR tm5_100
m5_mvlbl = (tm5_m60 OR           tm5_m25) OR tm5_m100
m5_vlbl  = m5_pvlbl OR           m5_mvlbl
#ENDIF

#IFDEF MIDMET
rmtp     = mettsl   AND          mtrdef
mttrm1   = mettsl   NOT          rmtp
tmt_100  = EXPAND TEXT "tag_100v"  idttxt BY 0.005
tmt_60   = EXPAND TEXT "tag_60v"   idttxt BY 0.005
tmt_25   = EXPAND TEXT "tag_25v"   idttxt BY 0.005
tmt_m100 = EXPAND TEXT "tag_m100v" idttxt BY 0.005
tmt_m60  = EXPAND TEXT "tag_m60v"  idttxt BY 0.005
tmt_m25  = EXPAND TEXT "tag_m25v"  idttxt BY 0.005
mt_pvlbl = (tmt_60  OR           tmt_25) OR tmt_100
mt_mvlbl = (tmt_m60 OR           tmt_m25) OR tmt_m100
mt_vlbl  = mt_pvlbl OR           mt_mvlbl
#ENDIF

#IFDEF THKMET
rmtpl    = mettpl   AND          mlrdef
mltrm    = mettpl   NOT          rmtpl
tml_100  = EXPAND TEXT "tag_100v"  idltxt BY 0.005
tml_60   = EXPAND TEXT "tag_60v"   idltxt BY 0.005
tml_25   = EXPAND TEXT "tag_25v"   idltxt BY 0.005
tml_m100 = EXPAND TEXT "tag_m100v" idltxt BY 0.005
tml_m60  = EXPAND TEXT "tag_m60v"  idltxt BY 0.005
tml_m25  = EXPAND TEXT "tag_m25v"  idltxt BY 0.005
ml_pvlbl = (tml_60  OR           tml_25) OR tml_100
ml_mvlbl = (tml_m60 OR           tml_m25) OR tml_m100
ml_vlbl  = ml_pvlbl OR           ml_mvlbl
#ENDIF


#IFDEF METAL5
cmim     = capm     AND          met5sl
cmimh    = capmh    AND          met5sl
#ELSE
#IFDEF METAL4
cmim     = capm     AND          met4sl
cmimh    = capmh    AND          met4sl
#ELSE
#IFDEF METAL3
cmim     = capm     AND          met3sl
cmimh    = capmh    AND          met3sl
#ELSE
cmim     = capm     AND          met2sl
cmimh    = capmh    AND          met2sl
#ENDIF
#ENDIF
#ENDIF

#IFDEF METAL3
cmim23f  = capm23f  AND          met2sl
cmimh23f = capmh23f AND          met2sl
#ENDIF

#IFDEF METAL4
cmim34f  = capm34f  AND          met3sl
cmimh34f = capmh34f AND          met3sl
#ENDIF

#IFDEF METAL5
cmim45f  = capm45f  AND          met4sl
cmimh45f = capmh45f AND          met4sl
#ENDIF

cdmm     = capm2    AND          met2sl
ctmm     = capm3    AND          met2sl
cdmmh    = capmh2   AND          met2sl
ctmmh    = capmh3   AND          met2sl
#IFDEF METAL3
cdmma    = capm2a   AND          met3sl
ctmma    = capm3a   AND          met3sl
cdmmha   = capmh2a  AND          met3sl
ctmmha   = capmh3a  AND          met3sl
#ENDIF
#IFDEF METAL4
cdmmb    = capm2b   AND          met4sl
cdmmhb   = capmh2b  AND          met4sl
#ENDIF


capdf_r  = RECTANGLE capdef == 4.46 BY == 10.78
capdfa_r = RECTANGLE capdef == 5.74 BY == 11.08

capsf2   = (capdef  AND m1trm1) AND m2trm1
capsf21  = (VERTEX capsf2 == 20) ENCLOSE via1 == 80
capsf22  = (capdf_r ENCLOSE capsf21 == 2) AND p1trm3
capsf23  = (VERTEX capsf22 == 20) ENCLOSE cont == 8
d_csf2p  = (capdf_r WITH TEXT "csf2p" idctxt) ENCLOSE capsf23 == 2

#IFDEF METAL3
capsf3   = (capsf21 NOT d_csf2p) AND m3trm1
capsf31  = (VERTEX capsf3 == 20) ENCLOSE via2 == 76
capsf32  = (capdf_r ENCLOSE capsf31 == 2) AND p1trm3
capsf33  = (VERTEX capsf32 == 20) ENCLOSE cont == 8
d_csf3p  = (capdf_r WITH TEXT "csf3p" idctxt) ENCLOSE capsf33 == 2
capsf34  = capsf31 NOT d_csf3p
d_csf3   = (capdf_r WITH TEXT "csf3"  idctxt) ENCLOSE capsf34 == 2
d_csf3a  = (capdfa_r WITH TEXT "csf3a"  idctxt) ENCLOSE capsf34 == 2
csf3_ax  = d_csf3  OR d_csf3a
#ENDIF

#IFDEF METAL4
capsf41  = (VERTEX capsf2 == 20) ENCLOSE via1 == 76
capsf42  = (capdf_r ENCLOSE capsf41 == 2) AND m3trm1
capsf43  = (VERTEX capsf42 == 20) ENCLOSE via2 == 80
capsf44  = (capdf_r ENCLOSE capsf43 == 2) AND m4trm1
capsf45  = (VERTEX capsf44 == 20) ENCLOSE via3 == 76
d_csf4   = (capdf_r WITH TEXT "csf4"  idctxt) ENCLOSE capsf45 == 2
capsf42a = (capdfa_r ENCLOSE capsf41 == 2) AND m3trm1
capsf43a = (VERTEX capsf42a == 20) ENCLOSE via2 == 80
capsf44a = (capdfa_r ENCLOSE capsf43a == 2) AND m4trm1
capsf45a = (VERTEX capsf44a == 20) ENCLOSE via3 == 76
d_csf4a  = (capdfa_r WITH TEXT "csf4a"  idctxt) ENCLOSE capsf45a == 2
csf4_ax  = d_csf4  OR d_csf4a
#ENDIF

#IFDEF METAL5
capsf51  = ((capdf_r ENCLOSE capsf34 == 2) NOT d_csf3) AND m4trm1
capsf52  = (VERTEX capsf51 == 20) ENCLOSE via3 == 80
capsf53  = (capdf_r ENCLOSE capsf52 == 2) AND m5trm1
capsf54  = (VERTEX capsf53 == 20) ENCLOSE via4 == 76
d_csf5   = (capdf_r WITH TEXT "csf5"  idctxt) ENCLOSE capsf54 == 2
capsf51a = ((capdfa_r ENCLOSE capsf34 == 2) NOT d_csf3a) AND m4trm1
capsf52a = (VERTEX capsf51a == 20) ENCLOSE via3 == 80
capsf53a = (capdfa_r ENCLOSE capsf52a == 2) AND m5trm1
capsf54a = (VERTEX capsf53a == 20) ENCLOSE via4 == 76
d_csf5a  = (capdfa_r WITH TEXT "csf5a"  idctxt) ENCLOSE capsf54a == 2
csf5_ax  = d_csf5  OR d_csf5a
#ENDIF

#IFDEF MIDMET
#IFDEF METAL5
capsf61  = capsf54 NOT d_csf5
capsf6   = (capdf_r ENCLOSE capsf61 == 2) AND mttrm1
capsf62  = (VERTEX capsf6 == 12) ENCLOSE viatp == 4
d_csft6  = (capdf_r WITH TEXT "csft6"  idctxt) ENCLOSE capsf62 == 2
capsf61a = capsf54a NOT d_csf5a
capsf6a  = (capdfa_r ENCLOSE capsf61a == 2) AND mttrm1
capsf62a = (VERTEX capsf6a == 12) ENCLOSE viatp == 4
d_csft6a = (capdfa_r WITH TEXT "csft6a"  idctxt) ENCLOSE capsf62a == 2
csft6_ax = d_csft6 OR d_csft6a
#ELSE
#IFDEF METAL4
capsf55  = capsf45 NOT d_csf4
capsf56  = (capdf_r ENCLOSE capsf55 == 2) AND mttrm1
capsf57  = (VERTEX capsf56 == 12) ENCLOSE viatp == 4
d_csft5  = (capdf_r WITH TEXT "csft5"  idctxt) ENCLOSE capsf57 == 2
capsf55a = capsf45a NOT d_csf4a
capsf56a = (capdfa_r ENCLOSE capsf55a == 2) AND mttrm1
capsf57a = (VERTEX capsf56a == 12) ENCLOSE viatp == 4
d_csft5a = (capdfa_r WITH TEXT "csft5a"  idctxt) ENCLOSE capsf57a == 2
csft5_ax = d_csft5 OR d_csft5a
#ELSE
#IFDEF METAL3
capsf4   = ((capdf_r ENCLOSE capsf34 == 2) NOT d_csf3) AND mttrm1
capsf46  = (VERTEX capsf4 == 12) ENCLOSE viatp == 4
d_csft4  = (capdf_r WITH TEXT "csft4"  idctxt) ENCLOSE capsf46 == 2
capsf4a  = ((capdfa_r ENCLOSE capsf34 == 2) NOT d_csf3a) AND mttrm1
capsf46a = (VERTEX capsf4a == 12) ENCLOSE viatp == 4
d_csft4a = (capdfa_r WITH TEXT "csft4a"  idctxt) ENCLOSE capsf46a == 2
csft4_ax = d_csft4 OR d_csft4a
#ENDIF
#ENDIF
#ENDIF
#ENDIF

//csf split
#IFDEF METAL3
csf_poly = d_csf2p OR d_csf3p
#ELSE
csf_poly = copy d_csf2p
#ENDIF

csf_p1   = p1trm3 AND csf_poly
p1trm    = p1trm3 NOT csf_poly

#IFDEF MIDMET
#IFDEF METAL5
csf_met12 = csf_poly OR ((csf3_ax OR csf4_ax) OR (csf5_ax OR csft6_ax))
csf_met3  = d_csf3p OR ((csf3_ax OR csf4_ax) OR (csf5_ax OR csft6_ax))
csf_met4  = csf4_ax OR (csf5_ax OR csft6_ax)
csf_met5  = csf5_ax OR csft6_ax
csf_mett  = copy csft6_ax
#ELSE
#IFDEF METAL4
csf_met12 = csf_poly OR ((csf3_ax OR csf4_ax) OR csft5_ax)
csf_met3  = d_csf3p OR ((csf3_ax OR csf4_ax) OR csft5_ax)
csf_met4  = csf4_ax OR csft5_ax
csf_mett  = copy csft5_ax
#ELSE
#IFDEF METAL3
csf_met12 = csf_poly OR (csf3_ax OR csft4_ax)
csf_met3  = d_csf3p OR (csf3_ax OR csft4_ax)
csf_mett  = copy csft4_ax
#ELSE
csf_met12 = copy csf_poly
csf_mett  = copy emptlay
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFNDEF MIDMET
#IFDEF METAL5
csf_met12 = csf_poly OR ((csf3_ax OR csf4_ax) OR csf5_ax)
csf_met3  = d_csf3p OR ((csf3_ax OR csf4_ax) OR csf5_ax)
csf_met4  = csf4_ax OR csf5_ax
csf_met5  = copy csf5_ax
#ELSE
#IFDEF METAL4
csf_met12 = csf_poly OR (csf3_ax OR csf4_ax)
csf_met3  = d_csf3p OR (csf3_ax OR csf4_ax)
csf_met4  = copy csf4_ax
#ELSE
#IFDEF METAL3
csf_met12 = csf_poly OR csf3_ax
csf_met3  = d_csf3p OR csf3_ax
#ELSE
csf_met12 = copy csf_poly
#ENDIF
#ENDIF
#ENDIF
#ENDIF

csf_m1   = m1trm1 AND csf_met12
m1trm    = m1trm1 NOT csf_met12
csf_m2   = m2trm1 AND csf_met12
m2trm    = m2trm1 NOT csf_met12

#IFDEF METAL3
csf_m3   = m3trm1 AND csf_met3
m3trm    = m3trm1 NOT csf_met3
#ENDIF

#IFDEF METAL4
csf_m4   = m4trm1 AND csf_met4
m4trm    = m4trm1 NOT csf_met4
#ENDIF

#IFDEF METAL5
csf_m5   = m5trm1 AND csf_met5
m5trm    = m5trm1 NOT csf_met5
#ENDIF

#IFDEF MIDMET
csf_mt   = mttrm1 AND csf_mett
mttrm    = mttrm1 NOT csf_mett
#ENDIF


m1atrm1  = capsf2   WITH TEXT "N1"     idctxt
m1btrm1  = capsf2   WITH TEXT "N2"     idctxt
m1atrm   = STAMP m1atrm1 BY csf_m1
m1btrm   = STAMP m1btrm1 BY csf_m1
//csf split end


#IFDEF METAL3
capdfn1  = (((capdef NOT d_csf2p) NOT d_csf3p) NOT d_csf3) NOT d_csf3a
#ELSE
capdfnf  = capdef NOT d_csf2p
#ENDIF

#IFDEF MIDMET
#IFDEF METAL5
capdfn2  = ((capdfn1 NOT d_csf4) NOT d_csf5) NOT d_csft6
capdfnf  = ((capdfn2 NOT d_csf4a) NOT d_csf5a) NOT d_csft6a
#ELSE
#IFDEF METAL4
capdfn2  = (capdfn1 NOT d_csf4) NOT d_csft5
capdfnf  = (capdfn2 NOT d_csf4a) NOT d_csft5a
#ELSE
#IFDEF METAL3
capdfnf  = (capdfn1 NOT d_csft4) NOT d_csft4a
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFNDEF MIDMET
#IFDEF METAL5
capdfn2  = (capdfn1 NOT d_csf4) NOT d_csf5
capdfnf  = (capdfn2 NOT d_csf4a) NOT d_csf5a
#ELSE
#IFDEF METAL4
capdfnf  = (capdfn1 NOT d_csf4) NOT d_csf4a
#ELSE
#IFDEF METAL3
capdfnf  = copy capdfn1
#ENDIF
#ENDIF
#ENDIF
#ENDIF


#IFDEF METAL3
capsw3   = (((capdfnf AND p1trm) AND m1trm) AND m2trm) AND m3trm
capswp1  = capsw3   AND          p1trm
capswm1  = capsw3   AND          m1trm
capswm2  = capsw3   AND          m2trm
capswm3  = capsw3   AND          m3trm
CONNECT capswp1 p1trm
CONNECT capswm1 m1trm
CONNECT capswm2 m2trm
CONNECT capswm3 m3trm
d_cswt1  = ENC capswp1 capswm2 == 0 ABUT == 0 CONNECTED REGION
d_cswt2  = ENC capswm1 capswm3 == 0 ABUT == 0 CONNECTED REGION
d_cswt31 = capsw3 ENCLOSE (d_cswt1  AND          d_cswt2)
#ENDIF
#IFDEF METAL4
capswm41 = capsw3   AND          m4trm
capswm42 = capswm41 AND          d_cswt31
capswm43 = STAMP capswm41 BY m4trm
capswm44 = STAMP capswm42 BY capswm2
d_cswt41 = capswm42 ENCLOSE (ENC capswm43 capswm44 == 0 ABUT == 0 CONNECTED REGION)
#ENDIF
#IFDEF METAL5
capswm51 = capswm41 AND          m5trm
capswm52 = capswm51 AND          d_cswt41
capswm53 = STAMP capswm51 BY m5trm
capswm54 = STAMP capswm52 BY capswm3
d_cswt5  = capswm52 ENCLOSE (ENC capswm53 capswm54 == 0 ABUT == 0 CONNECTED REGION)
d_cswt4  = d_cswt41 NOT          d_cswt5
d_cswt3  = d_cswt31 NOT          (d_cswt5 OR d_cswt4)
#ELSE
#IFDEF METAL4
d_cswt4  = COPY     d_cswt41
d_cswt3  = d_cswt31 NOT          d_cswt4
#ELSE
#IFDEF METAL3
d_cswt3  = COPY     d_cswt31
#ENDIF
#ENDIF
#ENDIF


qpv_nw1  = nwell    ENCLOSE      pdiff == 1
qpv_ph1  = ptap_h4  ENCLOSE      qpv_nw1 == 1
qpv_nw2  = qpv_nw1  INSIDE       qpv_ph1
qpv_nws  = SIZE     qpv_nw2    BY  0.38
qpv_nw3  = qpv_nws  INSIDE       ptap_h4
qpv_nw4  = ptap_h4  INSIDE       qpv_nw3
qpv_nw5  = qpv_nw3  AND          qpv_nw4
qpv_pd1  = pdiff    INSIDE       qpv_nw5
qpv_pd2  = qpv_pd1  NOT INSIDE   diodef
qpv_pd4  = VERTEX   qpv_pd2 == 4
qpv_pds  = SIZE     qpv_pd4    BY  1.1

qpv_nt1  = ntap     INSIDE       qpv_nw5
qpv_nt2  = SIZE     qpv_nt1    BY  0.45
qpv_nt3  = HOLES    INNER        qpv_nt1
qpv_nt4  = VERTEX   qpv_nt3 == 4
qpv_pd5  = qpv_nt4  INSIDE       qpv_pds
qpv_pd6  = qpv_pd4  INSIDE       qpv_pd5
qpv_nw6  = qpv_nw5  ENCLOSE      qpv_nt2
qpv_nw7  = qpv_nw6  ENCLOSE      qpv_pd6
qpv_nw   = qpv_nw1  INSIDE       qpv_nw7
qpv_pd   = qpv_pd6  INSIDE       qpv_nw
qpv_pdms = SIZE     qpv_pd     BY  2.5
qpv_pdm1 = qpv_pdms INSIDE       mv
qpv_pdm2 = qpv_pdms OUTSIDE      mv
qpva_d   = AREA     qpv_pd == 4
qpvb_d   = AREA     qpv_pd == 25
qpvc_d   = AREA     qpv_pd == 100
qpva_w   = AREA     qpv_nw == 36
qpvb_w   = AREA     qpv_nw == 81
qpvc_w   = AREA     qpv_nw == 196
qpva_a   = qpva_d   INSIDE       qpva_w
qpvb_a   = qpvb_d   INSIDE       qpvb_w
qpvc_a   = qpvc_d   INSIDE       qpvc_w
qpvma    = qpva_a   INSIDE       qpv_pdm1
qpva     = qpva_a   INSIDE       qpv_pdm2
qpvmb    = qpvb_a   INSIDE       qpv_pdm1
qpvb     = qpvb_a   INSIDE       qpv_pdm2
qpvmc    = qpvc_a   INSIDE       qpv_pdm1
qpvc     = qpvc_a   INSIDE       qpv_pdm2


ndif1    = ndif     NOT          anwelft
ndif2    = ndif1    NOT          ((rdn_a OR qnva_all) OR (qnvb OR qnvc_all))
ndif3    = (ndif2   NOT          pdd) NOT pws

dnp1     = ((dpc    OUTSIDE      anwell) SIZE BY 0.5) INSIDE mv
dnp2     = ptap_h4  INSIDE       dnp1
dnp3     = dnp2     ENCLOSE      ndif2 == 1
dnp4     = RECTANGLE (dnp3 AND ndif2) == 1 BY >= 1 <= 200
dnp5     = dnp4     SIZE BY 0.43
dnp6     = (dnp2 INSIDE dnp5) AND (dnp5 INSIDE dnp2)
dnp      = dnp4     AND          dnp6

ndif4    = ndif3    NOT          dnp
dn_10    = ndif4    OUTSIDE      poly1

dza_al0  = dn_10    AND          dnw_all
dza_al1  = dza_al0  ENCLOSE      pzener
dza_al2  = dza_al1  INSIDE       dnw_al2
dza_a    = dza_al2  INSIDE       dnwel15
dza_b    = dza_al2  INSIDE       dnwel25
dza_d    = dza_al2  INSIDE       dnwel60
dza_m    = dza_al1  INSIDE       dnw_mv1
dza_all  = (dza_m   OR           dza_a) OR (dza_b OR dza_d)

dza_044  = dza_all  SIZE BY 0.44
dza_086  = dza_all  SIZE BY 0.86
dza_129  = dza_all  SIZE BY 1.29
dza_179  = dza_all  SIZE BY 1.79
dza_208  = dza_all  SIZE BY 2.08
dza_250  = dza_all  SIZE BY 2.5
dza_279  = dza_all  SIZE BY 2.79

dn_1     = dn_10    NOT          dza_all
dn_2     = dn_1     NOT          (pwblk NOT lvt)
dn_3     = dn_1     AND          (pwblk NOT lvt)
d_dnn_a  = dn_3     INSIDE       diodef
p_dnn_a  = dn_3     OUTSIDE      d_dnn_a
d_dn_a   = dn_2     INSIDE       diodef
p_dn_a   = dn_2     OUTSIDE      d_dn_a

d_dn_1   = d_dn_a   NOT          mv
d_dn     = d_dn_1   NOT          dnw_all
d_dni    = d_dn_1   AND          dnw_all
d_dnm1   = d_dn_a   AND          mv
d_dnm    = d_dnm1   NOT          dnw_all
d_dnmi   = d_dnm1   AND          dnw_all

p_dn_1   = p_dn_a   NOT          mv
p_dn     = p_dn_1   NOT          dnw_all
p_dni    = p_dn_1   AND          dnw_all
p_dnm1   = p_dn_a   AND          mv
p_dnm    = p_dnm1   NOT          dnw_all
p_dnmi   = p_dnm1   AND          dnw_all

d_dnn    = d_dnn_a  NOT          mv
d_dnnm   = d_dnn_a  AND          mv
p_dnn    = p_dnn_a  NOT          mv
p_dnnm   = p_dnn_a  AND          mv

qpv_a1   = qpva_a   OR           qpvb_a
qpv_a    = qpv_a1   OR           qpvc_a


pdif1    = pdif     AND          anwelft
pdif2    = pdif1    NOT          rdp_a
pdif3    = pdif2    OUTSIDE      poly1

dpp1     = (dnc     INSIDE       ((dnwel60 OUTSIDE poly1) SIZE BY -2.88)) INSIDE mv
dpp2     = dntap_h4 INSIDE       (dpp1 SIZE BY -0.12)
dpp3     = dpp2     ENCLOSE      pdif2 == 1
dpp4     = RECTANGLE (dpp3 AND pdif2) == 1 BY >= 5 <= 200
dpp5     = dpp4     SIZE BY 1.78
dpp6     = (dpp2 INSIDE dpp5) AND (dpp5 INSIDE dpp2)
dpp      = dpp4     AND          dpp6

pdif4    = pdif3    NOT          dpp
dp_1     = pdif4    AND          nwell
dpdnw_1  = pdif3    NOT          anwell3


d_dp_a   = dp_1     INSIDE       diodef
p_dp_1   = dp_1     OUTSIDE      d_dp_a
p_dp_a   = p_dp_1   OUTSIDE      qpv_a

d_dp1    = d_dp_a   NOT          mv
d_dpm1   = d_dp_a   AND          mv
d_dp     = d_dp1    AND          nwtrm
d_dpi    = d_dp1    NOT          nwtrm
d_dpm    = d_dpm1   AND          nwtrm
d_dpmi   = d_dpm1   NOT          nwtrm

p_dp1    = p_dp_a   NOT          mv
p_dpm1   = p_dp_a   AND          mv
p_dp     = p_dp1    AND          nwtrm
p_dpi    = p_dp1    NOT          nwtrm
p_dpm    = p_dpm1   AND          nwtrm
p_dpmi   = p_dpm1   NOT          nwtrm

dpdnw_2  = dpdnw_1  AND          dnw_al3
dpdnw_21 = dpdnw_2  AND          dnw_mv
dpdnw_22 = dpdnw_2  NOT          dnw_mv
d_dpdnwm = dpdnw_21 INSIDE       diodef
p_dpdnwm = dpdnw_21 OUTSIDE      d_dpdnwm
d_dpdnvm = dpdnw_22 INSIDE       diodef
p_dpdnvm = dpdnw_22 OUTSIDE      d_dpdnvm
dpdnw_3  = dpdnw_1  NOT          dpdnw_2
dpdnw_4  = dpdnw_3  AND          dnwel15
d_dpdnw1 = dpdnw_4  INSIDE       diodef
p_dpdnw1 = dpdnw_4  OUTSIDE      d_dpdnw1
dpdnw_5  = dpdnw_3  AND          dnwel25
d_dpdnw2 = dpdnw_5  INSIDE       diodef
p_dpdnw2 = dpdnw_5  OUTSIDE      d_dpdnw2
dpdnw_6  = dpdnw_3  AND          dnwel60
d_dpdnw6 = dpdnw_6  INSIDE       diodef
p_dpdnw6 = dpdnw_6  OUTSIDE      d_dpdnw6


dnw_1    = (nwtrm   NOT          pgi_5t) NOT ((d_dsaw OR pfuse_nw) OR mosvc2)
d_dnw_a  = dnw_1    INSIDE       diodef
p_dnw_1  = dnw_1    OUTSIDE      d_dnw_a
p_dnw_a  = p_dnw_1  OUTSIDE      qpv_a
nwellm   = emptlay  AND          nwell
d_dnw    = d_dnw_a  NOT          mv
d_dnwm1  = d_dnw_a  AND          mv
d_dnwm   = d_dnwm1  NOT          nwellm
d_dnw5m  = d_dnwm1  AND          nwellm
p_dnw    = p_dnw_a  NOT          mv
p_dnwm1  = p_dnw_a  AND          mv
p_dnwm   = p_dnwm1  NOT          nwellm
p_dnw5m  = p_dnwm1  AND          nwellm


dndd_1   = nddtrm   NOT          ndd_b
p_dndd   = dndd_1   NOT          dpb
p_dnddi  = (dndd_1  AND          dpb) NOT qnvb


dpdd_1   = pdd      NOT          pdd_b
d_dpdd1  = dpdd_1   INSIDE       diodef
d_dpdd2  = d_dpdd1  AND          dnw_all
d_dpdd3  = d_dpdd2  AND          (hvscr_al OR (dpdd_d6a OR dpdd_vda))
d_dpdd4  = d_dpdd3  OUTSIDE      pwiso
d_dpddi1 = d_dpdd3  OUTSIDE      d_dpdd4
d_dpdd   = d_dpdd4  AND          dnw_al
d_dpddv  = d_dpdd4  NOT          dnw_al
d_dpddi  = d_dpddi1 AND          dnw_al
d_dpddiv = d_dpddi1 NOT          dnw_al
p_dpdd2  = (dpdd_1  NOT          d_dpdd3) OUTSIDE ((nedb SIZE BY 2.4) OR ((nedc SIZE BY 3.4) OR (nedd SIZE BY 5.2)))
p_dpdd3  = p_dpdd2  NOT INSIDE   (pdd INTERACT ped_al)
p_dpdd4  = p_dpdd3  OUTSIDE      qnva_all
p_dpdd5  = (p_dpdd4 NOT          qpvh) NOT qpvhascr
p_dpdd   = p_dpdd5  AND          dnw_al
p_dpddv  = p_dpdd5  NOT          dnw_al

p_dpd2   = pd2      OUTSIDE      pede2

ddnw_a1  = ((dnwtrm OUTSIDE      dmos_gat) NOT (ngi_6t OR pgi_5t)) NOT p_bjt
ddnw_a21 = (ddnw_a1 NOT          qnva_dnw) NOT d_dsbw
ddnw_a22 = ddnw_a21 NOT          dza_all
ddnw_a2  = ddnw_a22 NOT          vdnwell
ddnw_6   = ddnw_a2  AND          dnwel60
d_ddnw6  = ddnw_6   INSIDE       diodef
p_ddnw6  = ddnw_6   OUTSIDE      d_ddnw6
ddnw_a3  = ddnw_a2  NOT          ddnw_6
ddnw_2   = ddnw_a3  AND          dnwel25
d_ddnw2  = ddnw_2   INSIDE       diodef
p_ddnw2  = ddnw_2   OUTSIDE      d_ddnw2
ddnw_a4  = ddnw_a3  NOT          ddnw_2
ddnw_1   = ddnw_a4  AND          dnwel15
d_ddnw1  = ddnw_1   INSIDE       diodef
p_ddnw1  = ddnw_1   OUTSIDE      d_ddnw1
ddnw_a5  = ddnw_a4  NOT          ddnw_1
ddnw_nvm = ddnw_a5  AND          dnw_nvm
d_dnwnvm = ddnw_nvm INSIDE       diodef
p_dnwnvm = ddnw_nvm OUTSIDE      d_dnwnvm
ddnw_a6  = ddnw_a5  NOT          ddnw_nvm
ddnw_mv  = (ddnw_a6 AND          dnw_mv) NOT qnvc_dnx
d_ddnwmv = ddnw_mv  INSIDE       diodef
p_ddnwmv = ddnw_mv  OUTSIDE      d_ddnwmv
dvdnw1   = vdnwell  NOT          ((qnvb_vd OR qpvh_vd) OR qpvhasvd)
dvdnw2   = dvdnw1   INTERACT     dpdd_vda
d_dvdnw  = (dvdnw1  INSIDE       diodef) AND (hvscr_vd OR dvdnw2)
p_dvdnw  = dvdnw1   OUTSIDE      d_dvdnw


isowell1 = (isowell NOT INTERACT ned_al) NOT ((hvscr_d6 AND pdd) OR dpdd_d6a)
dpwdmv0  = isowell1 INSIDE       dnw_al3
dpwd     = isowell1 OUTSIDE      dpwdmv0
dpwdmv11 = (dpwdmv0 NOT          ngi_6t) NOT qnvc_pw
dpwdmv1  = dpwdmv11 NOT          dza_all
dpwd1    = (dpwd    NOT          ngi_6t) NOT dza_all
dpwdmv12 = dpwdmv1  INSIDE       dnw_mv
dpwdmv2  = dpwdmv1  OUTSIDE      dpwdmv12
dpswmv   = dpwdmv12 INSIDE       pws
dpwdmv   = dpwdmv12 OUTSIDE      dpswmv
d_dpswmv = dpswmv   INSIDE       diodef
p_dpswmv = dpswmv   OUTSIDE      d_dpswmv
d_dipwmv = dpwdmv   INSIDE       diodef
p_dipwmv = dpwdmv   OUTSIDE      d_dipwmv
dpwdmv3  = dpwdmv2  OUTSIDE      pwiso
dpwdmv4  = dpwdmv2  OUTSIDE      dpwdmv3
d_dpsnvm = dpwdmv3  INSIDE       diodef
p_dpsnvm = dpwdmv3  OUTSIDE      d_dpsnvm
d_dipnvm = dpwdmv4  INSIDE       diodef
p_dipnvm = dpwdmv4  OUTSIDE      d_dipnvm
d_dpwd1  = dpwd1    INSIDE       diodef
p_dpwd1  = dpwd1    OUTSIDE      d_dpwd1
d_dipw1  = d_dpwd1  AND          dnwel15
d_dipw2  = d_dpwd1  AND          dnwel25
d_dipw6  = d_dpwd1  AND          dnwel60
p_dipw1  = p_dpwd1  AND          dnwel15
p_dipw2  = p_dpwd1  AND          dnwel25
p_dipw6  = (p_dpwd1 AND          dnwel60) NOT qpvhasvd


p_ddpb   = dpb      OUTSIDE      qnvb


dnpdd1   = ndif2    AND          pdd
dnpdd2   = dnpdd1   NOT          poly1
dnpdd3   = dnpdd2   NOT          ((pedd1355 OR pedd1363) INSIDE (pedd137 ENCLOSE pedd == 2))
dnpdd4   = dnpdd3   NOT          qpvhascr
d_dnpdd1 = dnpdd4   INSIDE       diodef
d_dnpddm = d_dnpdd1 AND          mv
d_dnpdd  = d_dnpdd1 NOT          mv
dnpdd5   = dnpdd4   NOT          d_dnpdd1
dnpddm   = dnpdd5   AND          mv
dnpdd    = dnpdd5   NOT          mv

dn5ps1   = ndif2    AND          pws
dn5ps2   = dn5ps1   OUTSIDE      poly1
d_dn5ps  = dn5ps2   INSIDE       diodef
p_dn5ps  = dn5ps2   NOT          d_dn5ps


//------------------------------------------------------------
//            Layer Connections
//------------------------------------------------------------

#IFDEF THKMET
CONNECT  ml_vlbl mltrm
#IFDEF MIDMET
CONNECT  mltrm mttrm csf_mt BY viatpl
#ELSE
#IFDEF METAL5
CONNECT  mltrm capmh m5trm csf_m5 BY viatpl
#ELSE
#IFDEF METAL4
CONNECT  mltrm capmh m4trm csf_m4 BY viatpl
#ELSE
#IFDEF METAL3
CONNECT  mltrm capmh m3trm csf_m3 BY viatpl
#ELSE
CONNECT  mltrm capmh m2trm csf_m2 BY viatpl
#ENDIF
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFDEF MIDMET
CONNECT  mt_vlbl mttrm
CONNECT  mt_vlbl csf_mt
#IFDEF METAL5
CONNECT  mttrm csf_mt
CONNECT  mttrm capmh capm capm2b_t capmh2b_t capm3a_t capmh3a_t m5trm csf_m5 BY viatp
CONNECT  csf_mt capmh capm capm2b_t capmh2b_t capm3a_t capmh3a_t m5trm csf_m5 BY viatp
CONNECT  m5trm csf_m5
CONNECT  m5_vlbl m5trm
CONNECT  m5_vlbl csf_m5
CONNECT  m5trm capm45f capmh45f capmh3_t capm3_t capm2a_t capmh2a_t capm2b_b capmh2b_b capm3a_m capmh3a_m m4trm csf_m4 BY via4
CONNECT  csf_m5 capm45f capmh45f capmh3_t capm3_t capm2a_t capmh2a_t capm2b_b capmh2b_b capm3a_m capmh3a_m m4trm csf_m4 BY via4
CONNECT  m4trm csf_m4
CONNECT  m4_vlbl m4trm
CONNECT  m4_vlbl csf_m4
CONNECT  m4trm capm34f capmh34f capmh3_m capm3_m capmh2_t capm2_t capm2a_b capmh2a_b capm3a_b capmh3a_b m3trm csf_m3 BY via3
CONNECT  csf_m4 capm34f capmh34f capmh3_m capm3_m capmh2_t capm2_t capm2a_b capmh2a_b capm3a_b capmh3a_b m3trm csf_m3 BY via3
CONNECT  m3trm csf_m3
CONNECT  m3_vlbl m3trm
CONNECT  m3_vlbl csf_m3
CONNECT  m3trm capm23f capmh23f capmh3_b capm3_b capmh2_b capm2_b m2trm csf_m2 BY via2
CONNECT  csf_m3 capm23f capmh23f capmh3_b capm3_b capmh2_b capm2_b m2trm csf_m2 BY via2
#ELSE
#IFDEF METAL4
CONNECT  mttrm csf_mt
CONNECT  mttrm capmh3_t capm3_t capmh capm capm2a_t capmh2a_t m4trm csf_m4 BY viatp
CONNECT  csf_mt capmh3_t capm3_t capmh capm capm2a_t capmh2a_t m4trm csf_m4 BY viatp
CONNECT  m4trm csf_m4
CONNECT  m4_vlbl m4trm
CONNECT  m4_vlbl csf_m4
CONNECT  m4trm capm34f capmh34f capmh3_m capm3_m capmh2_t capm2_t capm2a_b capmh2a_b m3trm csf_m3 BY via3
CONNECT  csf_m4 capm34f capmh34f capmh3_m capm3_m capmh2_t capm2_t capm2a_b capmh2a_b m3trm csf_m3 BY via3
CONNECT  m3trm csf_m3
CONNECT  m3_vlbl m3trm
CONNECT  m3_vlbl csf_m3
CONNECT  m3trm capm23f capmh23f capmh3_b capm3_b capmh2_b capm2_b m2trm csf_m2 BY via2
CONNECT  csf_m3 capm23f capmh23f capmh3_b capm3_b capmh2_b capm2_b m2trm csf_m2 BY via2
#ELSE
#IFDEF METAL3
CONNECT  mttrm csf_mt
CONNECT  mttrm capmh2_t capm2_t capmh capm m3trm csf_m3 BY viatp
CONNECT  csf_mt capmh2_t capm2_t capmh capm m3trm csf_m3 BY viatp
CONNECT  m3trm csf_m3
CONNECT  m3_vlbl m3trm
CONNECT  m3_vlbl csf_m3
CONNECT  m3trm capm23f capmh23f capmh2_b capm2_b m2trm csf_m2 BY via2
CONNECT  csf_m3 capm23f capmh23f capmh2_b capm2_b m2trm csf_m2 BY via2
#ELSE
CONNECT  mttrm csf_mt
CONNECT  mttrm capmh capm m2trm csf_m2 BY viatp
CONNECT  csf_mt capmh capm m2trm csf_m2 BY viatp
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFNDEF MIDMET
#IFDEF METAL5
CONNECT  m5trm csf_m5
CONNECT  m5_vlbl m5trm
CONNECT  m5_vlbl csf_m5
CONNECT  m5trm capm45f capmh45f capmh3_t capm3_t capm2a_t capmh2a_t m4trm csf_m4 BY via4
CONNECT  csf_m5 capm45f capmh45f capmh3_t capm3_t capm2a_t capmh2a_t m4trm csf_m4 BY via4
CONNECT  m4trm csf_m4
CONNECT  m4_vlbl m4trm
CONNECT  m4_vlbl csf_m4
CONNECT  m4trm capm34f capmh34f capmh3_m capm3_m capmh2_t capm2_t capm2a_b capmh2a_b m3trm csf_m3 BY via3
CONNECT  csf_m4 capm34f capmh34f capmh3_m capm3_m capmh2_t capm2_t capm2a_b capmh2a_b m3trm csf_m3 BY via3
CONNECT  m3trm csf_m3
CONNECT  m3_vlbl m3trm
CONNECT  m3_vlbl csf_m3
CONNECT  m3trm capm23f capmh23f capmh3_b capm3_b capmh2_b capm2_b m2trm csf_m2 BY via2
CONNECT  csf_m3 capm23f capmh23f capmh3_b capm3_b capmh2_b capm2_b m2trm csf_m2 BY via2
#ELSE
#IFDEF METAL4
CONNECT  m4trm csf_m4
CONNECT  m4_vlbl m4trm
CONNECT  m4_vlbl csf_m4
CONNECT  m4trm capm34f capmh34f capmh2_t capm2_t m3trm csf_m3 BY via3
CONNECT  csf_m4 capm34f capmh34f capmh2_t capm2_t m3trm csf_m3 BY via3
CONNECT  m3trm csf_m3
CONNECT  m3_vlbl m3trm
CONNECT  m3_vlbl csf_m3
CONNECT  m3trm capm23f capmh23f capmh2_b capm2_b m2trm csf_m2 BY via2
CONNECT  csf_m3 capm23f capmh23f capmh2_b capm2_b m2trm csf_m2 BY via2
#ELSE
#IFDEF METAL3
CONNECT  m3trm csf_m3
CONNECT  m3_vlbl m3trm
CONNECT  m3_vlbl csf_m3
CONNECT  m3trm capm23f capmh23f m2trm csf_m2 BY via2
CONNECT  csf_m3 capm23f capmh23f m2trm csf_m2 BY via2
#ENDIF
#ENDIF
#ENDIF
#ENDIF


CONNECT  m2trm csf_m2
CONNECT  m2_vlbl m2trm
CONNECT  m2_vlbl csf_m2
CONNECT  m2trm m1trm csf_m1 BY via1
CONNECT  csf_m2 m1trm csf_m1 BY via1
CONNECT  m1trm csf_m1
CONNECT  m1_vlbl m1trm
CONNECT  m1_vlbl csf_m1
CONNECT  m1trm p1trm csf_p1 ndiff pdiff BY cont
CONNECT  csf_m1 p1trm csf_p1 ndiff pdiff BY cont
CONNECT  p1trm csf_p1
CONNECT  p1_vlbl p1trm
CONNECT  p1_vlbl csf_p1
SCONNECT m1trm d_dsdf BY d_dsc
CONNECT  ndiff npdct BY npdtap
CONNECT  pdiff npdct BY npdtap
SCONNECT ndiff nwtrm BY ntap
SCONNECT ndiff dnwtrm BY dntap
SCONNECT ndiff nddtrm BY nddtap
SCONNECT pdiff pwitrm BY pwitap
SCONNECT pdiff bulk BY ptap


LVS SOFTCHK nwtrm CONTACT
LVS SOFTCHK dnwtrm CONTACT
LVS SOFTCHK nddtrm CONTACT
LVS SOFTCHK pwitrm CONTACT
LVS SOFTCHK bulk CONTACT


//------------------------------------------------------------
//       Intentional devices definitions
//------------------------------------------------------------

DEVICE MN(ne)           ne       p1trm(G) ndiff(S) ndiff(D) bulk(B) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn ne
DEVICE MN(nn)           nn       p1trm(G) ndiff(S) ndiff(D) bulk(B) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn nn
DEVICE MP(pe)           pe       p1trm(G) pdiff(S) pdiff(D) nwtrm(B) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pe
DEVICE MN(nel)          nel      p1trm(G) ndiff(S) ndiff(D) bulk(B) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn nel
DEVICE MP(pel)          pel      p1trm(G) pdiff(S) pdiff(D) nwtrm(B) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pel
DEVICE MN(nei)          nei      p1trm(G) ndiff(S) ndiff(D) pwitrm(B) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn nei
DEVICE MP(pei)          pei      p1trm(G) pdiff(S) pdiff(D) dnwtrm(B) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pei
DEVICE MN(neli)         neli     p1trm(G) ndiff(S) ndiff(D) pwitrm(B) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn neli
DEVICE MP(peli)         peli     p1trm(G) pdiff(S) pdiff(D) dnwtrm(B) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp peli

LVS DEVICE TYPE PMOS PE_5
LVS DEVICE TYPE PMOS PEI_A_5
LVS DEVICE TYPE PMOS PEI_B_5
LVS DEVICE TYPE PMOS PEI_D_5
LVS DEVICE TYPE PMOS PEI_M_5
LVS DEVICE TYPE PMOS PEI_N_5
LVS DEVICE TYPE PMOS PEL_5
LVS DEVICE TYPE PMOS PELI_A_5
LVS DEVICE TYPE PMOS PELI_B_5
LVS DEVICE TYPE PMOS PELI_D_5
LVS DEVICE TYPE PMOS PELI_M_5
LVS DEVICE TYPE PMOS PELI_N_5
DEVICE PE_5             pe_5     pdiff(D) p1trm(G) pdiff(S) nwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pe_5
DEVICE PEI_A_5          pei_a_5  pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pei_a_5
DEVICE PEI_B_5          pei_b_5  pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pei_b_5
DEVICE PEI_D_5          pei_d_5  pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pei_d_5
DEVICE PEI_M_5          pei_m_5  pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pei_m_5
DEVICE PEI_N_5          pei_n_5  pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pei_n_5
DEVICE PEL_5            pel_5    pdiff(D) p1trm(G) pdiff(S) nwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp pel_5
DEVICE PELI_A_5         peli_a_5 pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp peli_a_5
DEVICE PELI_B_5         peli_b_5 pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp peli_b_5
DEVICE PELI_D_5         peli_d_5 pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp peli_d_5
DEVICE PELI_M_5         peli_m_5 pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp peli_m_5
DEVICE PELI_N_5         peli_n_5 pdiff(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                          NETLIST ELEMENT XM CMACRO getParaMp peli_n_5

LVS DEVICE TYPE NMOS NEI_A_6
LVS DEVICE TYPE NMOS NEI_B_6
LVS DEVICE TYPE NMOS NEI_D_6
LVS DEVICE TYPE NMOS NEI_M_6
LVS DEVICE TYPE NMOS NEI_N_6
DEVICE NEI_A_6          nei_a_6  ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn nei_a_6
DEVICE NEI_B_6          nei_b_6  ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn nei_b_6
DEVICE NEI_D_6          nei_d_6  ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn nei_d_6
DEVICE NEI_M_6          nei_m_6  ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn nei_m_6
DEVICE NEI_N_6          nei_n_6  ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn nei_n_6

LVS DEVICE TYPE NMOS NELI_A_6
LVS DEVICE TYPE NMOS NELI_B_6
LVS DEVICE TYPE NMOS NELI_D_6
LVS DEVICE TYPE NMOS NELI_M_6
LVS DEVICE TYPE NMOS NELI_N_6
DEVICE NELI_A_6         neli_a_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn neli_a_6
DEVICE NELI_B_6         neli_b_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn neli_b_6
DEVICE NELI_D_6         neli_d_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn neli_d_6
DEVICE NELI_M_6         neli_m_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn neli_m_6
DEVICE NELI_N_6         neli_n_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaMn neli_n_6

DEVICE MN(nmma)         nmma_d   p1trm(G) nddtrm(S) nddtrm(D) bulk(B)
                          NETLIST MODEL nmma NETLIST ELEMENT XM CMACRO getParaMHn nmma_d
DEVICE MN(nmmb)         nmmb_d   p1trm(G) nddtrm(S) nddtrm(D) bulk(B)
                          NETLIST MODEL nmmb NETLIST ELEMENT XM CMACRO getParaMHn nmmb_d
DEVICE MN(nmmc)         nmmc_d   p1trm(G) nddtrm(S) nddtrm(D) bulk(B)
                          NETLIST MODEL nmmc NETLIST ELEMENT XM CMACRO getParaMHn nmmc_d
DEVICE MN(nmma_bjt)     nmma_b   p1trm(G) nddtrm(S) nddtrm(D) bulk(B) <n_bjtx>
                          NETLIST MODEL nmma_bjt NETLIST ELEMENT XM CMACRO getParaMHn1 nmma_b
DEVICE MN(nmmb_bjt)     nmmb_b   p1trm(G) nddtrm(S) nddtrm(D) bulk(B) <n_bjtx>
                          NETLIST MODEL nmmb_bjt NETLIST ELEMENT XM CMACRO getParaMHn1 nmmb_b
DEVICE MN(nmmc_bjt)     nmmc_b   p1trm(G) nddtrm(S) nddtrm(D) bulk(B) <n_bjtx>
                          NETLIST MODEL nmmc_bjt NETLIST ELEMENT XM CMACRO getParaMHn1 nmmc_b
DEVICE MP(pmma)         pmma_d   p1trm(G) pwitrm(S) pwitrm(D) dnwtrm(B)
                          NETLIST MODEL pmma NETLIST ELEMENT XM CMACRO getParaMHp1 pmma_d
DEVICE MP(pmmb)         pmmb_d   p1trm(G) pwitrm(S) pwitrm(D) dnwtrm(B)
                          NETLIST MODEL pmmb NETLIST ELEMENT XM CMACRO getParaMHp1 pmmb_d
DEVICE MP(pmmc)         pmmc_d   p1trm(G) pwitrm(S) pwitrm(D) dnwtrm(B)
                          NETLIST MODEL pmmc NETLIST ELEMENT XM CMACRO getParaMHp1 pmmc_d
LVS DEVICE TYPE PMOS PMMA_BJT
LVS DEVICE TYPE PMOS PMMB_BJT
LVS DEVICE TYPE PMOS PMMC_BJT
DEVICE PMMA_BJT         pmma_b   pwitrm(D) p1trm(G) pwitrm(S) dnwtrm(B) bulk(SB) <p_bjtx>
                          NETLIST MODEL pmma_bjt NETLIST ELEMENT XM CMACRO getParaMHp2 pmma_b
DEVICE PMMB_BJT         pmmb_b   pwitrm(D) p1trm(G) pwitrm(S) dnwtrm(B) bulk(SB) <p_bjtx>
                          NETLIST MODEL pmmb_bjt NETLIST ELEMENT XM CMACRO getParaMHp2 pmmb_b
DEVICE PMMC_BJT         pmmc_b   pwitrm(D) p1trm(G) pwitrm(S) dnwtrm(B) bulk(SB) <p_bjtx>
                          NETLIST MODEL pmmc_bjt NETLIST ELEMENT XM CMACRO getParaMHp2 pmmc_b

DEVICE LDDN(nmb)        nmb_d    nddtrm(D) p1trm(G) ndiff(S) bulk(B) <ndif2>
                          NETLIST MODEL nmb NETLIST ELEMENT XM CMACRO getParaLHn2 nmb_d
DEVICE LDDN(nmb_bjt)    nmb_b    nddtrm(D) p1trm(G) ndiff(S) bulk(B) <ndif2> <n_bjtx>
                          NETLIST MODEL nmb_bjt NETLIST ELEMENT XM CMACRO getParaLHn3 nmb_b
DEVICE LDDN(nmc)        nmc_d    nddtrm(D) p1trm(G) ndiff(S) bulk(B) <ndif2>
                          NETLIST MODEL nmc NETLIST ELEMENT XM CMACRO getParaLHn2 nmc_d
DEVICE LDDN(nmc_bjt)    nmc_b    nddtrm(D) p1trm(G) ndiff(S) bulk(B) <ndif2> <n_bjtx>
                          NETLIST MODEL nmc_bjt NETLIST ELEMENT XM CMACRO getParaLHn3 nmc_b

LVS DEVICE TYPE LDDPMOS PMB_BJT
LVS DEVICE TYPE LDDPMOS PMC_BJT
DEVICE LDDP(pmb)        pmb_d    pwitrm(D) p1trm(G) pdiff(S) dnwtrm(B) <pdif2>
                          NETLIST MODEL pmb NETLIST ELEMENT XM CMACRO getParaLHp2 pmb_d
DEVICE PMB_BJT          pmb_b    pwitrm(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2> <p_bjtx>
                          NETLIST MODEL pmb_bjt NETLIST ELEMENT XM CMACRO getParaLHp3 pmb_b
DEVICE LDDP(pmc)        pmc_d    pwitrm(D) p1trm(G) pdiff(S) dnwtrm(B) <pdif2>
                          NETLIST MODEL pmc NETLIST ELEMENT XM CMACRO getParaLHp2 pmc_d
DEVICE PMC_BJT          pmc_b    pwitrm(D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2> <p_bjtx>
                          NETLIST MODEL pmc_bjt NETLIST ELEMENT XM CMACRO getParaLHp3 pmc_b


DEVICE LDDN(nham)       nham     nwtrm(D) p1trm(G) ndiff(S) bulk(B) <ndif2>
                          NETLIST ELEMENT XM CMACRO getParaLHn1 nham

DEVICE LDDN(neda)       neda2_d  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL neda NETLIST ELEMENT XM CMACRO getParaLHDn neda2_d
DEVICE LDDN(nedb)       nedb2_d  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL nedb NETLIST ELEMENT XM CMACRO getParaLHDn nedb2_d
DEVICE LDDN(nedc)       nedc2_d  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL nedc NETLIST ELEMENT XM CMACRO getParaLHDn nedc2_d
DEVICE LDDN(nedd)       nedd2_d  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL nedd NETLIST ELEMENT XM CMACRO getParaLHDn nedd2_d
DEVICE LDDN(nede)       nede2_d  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL nede NETLIST ELEMENT XM CMACRO getParaLHDn nede2_d

DEVICE LDDN(neda_bjt)   neda2_b  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL neda_bjt NETLIST ELEMENT XM CMACRO getParaLHDn neda2_b
DEVICE LDDN(nedb_bjt)   nedb2_b  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL nedb_bjt NETLIST ELEMENT XM CMACRO getParaLHDn nedb2_b
DEVICE LDDN(nedc_bjt)   nedc2_b  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL nedc_bjt NETLIST ELEMENT XM CMACRO getParaLHDn nedc2_b
DEVICE LDDN(nedd_bjt)   nedd2_b  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL nedd_bjt NETLIST ELEMENT XM CMACRO getParaLHDn nedd2_b
DEVICE LDDN(nede_bjt)   nede2_b  dnwtrm(D) p1trm(G) ndiff(S) bulk(B) <ned_al> <dmos_dnx>
                          NETLIST MODEL nede_bjt NETLIST ELEMENT XM CMACRO getParaLHDn nede2_b

DEVICE LDDP(peda)       peda2_d  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL peda NETLIST ELEMENT XM CMACRO getParaLHDp peda2_d
DEVICE LDDP(pedb)       pedb2_d  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL pedb NETLIST ELEMENT XM CMACRO getParaLHDp pedb2_d
DEVICE LDDP(pedc)       pedc2_d  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL pedc NETLIST ELEMENT XM CMACRO getParaLHDp pedc2_d
DEVICE LDDP(pedd)       pedd2_d  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL pedd NETLIST ELEMENT XM CMACRO getParaLHDp pedd2_d
DEVICE LDDP(pede)       pede2_d  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL pede NETLIST ELEMENT XM CMACRO getParaLHDp pede2_d

DEVICE LDDP(peda_bjt)   peda2_b  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL peda_bjt NETLIST ELEMENT XM CMACRO getParaLHDp peda2_b
DEVICE LDDP(pedb_bjt)   pedb2_b  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL pedb_bjt NETLIST ELEMENT XM CMACRO getParaLHDp pedb2_b
DEVICE LDDP(pedc_bjt)   pedc2_b  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL pedc_bjt NETLIST ELEMENT XM CMACRO getParaLHDp pedc2_b
DEVICE LDDP(pedd_bjt)   pedd2_b  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL pedd_bjt NETLIST ELEMENT XM CMACRO getParaLHDp pedd2_b
DEVICE LDDP(pede_bjt)   pede2_b  pwitrm(D) p1trm(G) pdiff(S) bulk(B) <ped_al> <dnwtrm> <dmos_dnx> <dmos_pwx>
                          NETLIST MODEL pede_bjt NETLIST ELEMENT XM CMACRO getParaLHDp pede2_b


DEVICE Q(qpva)      qpva     bulk(C) nwtrm(B) pdiff(E) 
                      NETLIST ELEMENT XQ
DEVICE Q(qpvb)      qpvb     bulk(C) nwtrm(B) pdiff(E) 
                      NETLIST ELEMENT XQ
DEVICE Q(qpvc)      qpvc     bulk(C) nwtrm(B) pdiff(E) 
                      NETLIST ELEMENT XQ

DEVICE Q(qpvh)      qpvh     bulk(C) dnwtrm(B) pwitrm(E)
                      NETLIST ELEMENT XQ CMACRO getParaQpvh qpvh

DEVICE Q(qpvhascr)  qpvhascr bulk(C) dnwtrm(B) pwitrm(E)
                      NETLIST ELEMENT XQ CMACRO getParaQpvhascr qpvhascr

DEVICE Q(qnva)      qnva     dnwtrm(C) pwitrm(B) ndiff(E) bulk(S)
                      NETLIST ELEMENT XQ CMACRO getParaQnva qnva
DEVICE Q(qnva5)     qnva5    dnwtrm(C) pwitrm(B) ndiff(E) bulk(S)
                      NETLIST ELEMENT XQ CMACRO getParaQnva qnva5
DEVICE Q(qnvb)      qnvb     dnwtrm(C) pwitrm(B) nddtrm(E) bulk(S)
                      NETLIST ELEMENT XQ CMACRO getParaQnvb qnvb
DEVICE Q(qnvc)      qnvc     dnwtrm(C) pwitrm(B) ndiff(E) bulk(S)
                      NETLIST ELEMENT XQ CMACRO getParaQnvc qnvc
DEVICE Q(qnvcra)    qnvcra   dnwtrm(C) pwitrm(B) ndiff(E) bulk(S)
                      NETLIST ELEMENT XQ
DEVICE Q(qnvcrb)    qnvcrb   dnwtrm(C) pwitrm(B) ndiff(E) bulk(S)
                      NETLIST ELEMENT XQ


DEVICE MN(nn5)      nnm      p1trm(G) ndiff(S) ndiff(D) bulk(B) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn nnm
DEVICE MN(ne5)      nem      p1trm(G) ndiff(S) ndiff(D) bulk(B) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn nem
DEVICE MN(nd5)      ndm      p1trm(G) ndiff(S) ndiff(D) bulk(B) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn ndm
DEVICE MP(pe5)      pem      p1trm(G) pdiff(S) pdiff(D) nwtrm(B) <pdif2>
                      NETLIST ELEMENT XM CMACRO getParaMp pem
DEVICE MN(ne5i)     nemi     p1trm(G) ndiff(S) ndiff(D) pwitrm(B) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn nemi
DEVICE MN(ne5m)     ne5m     p1trm(G) ndiff(S) ndiff(D) pwitrm(B) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn ne5m
DEVICE MN(nd5i)     ndmi     p1trm(G) ndiff(S) ndiff(D) pwitrm(B) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn ndmi
DEVICE MN(nds5i)    ndsmiP   p1trm(G) ndiff(S) ndiff(D) pwitrm(B) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMndsiP ndsmiP
DEVICE MN(nds5i)    ndsmiE   p1trm(G) ndiff(S) ndiff(D) pwitrm(B) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMndsiE ndsmiE
DEVICE MP(pe5i)     pemi     p1trm(G) pdiff(S) pdiff(D) dnwtrm(B) <pdif2>
                      NETLIST ELEMENT XM CMACRO getParaMp pemi

LVS DEVICE TYPE PMOS PE5_5
LVS DEVICE TYPE PMOS PE5I_A_5
LVS DEVICE TYPE PMOS PE5I_B_5
LVS DEVICE TYPE PMOS PE5I_D_5
LVS DEVICE TYPE PMOS PE5I_M_5
LVS DEVICE TYPE PMOS PE5I_N_5
DEVICE PE5_5        pem_5    pdiff (D) p1trm(G) pdiff(S) nwtrm(B) bulk(SB) <pdif2>
                      NETLIST ELEMENT XM CMACRO getParaMp pem_5
DEVICE PE5I_A_5     pemi_a_5 pdiff (D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                      NETLIST ELEMENT XM CMACRO getParaMp pemi_a_5
DEVICE PE5I_B_5     pemi_b_5 pdiff (D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                      NETLIST ELEMENT XM CMACRO getParaMp pemi_b_5
DEVICE PE5I_D_5     pemi_d_5 pdiff (D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                      NETLIST ELEMENT XM CMACRO getParaMp pemi_d_5
DEVICE PE5I_M_5     pemi_m_5 pdiff (D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                      NETLIST ELEMENT XM CMACRO getParaMp pemi_m_5
DEVICE PE5I_N_5     pemi_n_5 pdiff (D) p1trm(G) pdiff(S) dnwtrm(B) bulk(SB) <pdif2>
                      NETLIST ELEMENT XM CMACRO getParaMp pemi_n_5

LVS DEVICE TYPE NMOS NE5I_A_6
LVS DEVICE TYPE NMOS NE5I_B_6
LVS DEVICE TYPE NMOS NE5I_D_6
LVS DEVICE TYPE NMOS NE5I_M_6
LVS DEVICE TYPE NMOS NE5I_N_6
DEVICE NE5I_A_6     nemi_a_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn nemi_a_6
DEVICE NE5I_B_6     nemi_b_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn nemi_b_6
DEVICE NE5I_D_6     nemi_d_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn nemi_d_6
DEVICE NE5I_M_6     nemi_m_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn nemi_m_6
DEVICE NE5I_N_6     nemi_n_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn nemi_n_6
LVS DEVICE TYPE NMOS ND5I_A_6
LVS DEVICE TYPE NMOS ND5I_B_6
LVS DEVICE TYPE NMOS ND5I_D_6
LVS DEVICE TYPE NMOS ND5I_M_6
LVS DEVICE TYPE NMOS ND5I_N_6
DEVICE ND5I_A_6     ndmi_a_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn ndmi_a_6
DEVICE ND5I_B_6     ndmi_b_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn ndmi_b_6
DEVICE ND5I_D_6     ndmi_d_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn ndmi_d_6
DEVICE ND5I_M_6     ndmi_m_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn ndmi_m_6
DEVICE ND5I_N_6     ndmi_n_6 ndiff(D) p1trm(G) ndiff(S) pwitrm(B) dnwtrm(NW) bulk(SB) <ndif2>
                      NETLIST ELEMENT XM CMACRO getParaMn ndmi_n_6

DEVICE MOSVC        mosvc p1trm(G) nwtrm(NW) bulk(SB) <ndif>
                      NETLIST MODEL mosvc NETLIST ELEMENT XM CMACRO getParaMvc mosvc
DEVICE MOSVCI_A     mosvci_a p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvci_a NETLIST ELEMENT XM CMACRO getParaMvci mosvci_a
DEVICE MOSVCI_B     mosvci_b p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvci_b NETLIST ELEMENT XM CMACRO getParaMvci mosvci_b
DEVICE MOSVCI_D     mosvci_d p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvci_d NETLIST ELEMENT XM CMACRO getParaMvci mosvci_d
DEVICE MOSVCI_M     mosvci_m p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvci_m NETLIST ELEMENT XM CMACRO getParaMvci mosvci_m
DEVICE MOSVCI_N     mosvci_n p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvci_n NETLIST ELEMENT XM CMACRO getParaMvci mosvci_n

DEVICE MOSVC5       mosvcm p1trm(G) nwtrm(NW) bulk(SB) <ndif>
                      NETLIST MODEL mosvc5 NETLIST ELEMENT XM CMACRO getParaMvc mosvcm
DEVICE MOSVC5I_A    mosvcim_a p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvc5i_a NETLIST ELEMENT XM CMACRO getParaMvci mosvcim_a
DEVICE MOSVC5I_B    mosvcim_b p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvc5i_b NETLIST ELEMENT XM CMACRO getParaMvci mosvcim_b
DEVICE MOSVC5I_D    mosvcim_d p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvc5i_d NETLIST ELEMENT XM CMACRO getParaMvci mosvcim_d
DEVICE MOSVC5I_M    mosvcim_m p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvc5i_m NETLIST ELEMENT XM CMACRO getParaMvci mosvcim_m
DEVICE MOSVC5I_N    mosvcim_n p1trm(G) pwitrm(PW) dnwtrm(DNW) bulk(SB) <pdif>
                      NETLIST MODEL mosvc5i_n NETLIST ELEMENT XM CMACRO getParaMvci mosvcim_n

DEVICE Q(qpva5)     qpvma    bulk(C) nwtrm(B) pdiff(E) 
                      NETLIST ELEMENT XQ
DEVICE Q(qpvb5)     qpvmb    bulk(C) nwtrm(B) pdiff(E) 
                      NETLIST ELEMENT XQ
DEVICE Q(qpvc5)     qpvmc    bulk(C) nwtrm(B) pdiff(E) 
                      NETLIST ELEMENT XQ


DEVICE R(rnw)       rnw      nwtrm    nwtrm    bulk 
                      NETLIST ELEMENT XR  CMACRO getWLRes rnw
DEVICE R(rnw_scr)   rnw_scr  nwtrm    nwtrm    bulk
                      NETLIST ELEMENT XR  CMACRO getWLRes rnw_scr
DEVICE R(rdnwmv)    rdnwmv   dnwtrm   dnwtrm   bulk 
                      NETLIST ELEMENT XR  CMACRO getWLRes rdnwmv

DEVICE R(rdn)       rdn      ndiff    ndiff    bulk
                      NETLIST ELEMENT XR CMACRO getWLRes rdn
DEVICE R(rdn)       rdn_g    ndiff    ndiff    bulk   <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdn_g
DEVICE R(rdn)       rdni     ndiff    ndiff    pwitrm
                      NETLIST ELEMENT XR CMACRO getWLRes rdni
DEVICE R(rdn)       rdn_gi   ndiff    ndiff    pwitrm <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdn_gi

DEVICE R(rdp)       rdp      pdiff    pdiff    nwtrm 
                      NETLIST ELEMENT XR CMACRO getWLRes rdp
DEVICE R(rdp)       rdp_g    pdiff    pdiff    nwtrm  <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdp_g
DEVICE R(rdp)       rdpi     pdiff    pdiff    dnwtrm 
                      NETLIST ELEMENT XR CMACRO getWLRes rdpi
DEVICE R(rdp)       rdp_gi   pdiff    pdiff    dnwtrm  <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdp_gi

DEVICE R(s_res)     s_res    bulk     bulk
                      NETLIST ELEMENT XR CMACRO getVRes5 s_res


DEVICE D(dn)        d_dn    bulk    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dn
DEVICE D(dn)        d_dni   pwitrm  ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dni

#IFNDEF ParaDioAsDevDio
DEVICE D(p_dn)      p_dn    bulk    ndiff <diff>
                      NETLIST MODEL dn NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dn
DEVICE D(p_dn)      p_dni   pwitrm  ndiff <diff>
                      NETLIST MODEL dn NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dni
LVS FILTER D(p_dn)  OPEN
#ELSE
DEVICE D(dn)        p_dn    bulk    ndiff <diff>
                      NETLIST MODEL dn NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dn
DEVICE D(dn)        p_dni   pwitrm  ndiff <diff>
                      NETLIST MODEL dn NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dni
#ENDIF
DEVICE D(dn)        d_dnpdd pwitrm  ndiff <diff>
                      NETLIST MODEL dn NETLIST ELEMENT XD_ CMACRO getAreaPeriDf d_dnpdd
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dn)      dnpdd   pwitrm  ndiff <diff>
                      NETLIST MODEL dn NETLIST ELEMENT XD_ CMACRO getAreaPeriDf dnpdd
#ELSE
DEVICE D(dn)        dnpdd   pwitrm  ndiff <diff>
                      NETLIST MODEL dn NETLIST ELEMENT XD_ CMACRO getAreaPeriDf dnpdd
#ENDIF

DEVICE D(dnn)       d_dnn   bulk    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dnn
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dnn)     p_dnn   bulk    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf p_dnn
LVS FILTER D(p_dnn)  OPEN
#ELSE
DEVICE D(dnn)       p_dnn   bulk    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf p_dnn
#ENDIF

DEVICE D(dn5ps)     d_dn5ps pwitrm    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dn5ps
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dn5ps)   p_dn5ps pwitrm    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf p_dn5ps
LVS FILTER D(p_dn5ps)  OPEN
#ELSE
DEVICE D(dn5ps)     p_dn5ps pwitrm    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf p_dn5ps
#ENDIF

DEVICE DZA_A        dza_a   pwitrm(A) ndiff(C) dnwtrm(NW) bulk(SB)  <diff>
                      NETLIST MODEL dza_a NETLIST ELEMENT XD CMACRO getAreaPeriDz dza_a
DEVICE DZA_B        dza_b   pwitrm(A) ndiff(C) dnwtrm(NW) bulk(SB)  <diff>
                      NETLIST MODEL dza_b NETLIST ELEMENT XD CMACRO getAreaPeriDz dza_b
DEVICE DZA_D        dza_d   pwitrm(A) ndiff(C) dnwtrm(NW) bulk(SB)  <diff>
                      NETLIST MODEL dza_d NETLIST ELEMENT XD CMACRO getAreaPeriDz dza_d
DEVICE DZA_M        dza_m   pwitrm(A) ndiff(C) dnwtrm(NW) bulk(SB)  <diff>
                      NETLIST MODEL dza_m NETLIST ELEMENT XD CMACRO getAreaPeriDz dza_m

DEVICE D(dp)        d_dp    pdiff   nwtrm <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dp
DEVICE D(dp)        d_dpi   pdiff   dnwtrm <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dpi
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dp)      p_dp    pdiff   nwtrm <diff>
                      NETLIST MODEL dp NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dp
DEVICE D(p_dp)      p_dpi   pdiff   dnwtrm <diff>
                      NETLIST MODEL dp NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpi
LVS FILTER D(p_dp)  OPEN
#ELSE
DEVICE D(dp)        p_dp    pdiff   nwtrm <diff>
                      NETLIST MODEL dp NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dp
DEVICE D(dp)        p_dpi   pdiff   dnwtrm <diff>
                      NETLIST MODEL dp NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpi
#ENDIF

DEVICE D(dnw)       d_dnw   bulk    nwtrm <anwell>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_dnw
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dnw)     p_dnw   bulk    nwtrm <anwell>
                      NETLIST MODEL dnw NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dnw
LVS FILTER D(p_dnw) OPEN
#ELSE
DEVICE D(dnw)       p_dnw   bulk    nwtrm <anwell>
                      NETLIST MODEL dnw NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dnw
#ENDIF

DEVICE D(dnp)       dnp     bulk    ndiff
                      NETLIST ELEMENT XD CMACRO getAreaPeri dnp
DEVICE D(dpp)       dpp     pdiff   dnwtrm
                      NETLIST ELEMENT XD CMACRO getAreaPeri dpp

DEVICE D(p_dndd)    p_dndd  bulk    nddtrm
                      NETLIST MODEL dndd NETLIST ELEMENT XD_ CMACRO getAreaPeri p_dndd
LVS FILTER D(p_dndd) OPEN
DEVICE D(p_dndddpb) p_dnddi pwitrm  nddtrm
                      NETLIST MODEL dndddpb NETLIST ELEMENT XD_ CMACRO getAreaPeri p_dnddi
LVS FILTER D(p_dndddpb) OPEN
#IFDEF ParaDioAsDevDio
ERC SELECT CHECK Q:p_dndd Q:p_dndddpb
Q:p_dndd {@Check for the right usage of the device p_dndd
  copy p_dndd
}
Q:p_dndddpb {@Check for the right usage of the device p_dndddpb
  copy p_dnddi
}
#ENDIF

DEVICE D(dpdddnw_esd) d_dpdd  pwitrm  dnwtrm
                        NETLIST MODEL dpdddnw_esd NETLIST ELEMENT XD CMACRO getAreaPeri d_dpdd
DEVICE D(dpddipdnw_esd) d_dpddi pwitrm  dnwtrm
                          NETLIST MODEL dpddipdnw_esd NETLIST ELEMENT XD CMACRO getAreaPeri d_dpddi
DEVICE D(dpddvdnw_esd) d_dpddv pwitrm  dnwtrm
                         NETLIST MODEL dpddvdnw_esd NETLIST ELEMENT XD CMACRO getAreaPeri d_dpddv
DEVICE D(dpddipvdnw_esd) d_dpddiv pwitrm  dnwtrm
                           NETLIST MODEL dpddipvdnw_esd NETLIST ELEMENT XD CMACRO getAreaPeri d_dpddiv
DEVICE D(p_dpdddnw) p_dpdd  pwitrm  dnwtrm
                      NETLIST MODEL dpdddnw NETLIST ELEMENT XD_ CMACRO getAreaPeri p_dpdd
LVS FILTER D(p_dpdddnw) OPEN
#IFDEF ParaDioAsDevDio
ERC SELECT CHECK Q:p_dpdddnw
Q:p_dpdddnw {@Check for the right usage of the device p_dpdddnw
  copy p_dpdd
}
#ENDIF
DEVICE D(p_dpddvdnw) p_dpddv  pwitrm  dnwtrm
                       NETLIST MODEL dpddvdnw NETLIST ELEMENT XD_ CMACRO getAreaPeri p_dpddv
LVS FILTER D(p_dpddvdnw) OPEN
#IFDEF ParaDioAsDevDio
ERC SELECT CHECK Q:p_dpddvdnw
Q:p_dpddvdnw {@Check for the right usage of the device p_dpddvdnw
  copy p_dpddv
}
#ENDIF
DEVICE D(p_dpd2dnw) p_dpd2  pwitrm  dnwtrm
                      NETLIST MODEL dpd2dnw NETLIST ELEMENT XD_ CMACRO getAreaPeri p_dpd2
LVS FILTER D(p_dpd2dnw) OPEN
#IFDEF ParaDioAsDevDio
ERC SELECT CHECK Q:p_dpd2dnw
Q:p_dpd2dnw {@Check for the right usage of the device p_dpd2dnw
  copy p_dpd2
}
#ENDIF

DEVICE D(ddnw15)    d_ddnw1 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw15 NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_ddnw1
#IFNDEF ParaDioAsDevDio
DEVICE D(p_ddnw15)  p_ddnw1 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw15 NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_ddnw1
LVS FILTER D(p_ddnw15) OPEN
#ELSE
DEVICE D(ddnw15)    p_ddnw1 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw15 NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_ddnw1
#ENDIF
DEVICE D(ddnw25)    d_ddnw2 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw25 NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_ddnw2
#IFNDEF ParaDioAsDevDio
DEVICE D(p_ddnw25)  p_ddnw2 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw25 NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_ddnw2
LVS FILTER D(p_ddnw25) OPEN
#ELSE
DEVICE D(ddnw25)    p_ddnw2 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw25 NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_ddnw2
#ENDIF
DEVICE D(ddnw60)    d_ddnw6 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw60 NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_ddnw6
#IFNDEF ParaDioAsDevDio
DEVICE D(p_ddnw60)  p_ddnw6 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw60 NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_ddnw6
LVS FILTER D(p_ddnw60) OPEN
#ELSE
DEVICE D(ddnw60)    p_ddnw6 bulk    dnwtrm <anwell>
                      NETLIST MODEL ddnw60 NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_ddnw6
#ENDIF
DEVICE D(dvdnw_esd) d_dvdnw  bulk    dnwtrm <anwell>
                      NETLIST MODEL dvdnw_esd NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_dvdnw
DEVICE D(p_dvdnw)   p_dvdnw  bulk   dnwtrm <anwell>
                      NETLIST MODEL dvdnw NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dvdnw
LVS FILTER D(p_dvdnw) OPEN
#IFDEF ParaDioAsDevDio
ERC SELECT CHECK Q:p_dvdnw
Q:p_dvdnw {@Check for the right usage of the device p_dvdnw
  copy p_dvdnw
}
#ENDIF
DEVICE D(ddnwmv)    d_ddnwmv  bulk  dnwtrm <anwell>
                      NETLIST MODEL ddnwmv NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_ddnwmv
#IFNDEF ParaDioAsDevDio
DEVICE D(p_ddnwmv)  p_ddnwmv  bulk  dnwtrm <anwell>
                      NETLIST MODEL ddnwmv NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_ddnwmv
LVS FILTER D(p_ddnwmv) OPEN
#ELSE
DEVICE D(ddnwmv)    p_ddnwmv  bulk  dnwtrm <anwell>
                      NETLIST MODEL ddnwmv NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_ddnwmv
#ENDIF
DEVICE D(ddnwnvm)   d_dnwnvm  bulk  dnwtrm <anwell>
                      NETLIST MODEL ddnwnvm NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_dnwnvm
#IFNDEF ParaDioAsDevDio
DEVICE D(p_ddnwnvm) p_dnwnvm  bulk  dnwtrm <anwell>
                      NETLIST MODEL ddnwnvm NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dnwnvm
LVS FILTER D(p_ddnwnvm) OPEN
#ELSE
DEVICE D(ddnwnvm)   p_dnwnvm  bulk  dnwtrm <anwell>
                      NETLIST MODEL ddnwnvm NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dnwnvm
#ENDIF

DEVICE D(dipdnwmv)  d_dipwmv  pwitrm  dnwtrm
                      NETLIST MODEL dipdnwmv NETLIST ELEMENT XD CMACRO getAreaPeriDpw d_dipwmv
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dipdnwmv) p_dipwmv  pwitrm  dnwtrm
                      NETLIST MODEL dipdnwmv NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipwmv
LVS FILTER D(p_dipdnwmv) OPEN
#ELSE
DEVICE D(dipdnwmv)   p_dipwmv  pwitrm  dnwtrm
                      NETLIST MODEL dipdnwmv NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipwmv
#ENDIF
DEVICE D(dipdnwnvm)  d_dipnvm  pwitrm  dnwtrm
                      NETLIST MODEL dipdnwnvm NETLIST ELEMENT XD CMACRO getAreaPeriDpw d_dipnvm
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dipdnwnvm) p_dipnvm  pwitrm  dnwtrm
                      NETLIST MODEL dipdnwnvm NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipnvm
LVS FILTER D(p_dipdnwnvm) OPEN
#ELSE
DEVICE D(dipdnwnvm)   p_dipnvm  pwitrm  dnwtrm
                      NETLIST MODEL dipdnwnvm NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipnvm
#ENDIF
DEVICE D(dpsdnwnvm)  d_dpsnvm  pwitrm  dnwtrm
                      NETLIST MODEL dpsdnwnvm NETLIST ELEMENT XD CMACRO getAreaPeriDpw d_dpsnvm
DEVICE D(dpsdnwmv)   d_dpswmv  pwitrm  dnwtrm
                      NETLIST MODEL dpsdnwmv NETLIST ELEMENT XD CMACRO getAreaPeriDpw d_dpswmv
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dpsdnwnvm) p_dpsnvm  pwitrm  dnwtrm
                      NETLIST MODEL dpsdnwnvm NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dpsnvm
DEVICE D(p_dpsdnwmv) p_dpswmv  pwitrm  dnwtrm
                      NETLIST MODEL dpsdnwmv NETLIST ELEMENT XD CMACRO getAreaPeriDpw p_dpswmv
LVS FILTER D(p_dpsdnwmv) OPEN
LVS FILTER D(p_dpsdnwnvm) OPEN
#ELSE
DEVICE D(dpsdnwnvm)  p_dpsnvm  pwitrm  dnwtrm
                      NETLIST MODEL dpsdnwnvm NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dpsnvm
DEVICE D(dpsdnwmv)   p_dpswmv  pwitrm  dnwtrm
                      NETLIST MODEL dpsdnwmv NETLIST ELEMENT XD CMACRO getAreaPeriDpw p_dpswmv
#ENDIF
DEVICE D(dipdnw15)  d_dipw1   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw15 NETLIST ELEMENT XD CMACRO getAreaPeriDpw d_dipw1
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dipdnw15) p_dipw1   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw15 NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipw1
LVS FILTER D(p_dipdnw15) OPEN
#ELSE
DEVICE D(dipdnw15)   p_dipw1   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw15 NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipw1
#ENDIF
DEVICE D(dipdnw25)  d_dipw2   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw25 NETLIST ELEMENT XD CMACRO getAreaPeriDpw d_dipw2
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dipdnw25) p_dipw2   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw25 NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipw2
LVS FILTER D(p_dipdnw25) OPEN
#ELSE
DEVICE D(dipdnw25)   p_dipw2   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw25 NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipw2
#ENDIF
DEVICE D(dipdnw60)  d_dipw6   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw60 NETLIST ELEMENT XD CMACRO getAreaPeriDpw d_dipw6
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dipdnw60) p_dipw6   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw60 NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipw6
LVS FILTER D(p_dipdnw60) OPEN
#ELSE
DEVICE D(dipdnw60)   p_dipw6   pwitrm  dnwtrm
                      NETLIST MODEL dipdnw60 NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_dipw6
#ENDIF

DEVICE D(p_ddpbvdnw) p_ddpb    pwitrm  dnwtrm
                      NETLIST MODEL ddpbvdnw NETLIST ELEMENT XD_ CMACRO getAreaPeriDpw p_ddpb
LVS FILTER D(p_ddpbvdnw) OPEN
#IFDEF ParaDioAsDevDio
ERC SELECT CHECK Q:p_ddpbvdnw
Q:p_ddpbvdnw {@Check for the right usage of the device p_ddpbvdnw
  copy p_ddpb
}
#ENDIF


DEVICE D(dpdnwmv)   d_dpdnwm pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnwmv NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dpdnwm
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dpdnwmv) p_dpdnwm pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnwmv NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnwm
LVS FILTER D(p_dpdnwmv) OPEN
#ELSE
DEVICE D(dpdnwmv)   p_dpdnwm pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnwmv NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnwm
#ENDIF
DEVICE D(dpdnwnvm)   d_dpdnvm pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnwnvm NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dpdnvm
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dpdnwnvm) p_dpdnvm pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnwnvm NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnvm
LVS FILTER D(p_dpdnwnvm) OPEN
#ELSE
DEVICE D(dpdnwnvm)   p_dpdnvm pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnwnvm NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnvm
#ENDIF
DEVICE D(dpdnw15)   d_dpdnw1 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw15 NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dpdnw1
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dpdnw15) p_dpdnw1 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw15 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnw1
LVS FILTER D(p_dpdnw15) OPEN
#ELSE
DEVICE D(dpdnw15)   p_dpdnw1 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw15 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnw1
#ENDIF
DEVICE D(dpdnw25)   d_dpdnw2 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw25 NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dpdnw2
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dpdnw25) p_dpdnw2 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw25 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnw2
LVS FILTER D(p_dpdnw25) OPEN
#ELSE
DEVICE D(dpdnw25)   p_dpdnw2 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw25 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnw2
#ENDIF
DEVICE D(dpdnw60)   d_dpdnw6 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw60 NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dpdnw6
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dpdnw60) p_dpdnw6 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw60 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnw6
LVS FILTER D(p_dpdnw60) OPEN
#ELSE
DEVICE D(dpdnw60)   p_dpdnw6 pdiff   dnwtrm <diff>
                      NETLIST MODEL dpdnw60 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpdnw6
#ENDIF

DEVICE D(dsa)       d_dsa   d_dsdf  nwtrm      bulk
                      NETLIST MODEL dsa NETLIST ELEMENT XD CMACRO getAreaPeri d_dsa
DEVICE D(dsb)       d_dsb   d_dsdf  dnwtrm     bulk
                      NETLIST MODEL dsb NETLIST ELEMENT XD CMACRO getAreaPeri d_dsb
DEVICE D(dsaa)      d_dsaa  d_dsdf  nwtrm      bulk
                      NETLIST MODEL dsaa NETLIST ELEMENT XD CMACRO getAreaPeri d_dsaa
DEVICE D(dsba)      d_dsba  d_dsdf  dnwtrm     bulk
                      NETLIST MODEL dsba NETLIST ELEMENT XD CMACRO getAreaPeri d_dsba


DEVICE R(rnw5)      rnwm     nwtrm    nwtrm    bulk 
                      NETLIST ELEMENT XR CMACRO getWLRes rnwm
DEVICE R(rnw5_scr)  rnwm_scr nwtrm    nwtrm    bulk
                      NETLIST ELEMENT XR CMACRO getWLRes rnwm_scr
DEVICE R(rdn5)      rdnm     ndiff    ndiff    bulk 
                      NETLIST ELEMENT XR CMACRO getWLRes rdnm
DEVICE R(rdn5)      rdnm_g   ndiff    ndiff    bulk   <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdnm_g
DEVICE R(rdn5)      rdnmi    ndiff    ndiff    pwitrm
                      NETLIST ELEMENT XR CMACRO getWLRes rdnmi
DEVICE R(rdn5)      rdnm_gi  ndiff    ndiff    pwitrm <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdnm_gi
DEVICE R(rdn5_dpc)  rdnm_dpc ndiff    ndiff    bulk   <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdnm_dpc
DEVICE R(rdn5_dpc)  rdnm_dpi  ndiff    ndiff    pwitrm <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdnm_dpi
DEVICE R(rdp5)      rdpm     pdiff    pdiff    nwtrm 
                      NETLIST ELEMENT XR CMACRO getWLRes rdpm
DEVICE R(rdp5)      rdpm_g   pdiff    pdiff    nwtrm  <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdpm_g
DEVICE R(rdp5)      rdpmi    pdiff    pdiff    dnwtrm 
                      NETLIST ELEMENT XR CMACRO getWLRes rdpmi
DEVICE R(rdp5)      rdpm_gi  pdiff    pdiff    dnwtrm  <res_corr>
                      NETLIST ELEMENT XR CMACRO getWLRes32 rdpm_gi


DEVICE D(dn5)       d_dnm   bulk    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dnm
DEVICE D(dn5)       d_dnmi  pwitrm  ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dnmi
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dn5)     p_dnm   bulk    ndiff <diff>
                      NETLIST MODEL dn5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dnm
DEVICE D(p_dn5)     p_dnmi  pwitrm  ndiff <diff>
                      NETLIST MODEL dn5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dnmi
LVS FILTER D(p_dn5) OPEN
#ELSE
DEVICE D(dn5)       p_dnm   bulk    ndiff <diff>
                      NETLIST MODEL dn5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dnm
DEVICE D(dn5)       p_dnmi  pwitrm  ndiff <diff>
                      NETLIST MODEL dn5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dnmi
#ENDIF
DEVICE D(dn5)       d_dnpddm  pwitrm  ndiff <diff>
                      NETLIST MODEL dn5 NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dnpddm
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dn5)     dnpddm  pwitrm  ndiff <diff>
                      NETLIST MODEL dn5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf dnpddm
#ELSE
DEVICE D(dn5)       dnpddm  pwitrm  ndiff <diff>
                      NETLIST MODEL dn5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf dnpddm
#ENDIF

DEVICE D(dnn5)      d_dnnm  bulk    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dnnm
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dnn5)    p_dnnm  bulk    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf p_dnnm
LVS FILTER D(p_dnn5) OPEN
#ELSE
DEVICE D(dnn5)      p_dnnm  bulk    ndiff <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf p_dnnm
#ENDIF

DEVICE D(dp5)       d_dpm   pdiff   nwtrm <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dpm
DEVICE D(dp5)       d_dpmi  pdiff   dnwtrm <diff>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDf d_dpmi
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dp5)     p_dpm   pdiff   nwtrm <diff>
                      NETLIST MODEL dp5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpm
DEVICE D(p_dp5)     p_dpmi  pdiff   dnwtrm <diff>
                      NETLIST MODEL dp5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpmi
LVS FILTER D(p_dp5) OPEN
#ELSE
DEVICE D(dp5)       p_dpm   pdiff   nwtrm <diff>
                      NETLIST MODEL dp5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpm
DEVICE D(dp5)       p_dpmi  pdiff   dnwtrm <diff>
                      NETLIST MODEL dp5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDf p_dpmi
#ENDIF
DEVICE D(dnw5)      d_dnwm  bulk    nwtrm <anwell>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_dnwm
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dnw5)    p_dnwm  bulk    nwtrm <anwell>
                      NETLIST MODEL dnw5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dnwm
LVS FILTER D(p_dnw5) OPEN
#ELSE
DEVICE D(dnw5)      p_dnwm  bulk    nwtrm <anwell>
                      NETLIST MODEL dnw5 NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dnwm
#ENDIF
DEVICE D(dnw5m)     d_dnw5m bulk    nwtrm <anwell>
                      NETLIST ELEMENT XD CMACRO getAreaPeriDnw d_dnw5m
#IFNDEF ParaDioAsDevDio
DEVICE D(p_dnw5m)   p_dnw5m bulk    nwtrm <anwell>
                      NETLIST MODEL dnw5m NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dnw5m
LVS FILTER D(p_dnw5m) OPEN
#ELSE
DEVICE D(dnw5m)     p_dnw5m bulk    nwtrm <anwell>
                      NETLIST MODEL dnw5m NETLIST ELEMENT XD_ CMACRO getAreaPeriDnw p_dnw5m
#ENDIF


DEVICE R(rpp1k1)     rpp1k1_2  p1trm    p1trm    NETLIST ELEMENT XR CMACRO getWLRes rpp1k1_2
DEVICE R(rpp1k1_3)   rpp1k1_s  p1trm    p1trm    bulk
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1k1_s
DEVICE R(rpp1k1_3)   rpp1k1_p  p1trm    p1trm    pwitrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1k1_p
DEVICE R(rpp1k1_3)   rpp1k1_n  p1trm    p1trm    nwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1k1_n
DEVICE R(rpp1k1_3)   rpp1k1_d  p1trm    p1trm    dnwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1k1_d
DEVICE R(rpp1k1_3)   rpp1k1nd  p1trm    p1trm    nddtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1k1nd

DEVICE R(rnp1)      rnp1_2   p1trm    p1trm    NETLIST ELEMENT XR CMACRO getWLRes rnp1_2
DEVICE R(rnp1_3)    rnp1_s   p1trm    p1trm    bulk
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1_s
DEVICE R(rnp1_3)    rnp1_p   p1trm    p1trm    pwitrm
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1_p
DEVICE R(rnp1_3)    rnp1_n   p1trm    p1trm    nwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1_n
DEVICE R(rnp1_3)    rnp1_d   p1trm    p1trm    dnwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1_d
DEVICE R(rnp1_3)    rnp1nd   p1trm    p1trm    nddtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1nd

DEVICE R(rpp1)      rpp1_2   p1trm    p1trm    NETLIST ELEMENT XR CMACRO getWLRes rpp1_2
DEVICE R(rpp1_3)    rpp1_s   p1trm    p1trm    bulk
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1_s
DEVICE R(rpp1_3)    rpp1_p   p1trm    p1trm    pwitrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1_p
DEVICE R(rpp1_3)    rpp1_n   p1trm    p1trm    nwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1_n
DEVICE R(rpp1_3)    rpp1_d   p1trm    p1trm    dnwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1_d
DEVICE R(rpp1_3)    rpp1nd   p1trm    p1trm    nddtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1nd

DEVICE R(rpp1s)     rpp1s_2  p1trm    p1trm    NETLIST ELEMENT XR CMACRO getWLRes rpp1s_2
DEVICE R(rpp1s_3)   rpp1s_s  p1trm    p1trm    bulk
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1s_s
DEVICE R(rpp1s_3)   rpp1s_p  p1trm    p1trm    pwitrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1s_p
DEVICE R(rpp1s_3)   rpp1s_n  p1trm    p1trm    nwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1s_n
DEVICE R(rpp1s_3)   rpp1s_d  p1trm    p1trm    dnwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1s_d
DEVICE R(rpp1s_3)   rpp1snd  p1trm    p1trm    nddtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rpp1snd

DEVICE R(rnp1h)     rnp1h_2  p1trm    p1trm    NETLIST ELEMENT XR CMACRO getWLRes rnp1h_2
DEVICE R(rnp1h_3)   rnp1h_s  p1trm    p1trm    bulk
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1h_s
DEVICE R(rnp1h_3)   rnp1h_p  p1trm    p1trm    pwitrm
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1h_p
DEVICE R(rnp1h_3)   rnp1h_n  p1trm    p1trm    nwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1h_n
DEVICE R(rnp1h_3)   rnp1h_d  p1trm    p1trm    dnwtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1h_d
DEVICE R(rnp1h_3)   rnp1hnd  p1trm    p1trm    nddtrm
                      NETLIST ELEMENT XR CMACRO getWLRes rnp1hnd

DEVICE R(pfuse)     pfuse    p1trm    p1trm    NETLIST ELEMENT XR CMACRO getWLRes pfuse
DEVICE tag_100v     tp1_100  p1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_60v      tp1_60   p1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_25v      tp1_25   p1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m100v    tp1_m100 p1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m60v     tp1_m60  p1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m25v     tp1_m25  p1_vlbl(N1)      NETLIST ELEMENT XX

DEVICE R(rm1)  rm1      m1trm    m1trm     NETLIST ELEMENT XR CMACRO getWLRes rm1
DEVICE R(rm2)  rm2      m2trm    m2trm     NETLIST ELEMENT XR CMACRO getWLRes rm2
DEVICE tag_100v     tm1_100  m1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_60v      tm1_60   m1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_25v      tm1_25   m1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m100v    tm1_m100 m1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m60v     tm1_m60  m1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m25v     tm1_m25  m1_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_100v     tm2_100  m2_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_60v      tm2_60   m2_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_25v      tm2_25   m2_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m100v    tm2_m100 m2_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m60v     tm2_m60  m2_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m25v     tm2_m25  m2_vlbl(N1)      NETLIST ELEMENT XX

#IFDEF METAL3
DEVICE R(rm3)  rm3      m3trm    m3trm     NETLIST ELEMENT XR CMACRO getWLRes rm3
DEVICE tag_100v     tm3_100  m3_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_60v      tm3_60   m3_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_25v      tm3_25   m3_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m100v    tm3_m100 m3_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m60v     tm3_m60  m3_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m25v     tm3_m25  m3_vlbl(N1)      NETLIST ELEMENT XX
#ENDIF

#IFDEF METAL4
DEVICE R(rm4)  rm4      m4trm    m4trm     NETLIST ELEMENT XR CMACRO getWLRes rm4
DEVICE tag_100v     tm4_100  m4_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_60v      tm4_60   m4_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_25v      tm4_25   m4_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m100v    tm4_m100 m4_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m60v     tm4_m60  m4_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m25v     tm4_m25  m4_vlbl(N1)      NETLIST ELEMENT XX
#ENDIF

#IFDEF METAL5
DEVICE R(rm5)  rm5      m5trm    m5trm     NETLIST ELEMENT XR CMACRO getWLRes rm5
DEVICE tag_100v     tm5_100  m5_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_60v      tm5_60   m5_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_25v      tm5_25   m5_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m100v    tm5_m100 m5_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m60v     tm5_m60  m5_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m25v     tm5_m25  m5_vlbl(N1)      NETLIST ELEMENT XX
#ENDIF

#IFDEF MIDMET
DEVICE R(rmtp) rmtp     mttrm    mttrm     NETLIST ELEMENT XR CMACRO getWLRes rmtp
DEVICE tag_100v     tmt_100  mt_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_60v      tmt_60   mt_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_25v      tmt_25   mt_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m100v    tmt_m100 mt_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m60v     tmt_m60  mt_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m25v     tmt_m25  mt_vlbl(N1)      NETLIST ELEMENT XX
#ENDIF

#IFDEF THKMET
DEVICE R(rmtpl) rmtpl   mltrm    mltrm     NETLIST ELEMENT XR CMACRO getWLRes rmtpl
DEVICE tag_100v     tml_100  ml_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_60v      tml_60   ml_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_25v      tml_25   ml_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m100v    tml_m100 ml_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m60v     tml_m60  ml_vlbl(N1)      NETLIST ELEMENT XX
DEVICE tag_m25v     tml_m25  ml_vlbl(N1)      NETLIST ELEMENT XX
#ENDIF


DEVICE C(csf2p)     d_csf2p  m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapf d_csf2p
#IFDEF METAL3
DEVICE C(csf3)      d_csf3   m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapf d_csf3
DEVICE C(csf3p)     d_csf3p  m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapf d_csf3p
DEVICE C(csf3a)     d_csf3a  m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapfa d_csf3a
#ENDIF
#IFDEF METAL4
DEVICE C(csf4)      d_csf4  m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapf d_csf4
DEVICE C(csf4a)     d_csf4a m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapfa d_csf4a
#ENDIF
#IFDEF METAL5
DEVICE C(csf5)      d_csf5  m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapf d_csf5
DEVICE C(csf5a)     d_csf5a m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapfa d_csf5a
#ENDIF
#IFDEF MIDMET
#IFDEF METAL5
DEVICE C(csft6)     d_csft6  m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapf d_csft6
DEVICE C(csft6a)    d_csft6a m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapfa d_csft6a
#ELSE
#IFDEF METAL4
DEVICE C(csft5)     d_csft5  m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapf d_csft5
DEVICE C(csft5a)    d_csft5a m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapfa d_csft5a
#ELSE
#IFDEF METAL3
DEVICE C(csft4)     d_csft4  m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapf d_csft4
DEVICE C(csft4a)    d_csft4a m1atrm  m1btrm
                      NETLIST ELEMENT XC CMACRO getAreaPeriCapfa d_csft4a
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFDEF METAL3
DEVICE C(csandwt3)  d_cswt3  m1trm  p1trm  NETLIST ELEMENT XC CMACRO getAreaPeriCap d_cswt3
#ENDIF
#IFDEF METAL4
DEVICE C(csandwt4)  d_cswt4  m1trm  p1trm  NETLIST ELEMENT XC CMACRO getAreaPeriCap d_cswt4 
#ENDIF
#IFDEF METAL5
DEVICE C(csandwt5)  d_cswt5  m1trm  p1trm  NETLIST ELEMENT XC CMACRO getAreaPeriCap d_cswt5 
#ENDIF


#IFDEF METAL5
DEVICE C(cdmm5)     cdmma    capm2a_b  m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmma
DEVICE C(cdmmh5)    cdmmha   capmh2a_b m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmmha
DEVICE C(ctmm5)     ctmm     capm3_b   m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap ctmm
DEVICE C(ctmmh5)    ctmmh    capmh3_b  m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap ctmmh
#ENDIF
#IFDEF METAL4
DEVICE C(cdmm4)     cdmm     capm2_b   m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmm
DEVICE C(cdmmh4)    cdmmh    capmh2_b  m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmmh
#ENDIF

#IFDEF MIDMET
#IFDEF METAL5
DEVICE C(cmm6t)     cmim     capm      m5trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmim
DEVICE C(cmmh6t)    cmimh    capmh     m5trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh
DEVICE C(cdmm6t)    cdmmb    capm2b_b  m4trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmmb
DEVICE C(cdmmh6t)   cdmmhb   capmh2b_b m4trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmmhb
DEVICE C(ctmm6t)    ctmma    capm3a_b  m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap ctmma
DEVICE C(ctmmh6t)   ctmmha   capmh3a_b m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap ctmmha
#ELSE
#IFDEF METAL4
DEVICE C(cmm5t)     cmim     capm      m4trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmim
DEVICE C(cmmh5t)    cmimh    capmh     m4trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh
DEVICE C(ctmm5t)    ctmm     capm3_b   m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap ctmm
DEVICE C(ctmmh5t)   ctmmh    capmh3_b  m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap ctmmh
DEVICE C(cdmm5t)    cdmma    capm2a_b  m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmma
DEVICE C(cdmmh5t)   cdmmha   capmh2a_b m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmmha
#ELSE
#IFDEF METAL3
DEVICE C(cmm4t)     cmim     capm      m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmim
DEVICE C(cmmh4t)    cmimh    capmh     m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh
DEVICE C(cdmm4t)    cdmm     capm2_b   m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmm
DEVICE C(cdmmh4t)   cdmmh    capmh2_b  m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cdmmh
#ELSE
DEVICE C(cmm3t)     cmim     capm      m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmim
DEVICE C(cmmh3t)    cmimh    capmh     m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFDEF THKMET
#IFNDEF MIDMET
#IFDEF METAL5
DEVICE C(cmmh6l)    cmimh    capmh     m5trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh
#ELSE
#IFDEF METAL4
DEVICE C(cmmh5l)    cmimh    capmh     m4trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh
#ELSE
#IFDEF METAL3
DEVICE C(cmmh4l)    cmimh    capmh     m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh
#ELSE
DEVICE C(cmmh3l)    cmimh    capmh     m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh
#ENDIF
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFDEF METAL3
DEVICE C(cmm3)      cmim23f  capm23f   m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmim23f
DEVICE C(cmmh3)     cmimh23f capmh23f  m2trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh23f
#ENDIF

#IFDEF METAL4
DEVICE C(cmm4)      cmim34f  capm34f   m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmim34f
DEVICE C(cmmh4)     cmimh34f capmh34f  m3trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh34f
#ENDIF

#IFDEF METAL5
DEVICE C(cmm5)      cmim45f  capm45f   m4trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmim45f
DEVICE C(cmmh5)     cmimh45f capmh45f  m4trm   NETLIST ELEMENT XC CMACRO getAreaPeriCap cmimh45f
#ENDIF


TRACE PROPERTY MN               W   W  1
TRACE PROPERTY MN               L   L  1
TRACE PROPERTY MP               W   W  1
TRACE PROPERTY MP               L   L  1

TRACE PROPERTY PE_5             W   W  1
TRACE PROPERTY PE_5             L   L  1
TRACE PROPERTY PEI_A_5          W   W  1
TRACE PROPERTY PEI_A_5          L   L  1
TRACE PROPERTY PEI_B_5          W   W  1
TRACE PROPERTY PEI_B_5          L   L  1
TRACE PROPERTY PEI_D_5          W   W  1
TRACE PROPERTY PEI_D_5          L   L  1
TRACE PROPERTY PEI_M_5          W   W  1
TRACE PROPERTY PEI_M_5          L   L  1
TRACE PROPERTY PEI_N_5          W   W  1
TRACE PROPERTY PEI_N_5          L   L  1
TRACE PROPERTY PEL_5            W   W  1
TRACE PROPERTY PEL_5            L   L  1
TRACE PROPERTY PELI_A_5         W   W  1
TRACE PROPERTY PELI_A_5         L   L  1
TRACE PROPERTY PELI_B_5         W   W  1
TRACE PROPERTY PELI_B_5         L   L  1
TRACE PROPERTY PELI_D_5         W   W  1
TRACE PROPERTY PELI_D_5         L   L  1
TRACE PROPERTY PELI_M_5         W   W  1
TRACE PROPERTY PELI_M_5         L   L  1
TRACE PROPERTY PELI_N_5         W   W  1
TRACE PROPERTY PELI_N_5         L   L  1
TRACE PROPERTY PE5_5            W   W  1
TRACE PROPERTY PE5_5            L   L  1
TRACE PROPERTY PE5I_A_5         W   W  1
TRACE PROPERTY PE5I_A_5         L   L  1
TRACE PROPERTY PE5I_B_5         W   W  1
TRACE PROPERTY PE5I_B_5         L   L  1
TRACE PROPERTY PE5I_D_5         W   W  1
TRACE PROPERTY PE5I_D_5         L   L  1
TRACE PROPERTY PE5I_M_5         W   W  1
TRACE PROPERTY PE5I_M_5         L   L  1
TRACE PROPERTY PE5I_N_5         W   W  1
TRACE PROPERTY PE5I_N_5         L   L  1
TRACE PROPERTY NEI_A_6          W   W  1
TRACE PROPERTY NEI_A_6          L   L  1
TRACE PROPERTY NEI_B_6          W   W  1
TRACE PROPERTY NEI_B_6          L   L  1
TRACE PROPERTY NEI_D_6          W   W  1
TRACE PROPERTY NEI_D_6          L   L  1
TRACE PROPERTY NEI_M_6          W   W  1
TRACE PROPERTY NEI_M_6          L   L  1
TRACE PROPERTY NEI_N_6          W   W  1
TRACE PROPERTY NEI_N_6          L   L  1
TRACE PROPERTY NELI_A_6         W   W  1
TRACE PROPERTY NELI_A_6         L   L  1
TRACE PROPERTY NELI_B_6         W   W  1
TRACE PROPERTY NELI_B_6         L   L  1
TRACE PROPERTY NELI_D_6         W   W  1
TRACE PROPERTY NELI_D_6         L   L  1
TRACE PROPERTY NELI_M_6         W   W  1
TRACE PROPERTY NELI_M_6         L   L  1
TRACE PROPERTY NELI_N_6         W   W  1
TRACE PROPERTY NELI_N_6         L   L  1
TRACE PROPERTY NE5I_A_6         W   W  1
TRACE PROPERTY NE5I_A_6         L   L  1
TRACE PROPERTY NE5I_B_6         W   W  1
TRACE PROPERTY NE5I_B_6         L   L  1
TRACE PROPERTY NE5I_D_6         W   W  1
TRACE PROPERTY NE5I_D_6         L   L  1
TRACE PROPERTY NE5I_M_6         W   W  1
TRACE PROPERTY NE5I_M_6         L   L  1
TRACE PROPERTY NE5I_N_6         W   W  1
TRACE PROPERTY NE5I_N_6         L   L  1
TRACE PROPERTY ND5I_A_6         W   W  1
TRACE PROPERTY ND5I_A_6         L   L  1
TRACE PROPERTY ND5I_B_6         W   W  1
TRACE PROPERTY ND5I_B_6         L   L  1
TRACE PROPERTY ND5I_D_6         W   W  1
TRACE PROPERTY ND5I_D_6         L   L  1
TRACE PROPERTY ND5I_M_6         W   W  1
TRACE PROPERTY ND5I_M_6         L   L  1
TRACE PROPERTY ND5I_N_6         W   W  1
TRACE PROPERTY ND5I_N_6         L   L  1
TRACE PROPERTY PMB_BJT          W   W  1
TRACE PROPERTY PMB_BJT          L   L  1
TRACE PROPERTY PMC_BJT          W   W  1
TRACE PROPERTY PMC_BJT          L   L  1
TRACE PROPERTY PMMA_BJT         W   W  1
TRACE PROPERTY PMMA_BJT         L   L  1
TRACE PROPERTY PMMB_BJT         W   W  1
TRACE PROPERTY PMMB_BJT         L   L  1
TRACE PROPERTY PMMC_BJT         W   W  1
TRACE PROPERTY PMMC_BJT         L   L  1

TRACE PROPERTY MOSVC            W   W  1
TRACE PROPERTY MOSVC            L   L  1
TRACE PROPERTY MOSVCI_A         W   W  1
TRACE PROPERTY MOSVCI_A         L   L  1
TRACE PROPERTY MOSVCI_B         W   W  1
TRACE PROPERTY MOSVCI_B         L   L  1
TRACE PROPERTY MOSVCI_D         W   W  1
TRACE PROPERTY MOSVCI_D         L   L  1
TRACE PROPERTY MOSVCI_M         W   W  1
TRACE PROPERTY MOSVCI_M         L   L  1
TRACE PROPERTY MOSVCI_N         W   W  1
TRACE PROPERTY MOSVCI_N         L   L  1
TRACE PROPERTY MOSVC5           W   W  1
TRACE PROPERTY MOSVC5           L   L  1
TRACE PROPERTY MOSVC5I_A        W   W  1
TRACE PROPERTY MOSVC5I_A        L   L  1
TRACE PROPERTY MOSVC5I_B        W   W  1
TRACE PROPERTY MOSVC5I_B        L   L  1
TRACE PROPERTY MOSVC5I_D        W   W  1
TRACE PROPERTY MOSVC5I_D        L   L  1
TRACE PROPERTY MOSVC5I_M        W   W  1
TRACE PROPERTY MOSVC5I_M        L   L  1
TRACE PROPERTY MOSVC5I_N        W   W  1
TRACE PROPERTY MOSVC5I_N        L   L  1

TRACE PROPERTY LDDN             W   W  1
TRACE PROPERTY LDDN             L   L  1
TRACE PROPERTY LDDP             W   W  1
TRACE PROPERTY LDDP             L   L  1

TRACE PROPERTY Q(qpvh)          LE  LE 0
TRACE PROPERTY Q(qnva)          LE  LE 0
TRACE PROPERTY Q(qnva5)         LE  LE 0
TRACE PROPERTY Q(qnvb)          LE  LE 0
TRACE PROPERTY Q(qnvc)          LE  LE 0
TRACE PROPERTY Q(qpvhascr)      LE  LE 0

TRACE PROPERTY R(s_res)         R   R  0

TRACE PROPERTY R                W   W  1
TRACE PROPERTY R                L   L  1

TRACE PROPERTY C                "AREA"       "AREA"       1
TRACE PROPERTY C                "PERIMETER"  "PERIMETER"  1

TRACE PROPERTY DZA_A            "AREA"       "AREA"       5
TRACE PROPERTY DZA_A            "PERIMETER"  "PERIMETER"  5
TRACE PROPERTY DZA_B            "AREA"       "AREA"       5
TRACE PROPERTY DZA_B            "PERIMETER"  "PERIMETER"  5
TRACE PROPERTY DZA_D            "AREA"       "AREA"       5
TRACE PROPERTY DZA_D            "PERIMETER"  "PERIMETER"  5
TRACE PROPERTY DZA_M            "AREA"       "AREA"       5
TRACE PROPERTY DZA_M            "PERIMETER"  "PERIMETER"  5

TRACE PROPERTY D                A   A  5
TRACE PROPERTY D                P   P  5


//------------------------------------------------------------
//        Macro's definitions
//------------------------------------------------------------

DMACRO getAreaPeri seed {[
property A, P, PERIMETER
    A     = AREA(seed)
    P     = PERIM(seed)
    PERIMETER  = PERIM(seed)
]}


DMACRO getAreaPeriDf seed {[
property A, P, PERIMETER
    A     = AREA(seed)
    P     = perim_coincide(seed,diff)
    PERIMETER  = perim_coincide(seed,diff)
]}


DMACRO getAreaPeriDnw seed {[
property A, P, PERIMETER
    A     = AREA(seed)
    P     = perim_coincide(seed,anwell)
    PERIMETER  = perim_coincide(seed,anwell)
]}


DMACRO getAreaPeriDpw seed {[
property A, P, PERIMETER
    A     = AREA(seed)
    P     = perim_coincide(seed,pwitrm)
    PERIMETER  = perim_coincide(seed,pwitrm)
]}


DMACRO getAreaPeriDz seed {[
property "AREA", "PERIMETER", extlay
   "AREA"       = AREA(seed)
   "PERIMETER"  = PERIM(seed)
    extlay = 1
]}


DMACRO getAreaPeriCap seed {[
property "AREA", "PERIMETER"
   "AREA"       = AREA(seed)
   "PERIMETER"  = PERIM(seed)
]}


DMACRO getAreaPeriCapf seed {[
property "AREA", "PERIMETER"
   "AREA"       = 48.384e-12
   "PERIMETER"  = 30.56e-6
]}


DMACRO getAreaPeriCapfa seed {[
property "AREA", "PERIMETER"
   "AREA"       = 63.936e-12
   "PERIMETER"  = 33.72e-6
]}


DMACRO getWLRes seed {[
property l, w
    weff = 0.5
    ar   = area(seed)
    w    = 0.5 * (perimeter_coincide(pos,seed) + (perimeter_coincide(neg,seed)))
    l    = ar/w

    if (bends(seed) > 0)
    {
    if  (W > L)
    w = w - weff*bends(seed) * l
    else
    l = l - weff*bends(seed) * w
    }
]}


DMACRO getWLRes32 seed {[
property l, w
    ar   = area(seed)
    ar_c = area(res_corr)
    w    = 0.5 * (perimeter_coincide(pos,seed) + (perimeter_coincide(neg,seed)))
    l    = ar/w + ar_c/w
]}


DMACRO getVRes5 seed {[
property R
    R    = 5
]}


DMACRO getParaMvc seed {[
property w,l
    W = perimeter_inside(seed, ndif)/2
    L = AREA(seed) / W
]}


DMACRO getParaMvci seed {[
property w,l
    W = perimeter_inside(seed, pdif)/2
    L = AREA(seed) / W
]}


DMACRO getParaMn seed {[
property w,l,as,ad,ps,pd
    W = (perimeter_coincide(S, seed) + perimeter_coincide(D, seed))/2
    L = AREA(seed) / W

    AS = area(S)
    AD = area(D)
    PS = perimeter(S)
    PD = perimeter(D)

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    }
    if (AD > 0) {
    AD = area(D) * (perimeter_coincide(D, seed) / perimeter_inside(D, ndif2))
    PD = perimeter(D) * (perimeter_coincide(D, seed) / perimeter_inside(D, ndif2))
    }
]}


DMACRO getParaMndsiP seed {[
property w,l,as,ad,ps,pd, prg_state, prog
    W = (perimeter_coincide(S, seed) + perimeter_coincide(D, seed))/2
    L = AREA(seed) / W

    AS = area(S)
    AD = area(D)
    PS = perimeter(S)
    PD = perimeter(D)
    prg_state = "P"
    prog = 1

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    }
    if (AD > 0) {
    AD = area(D) * (perimeter_coincide(D, seed) / perimeter_inside(D, ndif2))
    PD = perimeter(D) * (perimeter_coincide(D, seed) / perimeter_inside(D, ndif2))
    }
]}


DMACRO getParaMndsiE seed {[
property w,l,as,ad,ps,pd, prg_state, prog
    W = (perimeter_coincide(S, seed) + perimeter_coincide(D, seed))/2
    L = AREA(seed) / W

    AS = area(S)
    AD = area(D)
    PS = perimeter(S)
    PD = perimeter(D)
    prg_state = "E"
    prog = 0

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    }
    if (AD > 0) {
    AD = area(D) * (perimeter_coincide(D, seed) / perimeter_inside(D, ndif2))
    PD = perimeter(D) * (perimeter_coincide(D, seed) / perimeter_inside(D, ndif2))
    }
]}


DMACRO getParaMp seed {[
property w,l,as,ad,ps,pd
    W = (perimeter_coincide(S, seed) + perimeter_coincide(D, seed))/2
    L = AREA(seed) / W

    AS = area(S)
    AD = area(D)
    PS = perimeter(S)
    PD = perimeter(D)

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, pdif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, pdif2))
    }
    if (AD > 0) {
    AD = area(D) * (perimeter_coincide(D, seed) / perimeter_inside(D, pdif2))
    PD = perimeter(D) * (perimeter_coincide(D, seed) / perimeter_inside(D, pdif2))
    }
]}


DMACRO getParaMHn seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_inside(S, seed) + perimeter_inside(D, seed))/2
    L = (area(seed) - area_common(seed, nddtrm)) / W
    extlay = 1

    AS = 1E-15
    AD = 1E-15
    PS = 0
    PD = 0
]}


DMACRO getParaMHn1 seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_inside(S, seed) + perimeter_inside(D, seed))/2
    L = (area(seed) - area_common(seed, nddtrm)) / W
    extlay = 1

    AS = 1E-15
    AD = 1E-15
    PS = 0
    PD = 0

    if (AS > 0) {
    AS = area(S) * (perimeter_inside(S, seed) / perimeter_outside(S, n_bjtx))
    PS = perimeter(S) * (perimeter_inside(S, seed) / perimeter_outside(S, n_bjtx))
    }
    if (AD > 0) {
    AD = area(D) * (perimeter_inside(D, seed) / perimeter_outside(D, n_bjtx))
    PD = perimeter(D) * (perimeter_inside(D, seed) / perimeter_outside(D, n_bjtx))
    }
]}


DMACRO getParaMHp1 seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_inside(S, seed) + perimeter_inside(D, seed))/2
    L = (area(seed) - area_common(seed, pwitrm)) / W
    extlay = 1

    AS = 1E-15
    AD = 1E-15
    PS = 0
    PD = 0
]}


DMACRO getParaMHp2 seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_inside(S, seed) + perimeter_inside(D, seed))/2
    L = (area(seed) - area_common(seed, pwitrm)) / W
    extlay  = 1

    AS = 1E-15
    AD = 1E-15
    PS = 0
    PD = 0

    if (AS > 0) {
    AS = area(S) * (perimeter_inside(S, seed) / perimeter_outside(S, p_bjtx))
    PS = perimeter(S) * (perimeter_inside(S, seed) / perimeter_outside(S, p_bjtx))
    }
    if (AD > 0) {
    AD = area(D) * (perimeter_inside(D, seed) / perimeter_outside(D, p_bjtx))
    PD = perimeter(D) * (perimeter_inside(D, seed) / perimeter_outside(D, p_bjtx))
    }
]}


DMACRO getParaLHn1 seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_coincide(S, seed) + perimeter_coincide(D, seed))/2
    L = AREA(seed) / W
    extlay = 1

    AS = area(S)
    AD = 1E-15
    PS = perimeter(S)
    PD = 0

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    }
]}


DMACRO getParaLHn2 seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_coincide(S, seed) + perimeter_inside(D, seed))/2
    L = (area(seed) - area_common(seed, nddtrm)) / W
    extlay = 1
  
    AS = area(S)
    AD = 1E-15
    PS = perimeter(S)
    PD = 0

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    }
]}


DMACRO getParaLHn3 seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_coincide(S, seed) + perimeter_inside(D, seed))/2
    L = (area(seed) - area_common(seed, nddtrm)) / W
    extlay = 1

    AS = area(S)
    AD = 1E-15
    PS = perimeter(S)
    PD = 0

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, ndif2))
    }
    if (AD > 0) {
    AD = area(D) * (perimeter_inside(D, seed) / perimeter_outside(D, n_bjtx))
    PD = perimeter(D) * (perimeter_inside(D, seed) / perimeter_outside(D, n_bjtx))
    }
]}


DMACRO getParaLHp2 seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_coincide(S, seed) + perimeter_inside(D, seed))/2
    L = (area(seed) - area_common(seed, pwitrm)) / W
    extlay = 1

    AS = area(S)
    AD = 1E-15
    PS = perimeter(S)
    PD = 0

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, pdif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, pdif2))
    }
]}


DMACRO getParaLHp3 seed {[
property w,l,as,ad,ps,pd,extlay
    W = (perimeter_coincide(S, seed) + perimeter_inside(D, seed))/2
    L = (area(seed) - area_common(seed, pwitrm)) / W
    extlay = 1

    AS = area(S)
    AD = 1E-15
    PS = perimeter(S)
    PD = 0

    if (AS > 0) {
    AS = area(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, pdif2))
    PS = perimeter(S) * (perimeter_coincide(S, seed) / perimeter_inside(S, pdif2))
    }

    if (AD > 0) {
    AD = area(D) * (perimeter_inside(D, seed) / perimeter_outside(D, p_bjtx))
    PD = perimeter(D) * (perimeter_inside(D, seed) / perimeter_outside(D, p_bjtx))
    }
]}


DMACRO getParaLHDn seed {[
property w,l,adio,pdio,extlay
    W = perimeter_coincide(S, ned_al)
    L = AREA_common(seed,ned_al) / W
    extlay = 1

    adio = area(D)
    pdio = perimeter(D)

    if (adio > 0) {
    adio = area(D) * (W / ((area(D) - area(dmos_dnx)) / L))
    pdio = perimeter(D) * (W / ((area(D) - area(dmos_dnx)) / L))
    }
]}


DMACRO getParaLHDp seed {[
property w,l,AD,PD,adio,pdio,extlay
    W = perimeter_coincide(S, ped_al)
    L = AREA_common(seed,ped_al) / W
    extlay = 1

    AD = area(D)
    PD = perimeter(D)
    adio = area(dnwtrm)
    pdio = perimeter(dnwtrm)

    if (AD > 0) {
    AD = area(D) * (W / ((area(dmos_pwx) - area(D)) / L))
    PD = perimeter(D) * (W / ((area(dmos_pwx) - area(D)) / L))
    }

    if (adio > 0) {
    adio = area(dnwtrm) * (W / ((area(dnwtrm) - area(dmos_dnx)) / L))
    pdio = perimeter(dnwtrm) * (W / ((area(dnwtrm) - area(dmos_dnx)) / L))
    }
]}


DMACRO getParaQpvh seed {[
property LE
    LE = AREA(E) /5e-12
]}


DMACRO getParaQpvhascr seed {[
property LE
    LE = (AREA(E) + 9.5922e-12) /10.87e-12
]}


DMACRO getParaQnva seed {[
property LE
    LE = AREA(E) /0.42e-12
]}


DMACRO getParaQnvb seed {[
property LE
    LE = AREA(E) /2.2e-12
]}


DMACRO getParaQnvc seed {[
property LE
    LE = AREA(E) /1.36e-12
]}


//------------------------------------------------------------
//      PATHCHECK (Floating structures)
//------------------------------------------------------------

#IFDEF FloatingGate
ERC SELECT CHECK PATHCHECK_1
gate_4flc = poly_dg AND gate
CONNECT p1trm gate_4flc

PATHCHECK_1 {@GATE without path to power or ground or labeled net
a1 = PATHCHK !POWER gate_4flc
a2 = PATHCHK !GROUND gate_4flc
a3 = PATHCHK !LABELED gate_4flc
(a1 AND a2) and a3
}
#ENDIF

#IFDEF FloatingWell
ERC SELECT CHECK PATHCHECK_2

PATHCHECK_2 {@wells without path to power or ground or labeled net
a1 = PATHCHK !POWER nwtrm
a2 = PATHCHK !GROUND nwtrm
a3 = PATHCHK !LABELED nwtrm
a4 = (a1 AND a2) and a3
a4 NOT pfuse_nw
b1 = PATHCHK !POWER dnwtrm
b2 = PATHCHK !GROUND dnwtrm
b3 = PATHCHK !LABELED dnwtrm
(b1 AND b2) and b3
c1 = PATHCHK !POWER nddtrm
c2 = PATHCHK !GROUND nddtrm
c3 = PATHCHK !LABELED nddtrm
(c1 AND c2) and c3
d1 = PATHCHK !POWER pwitrm
d2 = PATHCHK !GROUND pwitrm
d3 = PATHCHK !LABELED pwitrm
d4 = pdd INTERACT (ned2_r27 ENCLOSE (nedb OR(nedc OR nedd)))
((d1 AND d2) and d3) NOT d4
e1 = PATHCHK !POWER bulk
e2 = PATHCHK !GROUND bulk
e3 = PATHCHK !LABELED bulk
(e1 AND e2) and e3
}
#ENDIF


//------------------------------------------------------------
//      DRC Rules
//------------------------------------------------------------

offgrid_vertex {@Grid = 0.005
               DRAWN OFFGRID }
skew_edge      {@Edge is not multiple 45 degrees
               DRAWN SKEW }


Q1SU {@Check for the right usage of the layer SUBCUT
  COPY subcut
}

B1SU {@DIFF or *WELL crossing SUBCUT edge is not allowed
  INSIDE EDGE subcut diff_dg
  INSIDE EDGE subcut alwell
}


M_WV {@Predefined area must have VDNWELL
  qpvhasv2 NOT vdnwell
  hvscrv_vd NOT vdnwell
}

N_WV {@Predefined area must not have VDNWELL
  qpvhasv1 NOT qpvhasv2
  hvscr_vd NOT hvscrv_vd
  hvscrd_dw6 AND vdnwell
  qnvc_dnw AND vdnwell
  dza_279 AND vdnwell
}

M_WD {@Predefined area must have DNWELL60
  (qpvhasv2 NOT qpvhas_dw6) NOT dnwel60
  hvscrd_dw6 NOT dnwel60
  hvscrv_dw6 NOT dnwel60
  nedc_mwd NOT dnwel60
  nedd_mwd NOT dnwel60
  pedb_mwd NOT dnwel60
  pedc_mwd NOT dnwel60
  pedd_mwd NOT dnwel60
}

N_WD {@Predefined area must not have DNWELL60
  (qpvhasv1 AND dnwel60) NOT (qpvhasv2 NOT qpvhas_dw6)
  hvscr_d6 NOT hvscrd_dw6
  (hvscr_vd AND dnwel60) NOT hvscrv_dw6
  qnvc_dnw AND dnwel60
}

M_WB {@Predefined area must have DNWELL25
  nedb_mwb NOT dnwel25
}

N_WB {@Predefined area must not have DNWELL25
  qnvc_dnw AND dnwel25
}

M_WA {@Predefined area must have DNWELL15
  peda_mwa NOT dnwel15
  pede_mwa NOT dnwel15
}

N_WA {@Predefined area must not have DNWELL15
  qnvc_dnw AND dnwel15
}

M_WM {@Predefined area must have DNWELLMV
  qnvc_dw NOT dnw_mv
  dza_179 NOT dnw_mv
}

M_NW {@Predefined area must have NWELL
  qpvhas_nw NOT nwell
  hvscrd_nw NOT nwell
  hvscrv_nw NOT nwell
  qnvc_nw NOT nwell
  qnvcanw NOT nwell
  qnvcbnw NOT nwell
  (dza_279 NOT dza_179) NOT nwell
}

N_NW {@Predefined area must not have NWELL
  (qpvhasv1 AND nwell) NOT qpvhas_nw
  (hvscr_d6 AND nwell) NOT hvscrd_nw
  (hvscr_vd AND nwell) NOT hvscrv_nw
  qnvc_nw1 AND nwell
  qnvcanw4 AND nwell
  qnvcbnw4 AND nwell
  dza_179 AND nwell
}

M_NC {@Predefined area must have DNC
  qpvhas_nw NOT dnc
  hvscrv_nc NOT dnc
}

N_NC {@Predefined area must not have DNC
  hvscr_d6 AND dnc
  (hvscr_vd AND dnc) NOT hvscrv_nc
  dza_279 AND dnc
}

N_NV {@Predefined area must not have VNC
  qpvhasv1 AND vnc
  hvscr_al AND vnc
}

M_PI {@Predefined area must have ISOPW
  qpvhas_pi4 NOT pwiso
  hvscra_pi2 NOT pwiso
  hvscrd_pi2 NOT pwiso
  hvscrv_pi2 NOT pwiso
  hvscrv_pi3 NOT pwiso
  qnvc_pw3 NOT pwiso
  qnvcapw3 NOT pwiso
  qnvcbpw3 NOT pwiso
  dza_129 NOT pwiso
}

N_PI {@Predefined area must not have ISOPW
  (qpvhasv1 AND pwiso) NOT qpvhas_pi4
  (hvscr_d6 AND pwiso) NOT (hvscra_pi2 OR hvscrd_pi2)
  (hvscr_vd AND pwiso) NOT (hvscra_pi2 OR (hvscrv_pi2 OR hvscrv_pi3))
  (qnvc_dw AND pwiso) NOT (qnvc_pw3 OR (qnvcapw3 OR qnvcbpw3))
  (dza_279 AND pwiso) NOT dza_129
}

N_PC {@Predefined area must not have DPC
  qpvhasv1 AND dpc
  hvscr_al AND dpc
  qnvc_pw AND dpc
  dza_279 AND dpc
}

G_NX {@Predefined geometry of NDD violated
  RECTANGLE qnvb > 50
}

G_PT {@Predefined geometry of PDD violated
  (qpvhascr OUTSIDE qpvhas_pt0) OR qpvhas_pt1
  (hvscra_p0 OUTSIDE hvscra_pt0) OR hvscra_pt1
  RECTANGLE qpvh > 150
}

M_PT {@Predefined area must have PDD
  qpvhas_pt0 NOT qpvhascr
  hvscra_pt0 NOT hvscra_p0
}

N_PT {@Predefined area must not have PDD
  ((qpvhasv1 AND pdd) NOT qpvhas_pt0) NOT (qpvhascr OUTSIDE qpvhas_pt0)
  (hvscra_p0 NOT hvscra_pt0) NOT (hvscra_p0 OUTSIDE hvscra_pt0)
  dza_279 AND pdd
}

M_DF {@Predefined area must have DIFF
  qnvc_df NOT diff
  qnvcadp5 NOT diff
  qnvcbdp5 NOT diff
}

G_DF {@Predefined geometry of DIFF violated
  RECTANGLE d_dsaa > 50
  RECTANGLE d_dsba > 50
}

N_DF {@Predefined area must not have DIFF
  (qnvc_dwc AND diff) NOT ((qnvc_df OR qnvc_dn) OR ((qnvcadn OR qnvcadp5) OR (qnvcbdn OR qnvcbdp5)))
  ((dza_208 NOT dza_086) OR (dza_044 NOT dza_all)) AND diff
}

G_DN {@Predefined geometry of NDIFF violated
  RECTANGLE qnva_all > 50
  RECTANGLE qnvc > 50
}

M_DN {@Predefined area must have NDIFF
  qpvhas_dn NOT ndiff
  hvscrd_dn NOT ndiff
  hvscrv_dn NOT ndiff
  qnvc_dn NOT ndiff
  qnvcadn NOT ndiff
  qnvcbdn NOT ndiff
  (dza_250 NOT dza_208) NOT ndiff
}

N_DN {@Predefined area must not have NDIFF
  (qpvhasv1 AND ndiff) NOT qpvhas_dn
  (hvscr_d6 AND ndiff) NOT hvscrd_dn
  (hvscr_vd AND ndiff) NOT hvscrv_dn
  (qnvc_dn1 AND ndiff) NOT qnvc
  (qnvcadn4 AND ndiff) NOT qnvcra
  (qnvcbdn4 AND ndiff) NOT qnvcrb
}

M_DP {@Predefined area must have PDIFF
  qpvhas_dp NOT pdiff
  niscr_d3 NOT pdiff
  hvscrd_dp NOT pdiff
  hvscrv_dp NOT pdiff
  qnvc_dp NOT pdiff
  qnvcadp NOT pdiff
  qnvcbdp NOT pdiff
  (dza_086 NOT dza_044) NOT pdiff
}

N_DP {@Predefined area must not have PDIFF
  (qpvhasv1 AND pdiff) NOT qpvhas_dp
  niscr_d4 AND pdiff
  (hvscr_d6 AND pdiff) NOT hvscrd_dp
  (hvscr_vd AND pdiff) NOT hvscrv_dp
  (qnvc_dwc AND pdiff) NOT (qnvc_dp OR (qnvcadp OR qnvcbdp))
}

M_SB {@Predefined area must have SBLK
  qpvhas_sb NOT sblk
  hvscrd_sb NOT sblk
  hvscrv_sb NOT sblk
  qnvc_sb NOT sblk
  qnvcasb NOT sblk
  qnvcbsb NOT sblk
}

N_SB {@Predefined area must not have SBLK
  (qpvhasv1 AND sblk) NOT qpvhas_sb
  (hvscr_d6 AND sblk) NOT hvscrd_sb
  (hvscr_vd AND sblk) NOT hvscrv_sb
  (qnvc_dwc AND sblk) NOT (qnvc_sb OR (qnvcasb OR qnvcbsb))
  dza_250 AND sblk
}

M_MV {@Predefined area must have MV
  hvscr_d6 NOT mv
  qnvc_dwc NOT mv
  dza_279 NOT mv
}

N_P1 {@Predefined area must not have POLY1
  qnvc_dwc AND poly1
  dza_279 AND poly1
}

N_DL {@Predefined area must not have DEPL
  qpvhasv1 AND depl
  hvscr_al AND depl
  qnvc_pw AND depl
  dza_279 AND depl
}

G_PZ {@Predefined geometry of PZENER violated
  NOT RECTANGLE pzener ==1 BY >=1 <= 49.4
  pzener INTERACT (((dza_all SIZE BY -0.3) XOR pzener) OR ((pzener SIZE BY 0.3) XOR diff))
}

N_CT {@Predefined area must not have CONT
  pfuse12 AND cont
}

M_M1 {@Predefined area must have MET1
  qpvhas_m1m NOT met1sl
}

N_M1 {@Predefined area must not have MET1
  (qpvhasv1 AND met1sl) NOT qpvhas_m1n
  locked_m1n AND met1_dg
}

M_M2 {@Predefined area must have MET2
  qpvhas_m2m NOT met2sl
}

N_M2 {@Predefined area must not have MET2
  (qpvhasv1 AND met2sl) NOT qpvhas_m2n
  locked_m2n AND met2_dg
}

#IFDEF METAL3
N_M3 {@Predefined area must not have MET3
  locked_m3n AND met3_dg
}
#ENDIF


nwell_13 = nwell     NOT  mv
nwell_1  = (nwell_13 NOT  lvt) OR  dnc
nwell_2  = (nwell    AND  mv)  OR  dnc
nwell_3  = (nwell_13 OR   dnc) AND lvt
pwell_13 = (((bulk_1 NOT  alwell)  NOT  pwblk) NOT mv) OR (pwiso NOT mv)
pwell_1  = (pwell_13 NOT  lvt) OR  dpc
pwell_2  = ((mv      NOT  alwell)  NOT  pwblk) OR ((pwiso AND mv) OR dpc)
pwell_3  = (pwell_13 OR   dpc) AND lvt

W1W1 {@Minimum NWELL1 width ... 0.86
  INT nwell_1 < 0.86 ABUT <90 SINGULAR REGION
}

W1W2 {@Minimum PWELL1 width ... 0.6
  INT pwell_1 < 0.6 ABUT <90 SINGULAR REGION
}

W1W3 {@Minimum NWELL2 width ... 0.86
  INT nwell_2 < 0.86 ABUT <90 SINGULAR REGION
}

W1W4 {@Minimum PWELL2 width ... 0.6
  INT pwell_2 < 0.6 ABUT <90 SINGULAR REGION
}

W1W5 {@Minimum NWELL3 width ... 0.86
  INT nwell_3 < 0.86 ABUT <90 SINGULAR REGION
}

W1W6 {@Minimum PWELL3 width ... 0.6
  INT pwell_3 < 0.6 ABUT <90 SINGULAR REGION
}


W1NW {@Minimum NWELL width ... 0.86
  INT nwell < 0.86 ABUT <90 SINGULAR REGION
}

S1NW {@Minimum NWELL spacing/notch ... 0.6
  EXT nwell < 0.6 ABUT <90 SINGULAR REGION
}

S2NW {@Minimum NWELL spacing (different net) ... 1.4
  ((EXT nwtrm1 < 1.4 ABUT <90 SINGULAR REGION) NOT
  (EXT (COIN EDGE nwtrm nwell) < 1.4 CONNECTED ABUT <90 REGION)) NOT
  (EXT pfuse_nw < 1.4 ABUT <90 SINGULAR REGION)
}

S3NW {@Minimum (NWELL AND MV) spacing to NWELL (different net) ... 2.0
  ((EXT (nwtrm1 AND mv) nwtrm1 < 2.0 ABUT <90 SINGULAR REGION) NOT
  (EXT (COIN EDGE nwtrm nwell) < 2.0 CONNECTED ABUT <90 REGION)) NOT
  (EXT pfuse_nw < 1.4 ABUT <90 SINGULAR REGION)
}


B2PB {@PWBLK overlap of NWELL, DNWELL, VDNWELL, LVT, DPC, DPB, PD2 or PDD is not allowed
  pwblk AND nwell
  pwblk AND dnw_all
  pwblk AND lvt
  pwblk AND apwell
}

B3PB {@PWBLK overlap of PDIFF is not allowed
  pwblk AND pdif
}

B4PB {@DIFF crossing PWBLK edge is not allowed
  INSIDE EDGE pwblk (diff NOT nmx_al)
}

pwblk_nd = pwblk    INTERACT     ndif
nd_pwblk = (ndif    NOT          nmx_al) INTERACT pwblk_nd
nd_pwbl1 = (pwblk   AND          ndif) OUTSIDE nmx_ndd

B6PB {@Only a single rectangular NDIFF inside PWBLK is allowed
  NOT RECTANGLE nd_pwblk
  pwblk_nd INTERACT nd_pwblk > 1
}

W1PB {@Minimum PWBLK width ... 0.6
  INT pwblk < 0.6 ABUT <90 SINGULAR REGION
}

S1PB {@Minimum PWBLK spacing/notch ... 0.86
  EXT pwblk < 0.86 ABUT <90 SINGULAR REGION
}

E1PBDN {@Fixed PWBLK enclosure of NDIFF ... 0.12
  ENC ndif pwblk < 0.12 ABUT <90 SINGULAR REGION
  ((SIZE nd_pwbl1 BY 0.125) AND pwblk) NOT (SIZE nd_pwbl1 BY 0.12)
}

S1PBDN {@Minimum PWBLK spacing to NDIFF ... 0.12
  EXT pwblk ndif < 0.12 ABUT <90 SINGULAR REGION
}

S1PBNW {@Minimum PWBLK spacing to NWELL ... 0.86
  EXT pwblk (nwell NOT dnw_al) < 0.86 ABUT <90 SINGULAR REGION
}

S1PBWM {@Minimum PWBLK spacing to DNWELLMV ... 2.0
  EXT pwblk dnw_mv1 < 2.0 ABUT <90 SINGULAR REGION
}


B1WM {@DNWELLMV crossing DNWELL# edge is not allowed
  INSIDE EDGE dnw_al2 dnw_mv
}

B2WM {@NWELL crossing DNWELLMV edge is not allowed
  INSIDE EDGE dnw_mv1 nwell
}

B8WM {@POLY1 crossing DNWELLMV edge is not allowed
  INSIDE EDGE dnw_mv1 poly1
}

W1WM {@Minimum DNWELLMV width ... 2.0
  INT dnw_mv < 2.0 ABUT <90 SINGULAR REGION
}

S1WM {@Minimum DNWELLMV spacing/notch ... 2.0
  EXT dnw_mv1 < 2.0 ABUT <90 SINGULAR REGION
}

S2WM {@Minimum DNWELLMV spacing (different net) ... 5.0
  (EXT dnw_mv1 < 5.0 ABUT <90 SINGULAR REGION) NOT
  (EXT (COIN EDGE dnwtrm dnw_mv) < 5.0 CONNECTED ABUT <90 REGION)
}

S1WMNW {@Minimum DNWELLMV spacing to NWELL ... 3.5
  EXT dnw_mv1 (nwell NOT dnw_mv1) < 3.5 ABUT <90 SINGULAR REGION
}

S1WMWA {@Minimum DNWELLMV spacing to DNWELL15 ... 8.0
  EXT dnw_mv1 dnwel15 < 8.0 ABUT <90 SINGULAR REGION
}

S1WMWB {@Minimum DNWELLMV spacing to DNWELL25 ... 8.0
  EXT dnw_mv1 dnwel25 < 8.0 ABUT <90 SINGULAR REGION
}

S1WMWD {@Minimum DNWELLMV spacing to DNWELL60 ... 10.0
  EXT dnw_mv1 dnwel60 < 10.0 ABUT <90 SINGULAR REGION
}

S1WMP1 {@Minimum DNWELLMV spacing to POLY1 ... 2.0
  EXT dnw_mv1 poly1 < 2.0 ABUT <90 SINGULAR REGION
}

E1WMP1 {@Minimum DNWELLMV enclosure of POLY1 ... 2.0
  ENC poly1 dnw_mv1 < 2.0 ABUT <90 SINGULAR REGION
}

dnw_nwn = dnw_mv1 NOT nwell

S1WMDP {@Minimum DNWELLMV spacing to PDIFF ... 0.43
  EXT dnw_nwn ptap < 0.43 ABUT <90 SINGULAR REGION
}

E1WMDP {@Minimum DNWELLMV enclosure of PDIFF ... 0.86
  ENC (pdif AND dnw_nwn) dnw_mv1 < 0.86 ABUT <90 SINGULAR REGION
}

S1WMDN {@Minimum DNWELLMV spacing to NDIFF ... 0.43
  EXT dnw_mv1 ndif < 0.43 ABUT <90 SINGULAR REGION
}

E1WMDN {@Minimum DNWELLMV enclosure of NDIFF ... 0.43
  ENC (ndif AND dnw_nwn) dnw_mv1 < 0.43 ABUT <90 SINGULAR REGION
}


B1PI {@ISOPW without DNWELL or DPB is not allowed
  (((pwiso NOT dnw_al) NOT dpb) NOT qpvhascr) NOT hvscr_vd
}

W1PI {@Minimum ISOPW width ... 0.6
  INT pwiso < 0.6 ABUT <90 SINGULAR REGION
}

S1PI {@Minimum ISOPW spacing/notch ... 0.6
  EXT pwiso < 0.6 ABUT <90 SINGULAR REGION
}


B1IW {@ISOWELL overlap of NWELL is not allowed
  isowell AND nwell
}

B2IW {@ISOWELL crossing DNWELLMV or DNWELLNVM edge is not allowed
  INSIDE EDGE dnw_al3 isowell
}

S1IW {@Minimum ISOWELL spacing/notch ... 0.6
  EXT isowell < 0.6 ABUT <90 SINGULAR REGION
}

S2IW {@Minimum ISOWELL spacing (different net) ... 2.0
  EXT (pwitrm AND isowell) < 2.0 NOT CONNECTED ABUT <90 REGION
}

S1IWDN {@Minimum ISOWELL spacing to NDIFF ... 0.43
  ((EXT isowell ndif < 0.43 ABUT <90 SINGULAR REGION) NOT qpvhasvd) NOT hvscr_al
}

E1IWDN {@Minimum ISOWELL enclosure of NDIFF ... 0.43
  ENC ndif isowell < 0.43 ABUT <90 SINGULAR REGION
}

S1IWDP {@Minimum ISOWELL spacing to PDIFF ... 0.43
  EXT isowell pdif < 0.43 ABUT <90 SINGULAR REGION
}

E1IWDP {@Minimum ISOWELL enclosure of PDIFF ... 0.43
  ((ENC pdif isowell < 0.43 ABUT <90 SINGULAR REGION) NOT qpvhasvd) NOT hvscr_al
}

Q1IW {@ISOWELL should be contacted by PDIFF
  isowell OUTSIDE pdiff
}

E1WMIW {@Minimum DNWELLMV enclosure of ISOWELL ... 2.0
  ENC isowell dnw_mv1 < 2.0 ABUT<90 SINGULAR REGION
}

S2IWDN {@Minimum ISOWELL spacing to NDIFF ... 3.0
  ((EXT dpwd dntap < 3.0 ABUT <90 SINGULAR REGION) NOT qpvhasvd) NOT hvscr_al
}

E2IWDN {@Minimum ISOWELL enclosure of NDIFF ... 3.5
  ENC ndif dpwd < 3.5 ABUT <90 SINGULAR REGION
}

S2IWDP {@Minimum ISOWELL spacing to PDIFF ... 3.0
  EXT dpwd pdif < 3.0 ABUT <90 SINGULAR REGION
}

E2IWDP {@Fixed ISOWELL enclosure of PDIFF ... 3.0
  ((ENC pdif dpwd < 3.0 ABUT <90 SINGULAR REGION) NOT qpvhasvd) NOT hvscr_al
  NOT INSIDE EDGE (dpwd SIZE BY -3.005) pdif
}


b1_df2   = nedd182 INTERACT (nedd19 ENCLOSE nedd2)
pedb_ex1 = pedb137 ENCLOSE pedb == 2
pedc_ex1 = pedc137 ENCLOSE pedc == 2
pedd_ex1 = pedd1371 ENCLOSE pedd == 2
b1_df3   = (pedb1356 OR pedb1363) AND pedb_ex1
b1_df4   = (pedc1356 OR pedc1363) AND pedc_ex1
b1_df5   = (pedd1356 OR pedd1364) AND pedd_ex1

B1DF {@DIFF without NIMP or PIMP is not allowed
  ((b1_df1 NOT (d_dsdf OR d_dsg)) NOT ((b1_df2 OR b1_df3) OR (b1_df4 OR b1_df5))) NOT qnvc_pw
}

B4DF {@Check for dsa usage
  copy d_dsa
}

B5DF {@Check for dsb usage
  copy d_dsb
}

gate_c   = (nmx_al OR pmx_al) OR dmos2_al
ndif_scr = ndif INTERACT rnw_scr1
b2_df    = gate_c OR ndif_scr

B2DF {@DIFF crossing NTYPE_WELL or PTYPE_WELL edge is not allowed
  NOT INSIDE EDGE (INSIDE EDGE anwelft diff) b2_df
}

B3DF {@DIFF crossing NWELL edge is not allowed
  NOT INSIDE EDGE (INSIDE EDGE nwell diff ) ((pmx_al OR ped_al) OR ndif_scr)
}

W1DF {@Minimum DIFF width ... 0.22
  INT diff < 0.22 ABUT <90 SINGULAR REGION
}

W2DF {@Minimum length of coincident NDIFF/PDIFF path edge ... 0.42
  PATH LENGTH (ndiff COINCIDENT EDGE pdiff) < 0.42
}

S1DF {@Minimum DIFF spacing/notch ... 0.28
  EXT diff < 0.28 ABUT <90 SINGULAR REGION
}

E1NWDN {@Minimum NWELL enclosure of NDIFF ... 0.12
  ENC ndif nwell < 0.12 ABUT<90 SINGULAR REGION
}

E1NWDP {@Minimum NWELL enclosure of PDIFF ... 0.43
  ENC pdif nwell < 0.43 ABUT<90 SINGULAR REGION
}

S1DNNW {@Minimum NDIFF spacing to NWELL ... 0.43
  EXT ndif nwell < 0.43 ABUT <90 SINGULAR REGION
}

S1DPNW {@Minimum PDIFF spacing to NWELL ... 0.12
  EXT pdif nwell < 0.12 ABUT <90 SINGULAR REGION
}

S2DF {@Minimum NDIFF in NWELL spacing to PDIFF in PWELL ... 0.36
  EXT (ndif AND nwell) (pdif NOT anwelft) < 0.36 ABUT <90 SINGULAR REGION
}

S3DF {@Minimum PDIFF spacing ... 0.56
  x = pdif AND ((dnw_al AND anwelft) NOT anwell3)
  EXT (COIN EDGE x diff) < 0.56 ABUT <90 SPACE REGION
}

A1DF {@Minimum DIFF area ... 0.202
  AREA diff < 0.202
}


B1MV {@DIFF crossing MV edge is not allowed
  INSIDE EDGE mv diff_dg
}

B2MV {@NW_VERIFY crossing MV edge is not allowed
  INSIDE EDGE mv nwrdef
}

W1MV {@Minimum MV width ... 0.6
  INT mv < 0.6 ABUT <90 SINGULAR REGION
}

S1MV {@Minimum MV spacing/notch ... 0.86
  EXT mv < 0.86 ABUT <90 SINGULAR REGION
}

E1MVDF {@Minimum MV enclosure of DIFF ... 0.32
  ENC diff_dg mv < 0.32 ABUT <90 SINGULAR REGION
}

S1MVDF {@Minimum MV spacing to DIFF ... 0.32
  EXT mv diff_dg < 0.32 ABUT <90 SINGULAR REGION
}

S1MVGA {@Minimum MV spacing to GATE ... 0.4
  EXT mv gate < 0.4 ABUT <90 SINGULAR REGION
}

E1MVGA {@Minimum MV enclosure of GATE ... 0.4
  ENC gate mv < 0.4 ABUT <90 SINGULAR REGION
}


B1P1 {@(POLY1 and SBLK and not (HRES or MRES)) without NIMP or PIMP is not allowed
      @Note: NIMP touching PIMP under (POLY1 and SBLK and not (HRES or MRES)) is not allowed
  b1p1_1 = (poly1 AND sblk) NOT (hres OR mres)
  b1p1_1 NOT ((b1p1_1 INSIDE nimp) OR (b1p1_1 INSIDE pimp))
}

B1GA {@90 degree bent GATE is not allowed
      @Note: 
      @only valid for POLY1 over DIFF or for DIFF over POLY1 structures with > 4 vertices
  b1ga_1 = gate0 NOT ((ned44 OR nede44) AND ned2_al)
  gate_edge_p = (VERTEX b1ga_1 > 4) COIN INSIDE EDGE poly1
  gate_edge_d = (VERTEX b1ga_1 > 4) COIN INSIDE EDGE diff
  INT gate_edge_p < 0.04 ABUT==90 REGION
  EXT gate_edge_p < 0.04 ABUT==90 REGION
  INT gate_edge_d < 0.04 ABUT==90 REGION
  EXT gate_edge_d < 0.04 ABUT==90 REGION
}

B2GA {@Illegal GATE construct
      @Note:
      @GATE region has been identified as having no association with supported devices
  b2ga_1 = (gate0   NOT ne_a)   NOT pe_a1
  b2ga_2 = (b2ga_1  NOT nei_a1) NOT pei_a1
  b2ga_3 = (b2ga_2  NOT nem)    NOT pem_a
  b2ga_4 = ((b2ga_3 NOT nemi_a) NOT ne5m) NOT pemi_a
  b2ga_5 = (b2ga_4  NOT nmx_al) NOT pmx_al
  b2ga_6 = b2ga_5   NOT dmos2_al
  b2ga_7 = ((b2ga_6 NOT ndm)    NOT ndmi_a) NOT ndsmi
  b2ga_8 = (b2ga_7  NOT nnm) NOT nn
  (b2ga_8  NOT mosvc2) NOT mosvci2
}

W1P1 {@Minimum POLY1 width ... 0.18
  INT poly1 < 0.18 ABUT <90 SINGULAR REGION
}

W2P1 {@Minimum POLY1 width (for 45 degree bent GATE) ... 0.21
  INT (ANGLE gate >0 <90) < 0.21 ABUT <90 REGION
}

S1P1 {@Minimum POLY1 spacing/notch ... 0.25
  EXT poly1 < 0.25 ABUT <90 SINGULAR REGION
}

S1P1DF {@Minimum POLY1 spacing to DIFF ... 0.1
  EXT poly1 diff < 0.1 ABUT<90 SINGULAR REGION
}

E1P1GA {@Minimum POLY1 extension beyond GATE ... 0.22
  (ENC diff poly1 < 0.22 ABUT<90 SINGULAR REGION) NOT 
       (ENC ((peda2 OR pede2) AND gate) poly1 < 0.22 ABUT<90 SINGULAR REGION)
}
 
E1DFGA {@Minimum DIFF extension beyond GATE ... 0.32
  ENC poly1 diff < 0.32 ABUT<90 SINGULAR REGION
}

A1P1 {@Minimum POLY1 area ... 0.118
  AREA poly1 < 0.118
}


B1HR {@HRES overlap of DIFF is not allowed
  hres AND diff
}

B2HR {@NIMP overlap of rnp1h# (resistor body) is not allowed
  rnp1h AND nimp
}

B3HR {@PIMP overlap of HRES is not allowed
  hres AND pimp
}

B4HR {@POLY1 crossing HRES edge is not allowed
  INSIDE EDGE hres poly1
}

rnp1h_p1 = poly1 INTERACT rnp1h
B5HR {@rnp1h# terminal without NIMP is not allowed
  (rnp1h_p1 NOT rnp1h) NOT nimp
}

B6HR {@NIMP crossing HRES edge is not allowed
  INSIDE EDGE hres nimp
}

B7HR {@MET1 overlap of rnp1h# (resistor body) is not allowed
  rnp1h AND met1
}

B10HR {@rnp1h_3 crossing NTYPE_WELL or PTYPE_WELL or SUBCUT edge is not allowed
  INSIDE EDGE anwelft rnp1h_3
  INSIDE EDGE subcut rnp1h_3
}

B11HR {@rnp1h_3 overlap rnw/rnw5/rdnwmv is not allowed
  rnp1h_3 AND rnw1
  rnp1h_3 AND rdnwmv
}

W1HR {@Minimum HRES width ... 0.44
  INT hres < 0.44 ABUT <90 SINGULAR REGION
}

S1HR {@Minimum HRES spacing/notch ... 0.44
  EXT hres < 0.44 ABUT <90 SINGULAR REGION
}

S1HRDF {@Minimum HRES spacing to DIFF ... 0.32
  EXT hres diff < 0.32 ABUT <90 SINGULAR REGION
}

S1HRP1 {@Minimum HRES spacing to POLY1 ... 0.32
  EXT hres poly1 < 0.32 ABUT <90 SINGULAR REGION
}

E1HRP1 {@Minimum HRES enclosure of POLY1 ... 0.18
  ENC poly1 hres < 0.18 ABUT <90 SINGULAR REGION
}

S1HRIN {@Minimum HRES spacing to NIMP ... 0.44
  EXT hres nimp < 0.44 ABUT <90 SINGULAR REGION
}

S1HRIP {@Minimum HRES spacing to PIMP ... 0.44
  EXT hres pimp < 0.44 ABUT <90 SINGULAR REGION
}

W2HR {@Minimum rnp1h# width ... 0.42
  INT (COIN EDGE rnp1h poly1) rnp1h < 0.42 ABUT <90 REGION
}

W3HR {@Minimum rnp1h# length ... 5.0
  PATH LENGTH (rnp1h COIN EDGE poly1) < 5.0
}

E2INP1 {@Minimum NIMP extension beyond POLY1 ... 0.18
  ENC rnp1h_p1 nimp < 0.18 ABUT <90 SINGULAR REGION
}

S2INP1 {@Minimum NIMP (in SBLK) spacing to rnp1h# ... 0.18
  (rnp1h SIZE BY 0.18 INSIDE OF sblk) AND nimp
}


W1SB {@Minimum SBLK width ... 0.43
  INT sblk < 0.43 ABUT <90 SINGULAR REGION
}

S1SB {@Minimum SBLK spacing/notch ... 0.43
  EXT sblk < 0.43 ABUT <90 SINGULAR REGION
}

S1SBDF {@Minimum SBLK spacing to DIFF ... 0.22
  (EXT sblk diff < 0.22 ABUT <90 SINGULAR REGION) NOT
  (EXT (sblk AND (pedb_ex1 OR (pedc_ex1 OR pedd_ex1))) diff < 0.22 ABUT <90 SINGULAR REGION)
}

E1SBDF {@Minimum SBLK extension beyond DIFF ... 0.22
  (ENC diff sblk < 0.22 ABUT <90 SINGULAR REGION) NOT (ENC b1_df5 sblk < 0.22 ABUT <90 SINGULAR REGION)
}

S1SBP1 {@Minimum SBLK spacing to POLY1 ... 0.3
  EXT sblk poly1 < 0.3 ABUT <90 SINGULAR REGION
}

E1SBP1 {@Minimum SBLK extension beyond POLY1 ... 0.22
  ENC poly1 sblk < 0.22 ABUT <90 SINGULAR REGION
}

S1SBGA {@Minimum SBLK spacing to GATE ... 0.45
  EXT sblk gate < 0.45 ABUT <90 SINGULAR REGION
}

O1SBGA {@Minimum SBLK overlap of GATE ... 0.05
        @It is recommended to use SBLK over GATE only for IO blocks and ESD protection
  INT sblk gate < 0.05 ABUT <90 REGION
}

S1SBCT {@Minimum SBLK spacing to CONT ... 0.22
  EXT sblk cont < 0.22 ABUT <90 SINGULAR REGION
}

E1DFSB {@Minimum DIFF extension beyond SBLK ... 0.22
  (ENC sblk diff < 0.22 ABUT <90 SINGULAR REGION) NOT
  (ENC (sblk AND pedd_ex1) diff < 0.22 ABUT <90 SINGULAR REGION)
}

A1SB {@Minimum area of SBLK ... 2.0
  AREA sblk < 2.0
}


W1IN {@Minimum NIMP width ... 0.44
  INT nimp < 0.44 ABUT <90 SINGULAR REGION
}

S1IN {@Minimum NIMP spacing/notch ... 0.44
  EXT nimp < 0.44 ABUT <90 SINGULAR REGION
}

nwell43u = anwelft SIZE BY -0.43
nwell43o = anwelft SIZE BY  0.43

E1INDF {@Minimum NIMP extension beyond DIFF ... 0.18
  ENC (OUTSIDE EDGE diff nwell43u) (nimp OR (SIZE (ndif AND nwell) BY 0.18 
      INSIDE OF nwell43u)) < 0.18 ABUT <90 REGION
}

E2INDF {@Minimum NIMP extension beyond DIFF ... 0.02
  ENC diff nimp < 0.02 ABUT <90 SINGULAR REGION
}

pedd_ex4 = (pedd1355 OR pedd1363) AND pedd_ex1
O1INDF {@Minimum DIFF overlap of NIMP ... 0.23
  (INT diff nimp < 0.23 ABUT <90 REGION) NOT pedd_ex4
}

E1DNP1 {@Minimum NDIFF extension beyond POLY1 ... 0.32
  ENC (COIN EDGE gate poly1) ndif < 0.32 ABUT <90 REGION
}

S1INDP {@Minimum NIMP spacing to PDIFF ... 0.1
  EXT pdif nimp < 0.1 REGION
}

S2INDP {@Minimum NIMP spacing to PDIFF (in NTYPE1_WELL) ... 0.26
  EXT (pdif AND nwell) nimp < 0.26 REGION
}

S3INDP {@Minimum NIMP spacing to PDIFF ... 0.18
  EXT (COIN EDGE (pdif AND (nwell43o NOT nwell)) diff) nimp < 0.18 REGION
}

E1INDN {@Minimum NIMP extension beyond POLY1/NDIFF in direction of POLY1 ... 0.35
  ENC (COIN EDGE gate ndif) nimp < 0.35 ABUT <90 REGION
}

A1IN {@Minimum NIMP area ... 0.3844
  AREA nimp < 0.3844
}


B1IPIN {@PIMP overlap of NIMP is not allowed
  nimp AND pimp
}

W1IP {@Minimum PIMP width ... 0.44
  INT pimp < 0.44 ABUT <90 SINGULAR REGION
}

S1IP {@Minimum PIMP spacing/notch ... 0.44
  EXT pimp < 0.44 ABUT <90 SINGULAR REGION
}

E1IPDF {@Minimum PIMP extension beyond DIFF ... 0.18
  ENC (INSIDE EDGE diff nwell43o) (pimp OR (SIZE (pdif NOT nwell43o) BY 0.18 
      OUTSIDE OF nwell43o)) < 0.18 ABUT <90 REGION
}

pedb_ex3 = pedb1362 AND pedb_ex1
E2IPDF {@Minimum PIMP extension beyond DIFF ... 0.02
  (ENC diff pimp < 0.02 ABUT <90 SINGULAR REGION) NOT (ENC pedb_ex3 pimp < 0.02 ABUT <90 SINGULAR REGION)
}

O1IPDF {@Minimum DIFF overlap of PIMP ... 0.23
  INT diff pimp < 0.23 ABUT <90 REGION
}

E1DPP1 {@Minimum PDIFF extension beyond POLY1 ... 0.32
  ENC (COIN EDGE gate0 poly1) pdif < 0.32 ABUT <90 REGION
}

S1IPDN {@Minimum PIMP spacing to NDIFF (outside NTYPE1_WELL) ... 0.26
  EXT (ndif NOT anwelft) pimp < 0.26 REGION
}

pedd_ex3 = (pedd_ex1 AND pedd1373) AND ndif
S2IPDN {@Minimum PIMP spacing to NDIFF ... 0.1
  (EXT ndif pimp < 0.1 REGION) NOT (EXT pedd_ex3 pimp < 0.1 REGION)
}

S3IPDN {@Minimum PIMP spacing to NDIFF ... 0.18
  EXT (COIN EDGE (ndif AND (nwell NOT nwell43u)) diff) pimp < 0.18 REGION
}

E1IPDP {@Minimum PIMP extension beyond POLY1/PDIFF in direction of POLY1 ... 0.35
  ENC (COIN EDGE gate pdif) pimp < 0.35 ABUT <90 REGION
}

A1IP {@Minimum PIMP area ... 0.3844
  AREA pimp < 0.3844
}


dfcnt    = diff     AND          cont

B1CT {@CONT without NDIFF or PDIFF or POLY1 is not allowed
  (cont NOT diff) NOT poly1
  (dfcnt NOT implt) NOT d_dsc
}

B1CTGA {@CONT overlap of GATE is not allowed
  gate AND cont
}

B1CTSB {@CONT overlap of SBLK is not allowed
  sblk AND cont
}

W1CT {@Fixed CONT size ... 0.22 x 0.22
  NOT RECTANGLE cont ==0.22 BY ==0.22
}

S1CT {@Minimum CONT spacing ... 0.25
  EXT cont < 0.25 ABUT <90 SINGULAR REGION
}

S2CT {@Minimum CONT spacing ... 0.28
      @(for contact arrays containing more than 4x4 elements)
  EXT (cont NOT OUTSIDE 
  (area (SIZE ((SIZE cont BY 0.15) WITH WIDTH > 1.92) BY -0.15) > 3.1684))
  < 0.28 ABUT <90 SINGULAR REGION
}

E1DFCT {@Minimum DIFF enclosure of CONT ... 0.1
  ENC cont diff < 0.1 ABUT <90 INSIDE ALSO SINGULAR REGION
}

E1P1CT {@Minimum POLY1 enclosure of CONT ... 0.1
  ENC cont poly1 < 0.1 ABUT <90 INSIDE ALSO SINGULAR REGION
}

S1CTP1 {@Minimum CONT spacing to POLY1 ... 0.16
  EXT cont poly1 < 0.16 ABUT <90 OVERLAP SINGULAR REGION
}

S1CTDF {@Minimum CONT spacing to DIFF ... 0.2
  EXT cont diff < 0.2 ABUT <90 OVERLAP SINGULAR REGION
}

E1CTIP {@Minimum PIMP enclosure of DIFFCON ... 0.12
  ENC dfcnt pimp < 0.12 ABUT <90 INSIDE ALSO SINGULAR REGION
}

E1CTIN {@Minimum NIMP enclosure of DIFFCON ... 0.12
  ENC dfcnt nimp < 0.12 ABUT <90 INSIDE ALSO SINGULAR REGION
}


B1CTM1 {@CONT must be covered by MET1
  cont NOT met1sl
}

W1M1 {@Minimum MET1 width ... 0.23
  INT met1sl < 0.23 ABUT <90 SINGULAR REGION
}

S1M1 {@Minimum MET1 spacing/notch ... 0.23
  EXT met1sl < 0.23 ABUT <90 SINGULAR REGION
}

met1_w2 = met1sl WITH WIDTH > 2
met1_w10 = met1_w2 WITH WIDTH > 10
met1_w10_1 = SIZE met1_w10 BY 1 INSIDE OF met1sl STEP 0.2
S2M1 {@Minimum MET1 spacing to WIDE_MET1 ... 0.6
  EXT met1_w10_1 met1sl < 0.6
}

E1M1CT {@Minimum MET1 enclosure of CONT ... 0.005
  ENC cont met1sl < 0.005 ABUT<90 SINGULAR REGION
}

E2M1CT {@Minimum MET1 enclosure of CONT ... 0.06
        @(in one direction of CONT corner)
  x = ENC [cont] met1sl >=0.005 <0.06 OPPOSITE
  (ENC cont met1sl >=0.005 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

A1M1 {@Minimum MET1 area ... 0.202
  AREA met1sl < 0.202
}

B1M1 {@All MET1 tracks >35um wide to be slotted (except Pads)
  (met1_w10 NOT pad) WITH WIDTH > 35
}

W2M1 {@Minimum M1SLOT width ... 0.6
  INT m1hole < 0.6 ABUT <90 SINGULAR REGION
}

W3M1 {@Minimum M1SLOT length ... 20.0
  INT (LENGTH m1hole < 20) < 20 ABUT <90 REGION
}

S3M1 {@Minimum M1SLOT spacing/notch ... 10.0
  EXT m1hole < 10 ABUT <90 SINGULAR REGION
}

E1M1M1 {@Minimum MET1 enclosure of M1SLOT ... 10.0
        @Note: M1SLOT without MET1 is not allowed
  ENC m1hole met1 < 10 ABUT <90 SINGULAR REGION
  m1hole NOT met1_dg
}


B1V1 {@VIA1 must be covered by MET1 and MET2
  via1 NOT met1sl
  via1 NOT met2sl
}

W1V1 {@Fixed VIA1 size ... 0.26 x 0.26
  NOT RECTANGLE via1 ==0.26 BY ==0.26
}

S1V1 {@Minimum VIA1 spacing ... 0.26
  EXT via1 < 0.26 ABUT <90 SINGULAR REGION
}

E1M1V1 {@Minimum MET1 enclosure of VIA1 ... 0.01
  ENC via1 met1sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M1V1 {@Minimum MET1 enclosure of VIA1 ... 0.06
        @(in one direction of VIA1 corner)
  x = ENC [via1] met1sl >=0.01 <0.06 OPPOSITE
  (ENC via1 met1sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

E1M2V1 {@Minimum MET2 enclosure of VIA1 ... 0.01
  ENC via1 met2sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M2V1 {@Minimum MET2 enclosure of VIA1 ... 0.06
        @(in one direction of VIA1 corner)
  x = ENC [via1] met2sl >=0.01 <0.06 OPPOSITE
  (ENC via1 met2sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}


W1M2 {@Minimum MET2 width ... 0.28
  INT met2sl < 0.28 ABUT <90 SINGULAR REGION
}

S1M2 {@Minimum MET2 spacing/notch ... 0.28
  EXT met2sl < 0.28 ABUT <90 SINGULAR REGION
}

met2_w2 = met2sl WITH WIDTH > 2
met2_w10 = met2_w2 WITH WIDTH > 10
met2_w10_1 = SIZE met2_w10 BY 1 INSIDE OF met2sl STEP 0.2
S2M2 {@Minimum MET2 spacing to WIDE_MET2 ... 0.6
  EXT met2_w10_1 met2sl < 0.6
}

A1M2 {@Minimum MET2 area ... 0.202
  AREA met2sl < 0.202
}


B1M2 {@All MET2 tracks >35um wide to be slotted (except Pads)
  (met2_w10 NOT pad) WITH WIDTH > 35
}

W2M2 {@Minimum M2SLOT width ... 0.6
  INT m2hole < 0.6 ABUT <90 SINGULAR REGION
}

W3M2 {@Minimum M2SLOT length ... 20.0
  INT (LENGTH m2hole < 20) < 20 ABUT <90 REGION
}

S3M2 {@Minimum M2SLOT spacing/notch ... 10.0
  EXT m2hole < 10 ABUT <90 SINGULAR REGION
}

S1M2M1 {@Minimum M2SLOT spacing to M1SLOT ... 2.0
        @Note: M2SLOT is not allowed over M1SLOT
  EXT m2hole m1hole < 2 ABUT <90 SINGULAR REGION
  m2hole AND m1hole
}

E1M2M2 {@Minimum MET2 enclosure of M2SLOT ... 10.0
        @Note: M2SLOT without MET2 is not allowed
  ENC m2hole met2 < 10 ABUT <90 SINGULAR REGION
  m2hole NOT met2_dg
}


#IFDEF METAL3
B1V2 {@VIA2 must be covered by MET2 and MET3
  via2 NOT met2sl
  via2 NOT met3sl
}

W1V2 {@Fixed VIA2 size ... 0.26 x 0.26
  NOT RECTANGLE via2 ==0.26 BY ==0.26
}

S1V2 {@Minimum VIA2 spacing ... 0.26
  EXT via2 < 0.26 ABUT <90 SINGULAR REGION
}

E1M2V2 {@Minimum MET2 enclosure of VIA2 ... 0.01
  ENC via2 met2sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M2V2 {@Minimum MET2 enclosure of VIA2 ... 0.06
        @(in one direction of VIA2 corner)
  x = ENC [via2] met2sl >=0.01 <0.06 OPPOSITE
  (ENC via2 met2sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

E1M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.01
  ENC via2 met3sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.06
        @(in one direction of VIA2 corner)
  x = ENC [via2] met3sl >=0.01 <0.06 OPPOSITE
  (ENC via2 met3sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}


W1M3 {@Minimum MET3 width ... 0.28
  INT met3sl < 0.28 ABUT <90 SINGULAR REGION
}

S1M3 {@Minimum MET3 spacing/notch ... 0.28
  EXT met3sl < 0.28 ABUT <90 SINGULAR REGION
}

met3_w2 = met3sl WITH WIDTH > 2
met3_w10 = met3_w2 WITH WIDTH > 10
met3_w10_1 = SIZE met3_w10 BY 1 INSIDE OF met3sl STEP 0.2
S2M3 {@Minimum MET3 spacing to WIDE_MET3 ... 0.6
  EXT met3_w10_1 met3sl < 0.6
}

A1M3 {@Minimum MET3 area ... 0.202
  AREA met3sl < 0.202
}


B1M3 {@All MET3 tracks >35um wide to be slotted (except Pads)
  (met3_w10 NOT pad) WITH WIDTH > 35
}

W2M3 {@Minimum M3SLOT width ... 0.6
  INT m3hole < 0.6 ABUT <90 SINGULAR REGION
}

W3M3 {@Minimum M3SLOT length ... 20.0
  INT (LENGTH m3hole < 20) < 20 ABUT <90 REGION
}

S3M3 {@Minimum M3SLOT spacing/notch ... 10.0
  EXT m3hole < 10 ABUT <90 SINGULAR REGION
}

S1M3M2 {@Minimum M3SLOT spacing to M2SLOT ... 2.0
        @Note: M3SLOT is not allowed over M2SLOT
  EXT m3hole m2hole < 2 ABUT <90 SINGULAR REGION
  m3hole AND m2hole
}

E1M3M3 {@Minimum MET3 enclosure of M3SLOT ... 10.0
        @Note: M3SLOT without MET3 is not allowed
  ENC m3hole met3 < 10 ABUT <90 SINGULAR REGION
  m3hole NOT met3_dg
}
#ENDIF


#IFDEF MIDMET
W1VT {@Fixed VIATP size ... 0.36 x 0.36
  NOT RECTANGLE viatp ==0.36 BY ==0.36
}

S1VT {@Minimum VIATP spacing ... 0.35
  EXT viatp < 0.35 ABUT <90 SINGULAR REGION
}

B1VT {@VIATP must be covered by METTP
  viatp NOT mettsl
}

E1MTVT {@Minimum METTP enclosure of VIATP ... 0.09
  ENC viatp mettsl < 0.09 ABUT <90 SINGULAR REGION
}

#IFDEF METAL5
B1VTM5 {@VIATP must be covered by MET5
  viatp NOT met5sl
}

E1M5VT {@Minimum MET5 enclosure of VIATP ... 0.01
  ENC viatp met5sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M5VT {@Minimum MET5 enclosure of VIATP ... 0.06
        @(in one direction of VIATP corner)
  x = ENC [viatp] met5sl >=0.01 <0.06 OPPOSITE
  (ENC viatp met5sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

S1MTM5 {@Minimum MTPSLOT spacing to M5SLOT ... 2.0
        @Note: MTPSLOT is not allowed over M5SLOT
  EXT mthole m5hole < 2 ABUT <90 SINGULAR REGION
  mthole AND m5hole
}

#ELSE
#IFDEF METAL4
B1VTM4 {@VIATP must be covered by MET4
  viatp NOT met4sl
}

E1M4VT {@Minimum MET4 enclosure of VIATP ... 0.01
  ENC viatp met4sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M4VT {@Minimum MET4 enclosure of VIATP direction ... 0.06
        @(in one direction of VIATP corner)
  x = ENC [viatp] met4sl >=0.01 <0.06 OPPOSITE
  (ENC viatp met4sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

S1MTM4 {@Minimum MTPSLOT spacing to M4SLOT ... 2.0
        @Note: MTPSLOT is not allowed over M4SLOT
  EXT mthole m4hole < 2 ABUT <90 SINGULAR REGION
  mthole AND m4hole
}

#ELSE
#IFDEF METAL3
B1VTM3 {@VIATP must be covered by MET3
  viatp NOT met3sl
}

E1M3VT {@Minimum MET3 enclosure of VIATP ... 0.01
  ENC viatp met3sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M3VT {@Minimum MET3 enclosure of VIATP ... 0.06
        @(in one direction of VIATP corner)
  x = ENC [viatp] met3sl >=0.01 <0.06 OPPOSITE
  (ENC viatp met3sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

S1MTM3 {@Minimum MTPSLOT spacing to M3SLOT ... 2.0
        @Note: MTPSLOT is not allowed over M3SLOT
  EXT mthole m3hole < 2 ABUT <90 SINGULAR REGION
  mthole AND m3hole
}

#ELSE
B1VTM2 {@VIATP must be covered by MET2
  viatp NOT met2sl
}

E1M2VT {@Minimum MET2 enclosure of VIATP ... 0.01
  ENC viatp met2sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M2VT {@Minimum MET2 enclosure of VIATP ... 0.06
        @(in one direction of VIATP corner)
  x = ENC [viatp] met2sl >=0.01 <0.06 OPPOSITE
  (ENC viatp met2sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

S1MTM2 {@Minimum MTPSLOT spacing to M2SLOT ... 2.0
        @Note: MTPSLOT is not allowed over M2SLOT
  EXT mthole m2hole < 2 ABUT <90 SINGULAR REGION
  mthole AND m2hole
}

#ENDIF
#ENDIF
#ENDIF


W1MT {@Minimum METTP width ... 0.44
  INT mettsl < 0.44 ABUT <90 SINGULAR REGION
}

S1MT {@Minimum METTP spacing/notch ... 0.46
  EXT mettsl < 0.46 ABUT <90 SINGULAR REGION
}

mett_w2 = mettsl WITH WIDTH > 2
mett_w10 = mett_w2 WITH WIDTH > 10
mett_w10_1 = SIZE mett_w10 BY 1 INSIDE OF mettsl STEP 0.2
S2MT {@Minimum METTP spacing to WIDE_METTP ... 0.6
  EXT mett_w10_1 mettsl < 0.6
}

A1MT {@Minimum METTP area ... 0.562
  AREA mettsl < 0.562
}


B1MT {@All METTP tracks >35um wide to be slotted (except Pads)
  (mett_w10 NOT pad) WITH WIDTH > 35
}

W2MT {@Minimum MTPSLOT width ... 0.6
  INT mthole < 0.6 ABUT <90 SINGULAR REGION
}

W3MT {@Minimum MTPSLOT length ... 20.0
  INT (LENGTH mthole < 20) < 20 ABUT <90 REGION
}

S3MT {@Minimum MTPSLOT spacing/notch ... 10.0
  EXT mthole < 10 ABUT <90 SINGULAR REGION
}

E1MTMT {@Minimum METTP enclosure of MTPSLOT ... 10.0
        @Note: MTPSLOT without METTP is not allowed
  ENC mthole mettp < 10 ABUT<90 SINGULAR REGION
  mthole NOT mettp_dg
}
#ENDIF


capm_s   = (SIZE     capm       BY  2.5) NOT capm
capmh_s  = (SIZE     capmh      BY  2.5) NOT capmh

#IFDEF METAL5
bm       = met5sl   INTERACT     capm
bm_v     = (capm_s  AND bm) INTERACT capm
bmh      = met5sl   INTERACT     capmh
bmh_v    = (capmh_s AND bmh) INTERACT capmh
vian     = ((bm_v   OR  bmh_v) OR (capm OR capmh)) AND via4
#ELSE
#IFDEF METAL4
bm       = met4sl   INTERACT     capm
bm_v     = (capm_s  AND bm) INTERACT capm
bmh      = met4sl   INTERACT     capmh
bmh_v    = (capmh_s AND bmh) INTERACT capmh
vian     = ((bm_v   OR  bmh_v) OR (capm OR capmh)) AND via3
#ELSE
#IFDEF METAL3
bm       = met3sl   INTERACT     capm
bm_v     = (capm_s  AND bm) INTERACT capm
bmh      = met3sl   INTERACT     capmh
bmh_v    = (capmh_s AND bmh) INTERACT capmh
vian     = ((bm_v   OR  bmh_v) OR (capm OR capmh)) AND via2
#ELSE
bm       = met2sl   INTERACT     capm
bm_v     = (capm_s  AND bm) INTERACT capm
bmh      = met2sl   INTERACT     capmh
bmh_v    = (capmh_s AND bmh) INTERACT capmh
vian     = ((bm_v   OR  bmh_v) OR (capm OR capmh)) AND via1
#ENDIF
#ENDIF
#ENDIF


#IFDEF METAL4
B1V3 {@VIA3 must be covered by MET3 and MET4
  via3 NOT met3sl
  via3 NOT met4sl
}

W1V3 {@Fixed VIA3 size ... 0.26 x 0.26
  NOT RECTANGLE via3 ==0.26 BY ==0.26
}

S1V3 {@Minimum VIA3 spacing ... 0.26
  EXT via3 < 0.26 ABUT <90 SINGULAR REGION
}

E1M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.01
  ENC via3 met3sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.06
        @(in one direction of VIA3 corner)
  x = ENC [via3] met3sl >=0.01 <0.06 OPPOSITE
  (ENC via3 met3sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

E1M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.01
  ENC via3 met4sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.06
        @(in one direction of VIA3 corner)
  x = ENC [via3] met4sl >=0.01 <0.06 OPPOSITE
  (ENC via3 met4sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

W1M4 {@Minimum MET4 width ... 0.28
  INT met4sl < 0.28 ABUT <90 SINGULAR REGION
}

S1M4 {@Minimum MET4 spacing/notch ... 0.28
  EXT met4sl < 0.28 ABUT <90 SINGULAR REGION
}

met4_w2 = met4sl WITH WIDTH > 2
met4_w10 = met4_w2 WITH WIDTH > 10
met4_w10_1 = SIZE met4_w10 BY 1 INSIDE OF met4sl STEP 0.2
S2M4 {@Minimum MET4 spacing to WIDE_MET4 ... 0.6
  EXT met4_w10_1 met4sl < 0.6
}

A1M4 {@Minimum MET4 area ... 0.202
  AREA met4sl < 0.202
}

B1M4 {@All MET4 tracks >35um wide to be slotted (except Pads)
  (met4_w10 NOT pad) WITH WIDTH > 35
}

W2M4 {@Minimum M4SLOT width ... 0.6
  INT m4hole < 0.6 ABUT <90 SINGULAR REGION
}

W3M4 {@Minimum M4SLOT length ... 20.0
  INT (LENGTH m4hole < 20) < 20 ABUT <90 REGION
}

S3M4 {@Minimum M4SLOT spacing/notch ... 10.0
  EXT m4hole < 10 ABUT <90 SINGULAR REGION
}

S1M4M3 {@Minimum M4SLOT spacing to M3SLOT ... 2.0
        @Note: M4SLOT is not allowed over M3SLOT
  EXT m4hole m3hole < 2 ABUT <90 SINGULAR REGION
  m4hole AND m3hole
}

E1M4M4 {@Minimum MET4 enclosure of M4SLOT ... 10.0
        @Note: M4SLOT without MET4 is not allowed
  ENC m4hole met4 < 10 ABUT <90 SINGULAR REGION
  m4hole NOT met4_dg
}
#ENDIF


#IFDEF METAL5
B1V4 {@VIA4 must be covered by MET4 and MET5
  via4 NOT met4sl
  via4 NOT met5sl
}

W1V4 {@Fixed VIA4 size ... 0.26 x 0.26
  NOT RECTANGLE via4 ==0.26 BY ==0.26
}

S1V4 {@Minimum VIA4 spacing ... 0.26
  EXT via4 < 0.26 ABUT <90 SINGULAR REGION
}

E1M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.01
  ENC via4 met4sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.06
        @(in one direction of VIA4 corner)
  x = ENC [via4] met4sl >=0.01 <0.06 OPPOSITE
  (ENC via4 met4sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

E1M5V4 {@Minimum MET5 enclosure of VIA4 ... 0.01
  ENC via4 met5sl < 0.01 ABUT <90 SINGULAR REGION
}

E2M5V4 {@Minimum MET5 enclosure of VIA4 ... 0.06
        @(in one direction of VIA4 corner)
  x = ENC [via4] met5sl >=0.01 <0.06 OPPOSITE
  (ENC via4 met5sl >=0.01 <0.06 REGION OPPOSITE) WITH EDGE
    (INT [x]<0.1 ABUT==90 INTERSECTING ONLY)
}

W1M5 {@Minimum MET5 width ... 0.28
  INT met5sl < 0.28 ABUT <90 SINGULAR REGION
}

S1M5 {@Minimum MET5 spacing/notch ... 0.28
  EXT met5sl < 0.28 ABUT <90 SINGULAR REGION
}

met5_w2 = met5sl WITH WIDTH > 2
met5_w10 = met5_w2 WITH WIDTH > 10
met5_w10_1 = SIZE met5_w10 BY 1 INSIDE OF met5sl STEP 0.2
S2M5 {@Minimum MET5 spacing to WIDE_MET5 ... 0.6
  EXT met5_w10_1 met5sl < 0.6
}

A1M5 {@Minimum MET5 area ... 0.202
  AREA met5sl < 0.202
}

B1M5 {@All MET5 tracks >35um wide to be slotted (except Pads)
  (met5_w10 NOT pad) WITH WIDTH > 35
}

W2M5 {@Minimum M5SLOT width ... 0.6
  INT m5hole < 0.6 ABUT <90 SINGULAR REGION
}

W3M5 {@Minimum M5SLOT length ... 20.0
  INT (LENGTH m5hole < 20) < 20 ABUT <90 REGION
}

S3M5 {@Minimum M5SLOT spacing/notch ... 10.0
  EXT m5hole < 10 ABUT <90 SINGULAR REGION
}

S1M5M4 {@Minimum M5SLOT spacing to M4SLOT ... 2.0
        @Note: M5SLOT is not allowed over M4SLOT
  EXT m5hole m4hole < 2 ABUT <90 SINGULAR REGION
  m5hole AND m4hole
}

E1M5M5 {@Minimum MET5 enclosure of M5SLOT ... 10.0
        @Note: M5SLOT without MET5 is not allowed
  ENC m5hole met5 < 10 ABUT <90 SINGULAR REGION
  m5hole NOT met5_dg
}
#ENDIF

#IFDEF THKMET
W1VL {@Fixed VIATPL size ... 0.50 x 0.50
  NOT RECTANGLE viatpl ==0.5 BY ==0.5
}
 
S1VL {@Minimum VIATPL spacing ... 0.45
  EXT viatpl < 0.45 ABUT <90 SINGULAR REGION
}
 
B1VL {@VIATPL must be covered by METTPL
  viatpl NOT mettpl
}

E1MLVL {@Minimum METTPL enclosure of VIATPL ... 0.5
  ENC viatpl mettpl < 0.5 ABUT <90 SINGULAR REGION
}
 
metl_w5 = mettpl WITH WIDTH > 5
metl_w10 = metl_w5 WITH WIDTH > 10
B1ML {@METTPL tracks >35.0um are not allowed (except Pads)
  (metl_w10 NOT pad) WITH WIDTH > 35
}
 
W1ML {@Minimum METTPL width ... 3.0
  INT mettpl < 3.0 ABUT <90 SINGULAR REGION
}
 
S1ML {@Minimum METTPL spacing/notch ... 2.5
  EXT mettpl < 2.5 ABUT <90 SINGULAR REGION
}
 
A1ML {@Minimum METTPL area ... 10.0
  AREA mettpl < 10
}

A2ML {@Minimum METTPL enclosed area ... 18.0
  AREA ((HOLES mettpl) NOT mettpl) < 18
}

#IFDEF MIDMET
B1VLMT {@VIATPL must be covered by METTP
  viatpl NOT mettsl
}

E1MTVL {@Minimum METTP enclosure of VIATPL ... 0.5
  ENC viatpl mettsl < 0.5 ABUT <90 SINGULAR REGION
}

#ELSE
#IFDEF METAL5
B1VLM5 {@VIATPL must be covered by MET5
  viatpl NOT met5sl
}

E1M5VL {@Minimum MET5 enclosure of VIATPL ... 0.5
  ENC viatpl met5sl < 0.5 ABUT <90 SINGULAR REGION
}

#ELSE
#IFDEF METAL4
B1VLM4 {@VIATPL must be covered by MET4
  viatpl NOT met4sl
}

E1M4VL {@Minimum MET4 enclosure of VIATPL ... 0.5
  ENC viatpl met4sl < 0.5 ABUT <90 SINGULAR REGION
}

#ELSE
#IFDEF METAL3
B1VLM3 {@VIATPL must be covered by MET3
  viatpl NOT met3sl
}

E1M3VL {@Minimum MET3 enclosure of VIATPL ... 0.5
  ENC viatpl met3sl < 0.5 ABUT <90 SINGULAR REGION
}

#ELSE
B1VLM2 {@VIATPL must be covered by MET2
  viatpl NOT met2sl
}

E1M2VL {@Minimum MET2 enclosure of VIATPL ... 0.5
  ENC viatpl met2sl < 0.5 ABUT <90 SINGULAR REGION
}

#ENDIF
#ENDIF
#ENDIF
#ENDIF
#ENDIF


W4P1 {@Minimum GATE length ... 0.18
  INT gate < 0.18 ABUT <90 SINGULAR REGION
}

W3DF {@Minimum GATE width ... 0.22
  INT (gate INSIDE EDGE poly1) gate < 0.22 ABUT <90 REGION
}

B3GA {@Only rectangular GATE inside PWBLK is allowed
  NOT RECTANGLE nngate1
}

W5P1 {@Minimum GATE length ... 1.0
  INT (INSIDE EDGE nngate1 diff) nngate1 < 1.0 ABUT <90 REGION
}

W6DF {@Minimum GATE width ... 1.0
  INT nngate1 < 1.0 ABUT <90 SINGULAR REGION
}

W6P1 {@Minimum GATE length ... 0.5
  INT (INSIDE EDGE nem diff) nem < 0.5 ABUT <90 REGION
  INT (INSIDE EDGE nemi_a diff) nemi_a < 0.5 ABUT <90 REGION
  INT (INSIDE EDGE pem_a diff) pem_a < 0.5 ABUT <90 REGION
  INT (INSIDE EDGE pemi_a diff) pemi_a < 0.5 ABUT <90 REGION
}

B6GA {@Only rectangular GATE is allowed
  NOT RECTANGLE mosvc2
  NOT RECTANGLE mosvci2
}

W38GA {@Minimum GATE length ... 2.0
  INT (INSIDE EDGE mosvc2 diff) mosvc2 < 2.0 ABUT <90 REGION
  INT (INSIDE EDGE mosvci2 diff) mosvci2 < 2.0 ABUT <90 REGION
}

W39GA {@Minimum GATE width ... 2.0
  INT mosvc2 < 2.0 ABUT <90 SINGULAR REGION
  INT mosvci2 < 2.0 ABUT <90 SINGULAR REGION
}


B1DN {@rdn/rdn5 inside ISOWELL, DPB, PD2 or PDD is not allowed
  (rdn_a AND apwell1) NOT (((rdn_gi OR rdnm_gi) OR rdnm_dpi) AND pwiso)
}

B2DN {@rdn/rdn5 overlap of DEPL or SCI is not allowed
  rdn_a AND depl
  rdn_a AND sci
}

W5DF {@Minimum rdn/rdn5, rdp/rdp5 width ... 0.42
  INT (COIN EDGE rdn_a diff) rdn_a < 0.42 ABUT <90 REGION
  INT (COIN EDGE rdp_a diff) rdp_a < 0.42 ABUT <90 REGION
}


B1NW {@NW_VERIFY overlap of DIFF is not allowed
  nwrdef AND diff
}

B2NW {@NW_VERIFY overlap of DNWELL or VDNWELL is not allowed
  nwrdef AND dnw_all
}

W2NW {@Minimum rnw/rnw5 width ... 2.0
  INT (COIN EDGE rnw1 nwell) rnw1 < 2.0 ABUT <90 REGION
}


B4WM {@DNWMV_VERIFY overlap of NWELL, DNWELL# or DNWELLNVM is not allowed
  dnmrdef AND nwell
  dnmrdef AND dnw_al2
  dnmrdef AND dnw_nvm
}

B5WM {@DNWMV_VERIFY overlap of DIFF is not allowed
  dnmrdef AND diff
}

B9WM {@DNWMV_VERIFY overlap of ISOWELL, PDD, DPB, PD2 or DPC is not allowed
  dnmrdef AND apwell
}

W2WM {@Minimum rdnwmv width ... 2.0
  INT (COIN EDGE rdnwmv dnw_mv) rdnwmv < 2.0 ABUT <90 REGION
}


W3P1 {@Minimum rnp1#/rpp1# width ... 0.42
  INT (COIN EDGE rnp1 poly1) rnp1 < 0.42 ABUT <90 REGION
  INT (COIN EDGE rpp1 poly1) rpp1 < 0.42 ABUT <90 REGION
}

E1INP1 {@Minimum NIMP extension beyond rnp1# ... 0.18
  ENC rnp1 nimp < 0.18 ABUT <90 SINGULAR REGION
}

E1IPP1 {@Minimum PIMP extension beyond rpp1# or rpp1s# ... 0.18
  ENC rpp1 pimp < 0.18 ABUT <90 SINGULAR REGION
  ENC rpp1s pimp < 0.18 ABUT <90 SINGULAR REGION
}

S1INP1 {@Minimum NIMP spacing to rpp1# or rpp1s# ... 0.26
  EXT rpp1 nimp < 0.26 ABUT <90 SINGULAR REGION
  EXT rpp1s nimp < 0.26 ABUT <90 SINGULAR REGION
}

S1IPP1 {@Minimum PIMP spacing to rnp1# ... 0.26
  EXT rnp1 pimp < 0.26 ABUT <90 SINGULAR REGION
}

B2CT {@CONT is not allowed within rpp1s#
  rpp1s AND cont
}

B5P1 {@rnp1_3 crossing NTYPE_WELL or PTYPE_WELL or SUBCUT edge is not allowed
  INSIDE EDGE anwelft rnp1_3
  INSIDE EDGE subcut rnp1_3
}

B6P1 {@rnp1_3 overlap rnw/rnw5/rdnwmv is not allowed
  rnp1_3 AND rnw1
  rnp1_3 AND rdnwmv
}

B7P1 {@rpp1_3 crossing NTYPE_WELL or PTYPE_WELL or SUBCUT edge is not allowed
  INSIDE EDGE anwelft rpp1_3
  INSIDE EDGE subcut rpp1_3
}

B8P1 {@rpp1_3 overlap rnw/rnw5/rdnwmv is not allowed
  rpp1_3 AND rnw1
  rpp1_3 AND rdnwmv
}

B9P1 {@rpp1s_3 crossing NTYPE_WELL or PTYPE_WELL or SUBCUT edge is not allowed
  INSIDE EDGE anwelft rpp1s_3
  INSIDE EDGE subcut rpp1s_3
}

B10P1 {@rpp1s_3 overlap rnw/rnw5/rdnwmv is not allowed
  rpp1s_3 AND rnw1
  rpp1s_3 AND rdnwmv
}


B2M1 {@CONT or VIA1 are not allowed within rm1
  rm1 AND cont
  rm1 AND via1
}

B2M2 {@VIA1 is not allowed within rm2
  rm2 AND via1
}

#IFDEF METAL3
B4M2 {@VIA2 is not allowed within rm2
  rm2 AND via2
}
#ELSE
#IFDEF MIDMET
B3M2 {@VIATP is not allowed within rm2
  rm2 AND viatp
}
#ELSE
#IFDEF THKMET
B5M2 {@VIATPL is not allowed within rm2
  rm2 AND viatpl
}
#ENDIF
#ENDIF
#ENDIF

#IFDEF METAL3
B2M3 {@VIA2 is not allowed within rm3
  rm3 AND via2
}
#IFDEF METAL4
B4M3 {@VIA3 is not allowed within rm3
  rm3 AND via3
}
#ELSE
#IFDEF MIDMET
B3M3 {@VIATP is not allowed within rm3
  rm3 AND viatp
}
#ELSE
#IFDEF THKMET
B5M3 {@VIATPL is not allowed within rm3
  rm3 AND viatpl
}
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFDEF METAL4
B2M4 {@VIA3 is not allowed within rm4
  rm4 AND via3
}
#IFDEF METAL5
B4M4 {@VIA4 is not allowed within rm4
  rm4 AND via4
}
#ELSE
#IFDEF MIDMET
B3M4 {@VIATP is not allowed within rm4
  rm4 AND viatp
}
#ELSE
#IFDEF THKMET
B5M4 {@VIATPL is not allowed within rm4
  rm4 AND viatpl
}
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFDEF METAL5
B2M5 {@VIA4 is not allowed within rm5
  rm5 AND via4
}
#IFDEF METAL6
#ELSE
#IFDEF MIDMET
B3M5 {@VIATP is not allowed within rm5
  rm5 AND viatp
}
#ELSE
#IFDEF THKMET
B5M5 {@VIATPL is not allowed within rm5
  rm5 AND viatpl
}
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFDEF MIDMET
B2MT {@VIATP is not allowed within rmtp
  rmtp AND viatp
}
#IFDEF THKMET
B3MT {@VIATPL is not allowed within rmtp
  rmtp AND viatpl
}
#ENDIF
#ENDIF

#IFDEF THKMET
B2ML {@VIATPL is not allowed within rmtpl
  rmtpl AND viatpl
}
#ENDIF


B2P1 {@pfuse overlap of MET1, MET2, MET3, MET4, MET5, METTP or METTPL is not allowed
  pfuse AND met1sl
  pfuse AND met2sl
#IFDEF METAL3
  pfuse AND met3sl
#ENDIF
#IFDEF METAL4
  pfuse AND met4sl
#ENDIF
#IFDEF METAL5
  pfuse AND met5sl
#ENDIF
#IFDEF THKMET
  pfuse AND mettpl
#ENDIF
#IFDEF MIDMET
  pfuse AND mettsl
#ENDIF
}

B3P1 {@pfuse overlap of SBLK or DIFF is not allowed
  pfuse AND sblk
  pfuse AND diff
}

E1NWP1 {@Fixed NWELL enclosure of pfuse ... 1.7
  pfuse_nw1 = nwell INTERACT pfuse
  pfuse_nw2 = pfuse SIZE BY  1.7
  pfuse_nw1 XOR pfuse_nw2
}

E1BAP1 {@Minimum BLKALL enclosure of pfuse ... 1.7
  ENC pfuse blkall < 1.7 ABUT <90 SINGULAR REGION
}

E3INP1 {@Minimum NIMP enclosure of pfuse ... 0.3
  ENC pfuse nimp < 0.3 ABUT <90 SINGULAR REGION
}

B4P1 {@pfuse without NIMP and BLKALL is not allowed
  pfuse NOT nimp
  pfuse NOT blkall
}

S1DFP1 {@Minimum DIFF spacing to pfuse ... 2.0
  EXT (COIN EDGE pfuse poly1) diff < 2.0 ABUT <90 REGION
}

S2P1 {@Minimum POLY1 spacing to pfuse ... 2.0
  EXT (COIN EDGE pfuse poly1) poly1 < 2.0 ABUT <90 REGION
}

S2SBP1 {@Minimum SBLK spacing to pfuse ... 2.0
  EXT (COIN EDGE pfuse poly1) sblk < 2.0 ABUT <90 REGION
}

S1M1P1 {@Minimum MET1 spacing to pfuse ... 0.8
  EXT (COIN EDGE pfuse poly1) met1sl < 0.8 ABUT <90 REGION
}

S1M2P1 {@Minimum MET2 spacing to pfuse ... 0.8
  EXT (COIN EDGE pfuse poly1) met2sl < 0.8 ABUT <90 REGION
}

#IFDEF METAL3
S1M3P1 {@Minimum MET3 spacing to pfuse ... 1.7
  EXT (COIN EDGE pfuse poly1) met3sl < 1.7 ABUT <90 REGION
}
#ENDIF

#IFDEF METAL4
S1M4P1 {@Minimum MET4 spacing to pfuse ... 1.7
  EXT (COIN EDGE pfuse poly1) met4sl < 1.7 ABUT <90 REGION
}
#ENDIF

#IFDEF METAL5
S1M5P1 {@Minimum MET5 spacing to pfuse ... 1.7
  EXT (COIN EDGE pfuse poly1) met5sl < 1.7 ABUT <90 REGION
}
#ENDIF

#IFDEF MIDMET
S1MTP1 {@Minimum METTP spacing to pfuse ... 1.7
  EXT (COIN EDGE pfuse poly1) mettsl < 1.7 ABUT <90 REGION
}
#ENDIF

#IFDEF THKMET
S1MLP1 {@Minimum METTPL spacing to pfuse ... 1.7
  EXT (COIN EDGE pfuse poly1) mettpl < 1.7 ABUT <90 REGION
}
#ENDIF


B1LV {@LVT overlap of MV, VDNWELL, NDD, ND2, PDD, PD2, DNC or DPC is not allowed
  lvt AND mv
  lvt AND vdnwell
  lvt AND ndd
  lvt AND nd2
  lvt AND pdd
  lvt AND pd2
  lvt AND dnc
  lvt AND dpc
}

B2LV {@LVT overlap of rnw, rdn, rdp, qpva, qpvb or qpvc is not allowed
  rnw1 AND lvt
  rdn AND lvt
  rdni AND lvt
  rdp AND lvt
  rdpi AND lvt
  qpva AND lvt
  qpvb AND lvt
  qpvc AND lvt
}

lvtgate = lvt AND gate
E1LVGA {@Minimum LVT enclosure of GATE ... 0.35
  ENC lvtgate lvt < 0.35 ABUT <90 SINGULAR REGION
  INSIDE EDGE lvt gate
  COIN EDGE lvt gate
}

E2LVGA {@Minimum LVT enclosure of GATE (in GATE length direction) ... 0.46
  ENC (INSIDE EDGE lvtgate diff) lvt < 0.46 ABUT <90 REGION
}

S1LVGA {@Minimum LVT spacing to GATE ... 0.35
  EXT lvt gate < 0.35 ABUT <90 SINGULAR REGION
}

S2LVGA {@Minimum LVT spacing to GATE (in GATE length direction) ... 0.46
  EXT lvt (INSIDE EDGE gate diff) < 0.46 ABUT <90 REGION
}

S1LVNX {@Minimum LVT spacing to NDD ... 3.0
  EXT lvt ndd < 3.0 ABUT <90 SINGULAR REGION
}

S1LVNY {@Minimum LVT spacing to ND2 ... 3.0
  EXT lvt nd2 < 3.0 ABUT <90 SINGULAR REGION
}

S1LVPT {@Minimum LVT spacing to PDD ... 3.0
  EXT lvt pdd < 3.0 ABUT <90 SINGULAR REGION
}

S1LVPY {@Minimum LVT spacing to PD2 ... 3.0
  EXT lvt pd2 < 3.0 ABUT <90 SINGULAR REGION
}

S1LVWM {@Minimum LVT spacing to DNWELLMV ... 3.5
  EXT lvt dnw_mv1 < 3.5 ABUT <90 SINGULAR REGION
}

S1LVWN {@Minimum LVT spacing to DNWELLNVM ... 3.5
  EXT lvt dnw_nvm < 3.5 ABUT <90 SINGULAR REGION
}

S1LVWA {@Minimum LVT spacing to DNWELL15 ... 10.0
  EXT lvt dnwel15 < 10.0 ABUT <90 SINGULAR REGION
}

S1LVWB {@Minimum LVT spacing to DNWELL25 ... 10.0
  EXT lvt dnwel25 < 10.0 ABUT <90 SINGULAR REGION
}

S1LVWD {@Minimum LVT spacing to DNWELL60 ... 10.0
  EXT lvt dnwel60 < 10.0 ABUT <90 SINGULAR REGION
}

S1LVWV {@Minimum LVT spacing to VDNWELL ... 10.0
  EXT lvt vdnwell < 10.0 ABUT <90 SINGULAR REGION
}


B1DL {@DEPL is only allowed in PWELL2
  depl NOT pwell_2
}

B2DL {@DEPL overlap of DPB, DPC or PDD is not allowed
  depl AND dpb
  depl AND dpc
  depl AND pdd
}

W1DL {@Minimum DEPL width ... 0.6
  INT depl < 0.6 ABUT <90 SINGULAR REGION
}

S1DL {@Minimum DEPL spacing/notch ... 0.6
  EXT depl < 0.6 ABUT <90 SINGULAR REGION
}

S1DLGA {@Minimum DEPL spacing to GATE ... 0.2
  EXT depl gate < 0.2 ABUT <90 SINGULAR REGION
}

E1DLGA {@Minimum DEPL extension beyond GATE ... 0.35
  ENC ndgate depl < 0.35 ABUT <90 SINGULAR REGION
  INSIDE EDGE depl gate
  COIN EDGE depl gate
}


W1GA {@Minimum GATE length  ... 0.7
  INT (INSIDE EDGE ndgate diff) ndgate < 0.7 ABUT <90 REGION
}

W2GA {@Minimum GATE width ... 0.44
  INT ndgate < 0.44 ABUT <90 SINGULAR REGION
}


B4MV {@MV overlap of DNWELL60 is not allowed
  (dnwel60 INTERACT qnva) AND mv
}


B1WA {@DNWELL15 must be surrounded by a GUARD RING
  dnwelri  = dnwel15 SIZE BY 1.76
  dnwelro  = dnwel15 SIZE BY 2.18
  ((dnwelro NOT dnwelri) NOT (mv AND pdif)) WITH WIDTH >=0.005
}

B3WA {@NWELL crossing DNWELL15 edge is not allowed
  INSIDE EDGE dnwel15 nwell
}

B4WA {@POLY1 crossing DNWELL15 edge is not allowed
  INSIDE EDGE dnwel15 poly1
}

B5WA {@PDD crossing DNWELL15 edge is not allowed
  INSIDE EDGE dnwel15 pdd
}

W1WA {@Minimum DNWELL15 width ... 6.44
  INT dnwel15 < 6.44 ABUT <90 SINGULAR REGION
}

S1WA {@Minimum DNWELL15 spacing/notch ... 8.0
  EXT dnwel15 < 8.0 ABUT <90 SINGULAR REGION
}

S1WAWB {@Minimum DNWELL15 spacing to DNWELL25 ... 8.0
  EXT dnwel15 dnwel25 < 8.0 ABUT <90 SINGULAR REGION
}

S1WAWD {@Minimum DNWELL15 spacing to DNWELL60 ... 10.0
  EXT dnwel15 dnwel60 < 10.0 ABUT <90 SINGULAR REGION
}

S1WANW {@Minimum DNWELL15 spacing to NWELL ... 8.0
  EXT dnwel15 nwell < 8.0 ABUT <90 SINGULAR REGION
}

S1WADN {@Minimum DNWELL15 spacing to NDIFF ... 2.62
  EXT dnwel15 ndif < 2.62 ABUT <90 SINGULAR REGION
}

S1WAP1 {@Minimum DNWELL15 spacing to POLY1 ... 3.11
  EXT dnwel15 poly1 < 3.11 ABUT<90 SINGULAR REGION
}

S1WADP {@Fixed DNWELL15 spacing to PDIFF ... 1.76
  EXT dnwel15 pdif < 1.76 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (dnwel15 SIZE BY 1.765) pdif
}

E1WANW {@Minimum DNWELL15 enclosure of NWELL ... 2.15
  ENC ((nwell NOT (dnc OR dza_279)) COIN EDGE nwell) dnwel15 < 2.15 ABUT <90 REGION
  ENC nwell dnwel15 < 0.005 ABUT <90 SINGULAR REGION
}

E1WAWM {@Minimum DNWELL15 enclosure of DNWELLMV ... 1.5
  ENC dnw_mv dnwel15 < 1.5 ABUT <90 SINGULAR REGION
}

E1WAP1 {@Minimum DNWELL15 enclosure of POLY1 ... 2.45
  (ENC poly1 dnwel15 < 2.45 ABUT<90 SINGULAR REGION) NOT
       (ENC (poly1 ENCLOSE nede) dnwel15 < 2.45 ABUT<90 SINGULAR REGION)
}

E1PBWA {@Fixed PWBLK enclosure of DNWELL15 ... 1.64
  dnwelri  = dnwel15 SIZE BY 1.64
  dnwelro  = dnwel15 SIZE BY 1.655
  (dnwelri NOT dnwel15) NOT pwblk
  a1 = (dnwelro NOT dnwelri) AND pwblk
  a2 = dnwelro ENCLOSE peda
  (a1 NOT a2) WITH WIDTH >=0.005
  a3 = a1 AND a2
  INT a3 == 0.005 REGION
  a3 WITH WIDTH >=0.010
}

E1WADP {@Minimum DNWELL15 enclosure of PDIFF ... 2.0
  ENC pdif dnwel15 < 2.0 ABUT <90 SINGULAR REGION
}

E1WADN {@Fixed DNWELL15 enclosure of NDIFF ... 1.5
  ENC ndif dnwel15 < 1.5 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE ((dnwel15 SIZE BY -1.505) NOT (((peda1511 ENCLOSE peda) OR (pede1511 ENCLOSE pede)) SIZE BY 0.16)) dntap
}


B1WB {@DNWELL25 must be surrounded by a GUARD RING
  dnwelri  = dnwel25 SIZE BY 2.25
  dnwelro  = dnwel25 SIZE BY 2.67
  ((dnwelro NOT dnwelri) NOT (mv AND pdif)) WITH WIDTH >=0.005
}

B2WB {@DNWELL25 overlap of DNWELL15 is not allowed
  dnwel25 AND dnwel15
}

B3WB {@NWELL crossing DNWELL25 edge is not allowed
  INSIDE EDGE dnwel25 nwell
}

B4WB {@POLY1 crossing DNWELL25 edge is not allowed
  INSIDE EDGE dnwel25 poly1
}

B5WB {@PDD crossing DNWELL25 edge is not allowed
  INSIDE EDGE dnwel25 pdd
}

W1WB {@Minimum DNWELL25 width ... 6.44
  INT dnwel25 < 6.44 ABUT <90 SINGULAR REGION
}

S1WB {@Minimum DNWELL25 spacing/notch ... 8.0
  EXT dnwel25 < 8.0 ABUT <90 SINGULAR REGION
}

S1WBWD {@Minimum DNWELL25 spacing to DNWELL60 ... 10.0
  EXT dnwel25 dnwel60 < 10.0 ABUT <90 SINGULAR REGION
}

S1WBNW {@Minimum DNWELL25 spacing to NWELL ... 8.0
  EXT dnwel25 nwell < 8.0 ABUT <90 SINGULAR REGION
}

S1WBDN {@Minimum DNWELL25 spacing to NDIFF ... 3.11
  EXT dnwel25 ndif < 3.11 ABUT <90 SINGULAR REGION
}

S1WBP1 {@Minimum DNWELL25 spacing to POLY1 ... 3.6
  EXT dnwel25 poly1 < 3.6 ABUT<90 SINGULAR REGION
}

S1WBDP {@Fixed DNWELL25 spacing to PDIFF ... 2.25
  EXT dnwel25 pdif < 2.25 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (dnwel25 SIZE BY 2.255) pdif
}

pmma_ex1 = ((pdd INTERACT pmma) SIZE BY 2.64) OR (pmma SIZE BY 3.64 INSIDE OF nwell)

E1WBNW {@Minimum DNWELL25 enclosure of NWELL ... 2.15
  ENC ((nwell NOT ((dnc OR pmma_ex1) OR dza_279)) COIN EDGE nwell) dnwel25 < 2.15 ABUT <90 REGION
  ENC nwell dnwel25 < 0.005 ABUT <90 SINGULAR REGION
}

E1WBWM {@Minimum DNWELL25 enclosure of DNWELLMV ... 1.5
  ENC dnw_mv dnwel25 < 1.5 ABUT <90 SINGULAR REGION
}

E1WBP1 {@Minimum DNWELL25 enclosure of POLY1 ... 2.45
  (ENC poly1 dnwel25 < 2.45 ABUT<90 SINGULAR REGION) NOT (ENC (poly1 ENCLOSE neda) dnwel25 < 2.45 ABUT<90 SINGULAR REGION)
}

E1PBWB {@Fixed PWBLK enclosure of DNWELL25 ... 2.13
  dnwelri  = dnwel25 SIZE BY 2.13
  dnwelro  = dnwel25 SIZE BY 2.145
  (dnwelri NOT dnwel25) NOT pwblk
  a1 = (dnwelro NOT dnwelri) AND pwblk
  a2 = dnwelro ENCLOSE (neda OR nedb)
  (a1 NOT a2) WITH WIDTH >=0.005
  a3 = a1 AND a2
  INT a3 == 0.005 REGION
  a3 WITH WIDTH >=0.010
}

E1WBDP {@Minimum DNWELL25 enclosure of PDIFF ... 2.0
  ENC pdif dnwel25 < 2.0 ABUT <90 SINGULAR REGION
}

E1WBDN {@Fixed DNWELL25 enclosure of NDIFF ... 1.5
  (ENC ndif dnwel25 < 1.5 ABUT <90 SINGULAR REGION) NOT (ENC (pmma_ex1 AND ndif) dnwel25 < 1.5 ABUT <90 SINGULAR REGION)
  NOT INSIDE EDGE ((dnwel25 SIZE BY -1.505) NOT (((ned2_r27 ENCLOSE nedb) SIZE BY 0.01) OR pmma_ex1)) dntap
}


dnw60_ex2 = (dnwel60 NOT niscr_wd) NOT hvscr_al
dnw60_ex1 = dnw60_ex2 NOT qpvhasvd
B1WD {@DNWELL60 must be surrounded by a GUARD RING
  dnwelri  = dnw60_ex1 SIZE BY 4
  dnwelro  = dnw60_ex1 SIZE BY 4.42
  ((dnwelro NOT dnwelri) NOT (mv AND pdif)) WITH WIDTH >=0.005
}

B2WD {@DNWELL60 overlap of DNWELL15 or DNWELL25 is not allowed
  dnwel60 AND dnwel15
  dnwel60 AND dnwel25
}

B3WD {@NWELL crossing DNWELL60 edge is not allowed
  INSIDE EDGE dnwel60 nwell
}

B4WD {@POLY1 crossing DNWELL60 edge is not allowed
  INSIDE EDGE dnwel60 poly1
}

B5WD {@PDD crossing DNWELL60 edge is not allowed
  INSIDE EDGE dnwel60 pdd
}

W1WD {@Minimum DNWELL60 width ... 6.44
  INT (dnwel60 NOT hvscr_vd) < 6.44 ABUT <90 SINGULAR REGION
}

S1WD {@Minimum DNWELL60 spacing/notch ... 10.0
  EXT dnwel60 < 10.0 ABUT <90 SINGULAR REGION
}

S1WDNW {@Minimum DNWELL60 spacing to NWELL ... 10.0
  EXT dnwel60 nwell < 10.0 ABUT <90 SINGULAR REGION
}

S1WDDN {@Minimum DNWELL60 spacing to NDIFF ... 4.86
  EXT dnw60_ex2 ndif < 4.86 ABUT <90 SINGULAR REGION
}

S1WDP1 {@Minimum DNWELL60 spacing to POLY1 ... 5.35
  EXT dnwel60 poly1 < 5.35 ABUT<90 SINGULAR REGION
}

S1WDDP {@Fixed DNWELL60 spacing to PDIFF ... 4.0
  EXT dnwel60 pdif < 4.0 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (dnw60_ex1 SIZE BY 4.005) pdif
}

pmmb_ex1 = ((pdd INTERACT pmx_b) SIZE BY 3.64) OR (pmx_b SIZE BY 5.64 INSIDE OF nwell)
pmmc_ex1 = ((pdd INTERACT pmx_c) SIZE BY 2.64) OR (pmx_c SIZE BY 7.64 INSIDE OF nwell)
pmm_ex1  = pmmb_ex1 OR pmmc_ex1

E1WDNW {@Minimum DNWELL60 enclosure of NWELL ... 3.65
  ENC ((nwell NOT ((dnc OR pmm_ex1) OR dza_279)) COIN EDGE nwell) dnwel60 < 3.65 ABUT <90 REGION
  (ENC nwell dnwel60 < 0.005 ABUT <90 SINGULAR REGION) NOT hvscr_vd
}

E1WDWM {@Minimum DNWELL60 enclosure of DNWELLMV ... 3.0
  ENC dnw_mv dnwel60 < 3.0 ABUT <90 SINGULAR REGION
}

E1WDP1 {@Minimum DNWELL60 enclosure of POLY1 ... 3.95
  ENC poly1 dnwel60 < 3.95 ABUT<90 SINGULAR REGION
}

E1PBWD {@Fixed PWBLK enclosure of DNWELL60 ... 3.88
  dnwelri  = dnw60_ex1 SIZE BY 3.88
  dnwelro  = dnw60_ex1 SIZE BY 3.89
  (dnwelri NOT dnwel60) NOT pwblk
  a1 = (dnwelro NOT dnwelri) AND pwblk
  a1 WITH WIDTH >=0.005
}

pedb_ex2 = pedb1511 ENCLOSE pedb_ex1
pedc_ex2 = pedc1511 ENCLOSE pedc_ex1
pedd_ex2 = pedd1511 ENCLOSE pedd_ex1
ped_ex2  = pedb_ex2 OR (pedc_ex2 OR pedd_ex2)
ped_ex3  = ped_ex2 AND pdif

E1WDDP {@Minimum DNWELL60 enclosure of PDIFF ... 3.5
  (ENC pdif dnw60_ex1 < 3.5 ABUT <90 SINGULAR REGION) NOT (ENC ped_ex3 dnwel60 < 3.5 ABUT <90 SINGULAR REGION)
}

E1WDDN {@Fixed DNWELL60 enclosure of NDIFF ... 3.0
  (ENC ndif dnwel60 < 3.0 ABUT <90 SINGULAR REGION) NOT (ENC (pmm_ex1 AND ndif) dnwel60 < 3.0 ABUT <90 SINGULAR REGION)
  NOT INSIDE EDGE ((dnw60_ex1 SIZE BY -3.005) NOT (((ned2_r27 ENCLOSE (nedc OR nedd)) SIZE BY 0.15) OR (ped_ex2 OR pmm_ex1))) dntap
}


B2PT {@PDD without DNWELL# or VDNWELL is not allowed
  pdd NOT (dnw_al2 OR vdnwell)
}

ned_bcd = nedb2 OR (nedc2 OR nedd2)

B3PT {@PDD overlap of NWELL, DNWELLMV, NDD, ISOWELL or DPB is not allowed
  pdd AND nwell
  pdd AND dnw_mv
  pdd AND ndd
  (((pdd AND isowell) NOT ((RECTANGLE (pdd AND pwiso) == 0.1 BY == 0.8) INSIDE ned_bcd)) NOT hvscr_d6) NOT dpdd_d6a
  pdd AND dpb
}

B4PT {@DIFF crossing PDD edge is not allowed
  INSIDE EDGE pdd (diff NOT (pmx_al OR (ned_bcd OR ped_al)))
}

B5PT {@PDD overlap of rpp1#, rnp1#, rpp1s#, HRES or MRES is not allowed
  pdd AND rpp1
  pdd AND rnp1
  pdd AND rpp1s
  pdd AND hres
  pdd AND mres
}

W1PT {@Minimum PDD width ... 0.8
  (INT pdd < 0.8 ABUT <90 SINGULAR REGION) NOT (INT ((nedb186 ENCLOSE nedb) AND pdd) < 0.8 ABUT <90 SINGULAR REGION)
}

S1PT {@Minimum PDD spacing/notch ... 0.8
  EXT pdd < 0.8 ABUT <90 SPACE SINGULAR REGION
  (EXT pdd < 0.8 ABUT <90 NOTCH SINGULAR REGION) NOT ((pdd AND ned_bcd) SIZE BY 0.8)
}

pmma_ex2 = ((EXPAND EDGE (INSIDE EDGE pmma nwell) BY 1.1) OR (pmma AND nwell)) SIZE BY 0.1
pmxb_ex2 = ((EXPAND EDGE (INSIDE EDGE pmx_b nwell) BY 2.1) OR (pmx_b AND nwell)) SIZE BY 0.1
pmxc_ex2 = ((EXPAND EDGE (INSIDE EDGE pmx_c nwell) BY 5.1) OR (pmx_c AND nwell)) SIZE BY 0.1
pmx_ex2  = pmma_ex2 OR (pmxb_ex2 OR pmxc_ex2)
S1PTNW {@Minimum PDD spacing to NWELL ... 0.2
  (EXT pdd nwell < 0.2 ABUT <90 SINGULAR REGION) NOT ((EXT qnva_67 nwell < 0.2 ABUT <90 SINGULAR REGION) OR pmx_ex2)
}

S1PTIW {@Minimum PDD spacing to ISOWELL ... 0.8
  EXT pdd isowell < 0.8 ABUT <90 SINGULAR REGION
}

S1PTDN {@Minimum PDD spacing to NDIFF ... 0.86
  (EXT pdd ndif < 0.86 ABUT <90 SINGULAR REGION) NOT 
     ((EXT qnva_67 ndif < 0.86 ABUT <90 SINGULAR REGION) OR (ned2_r27 ENCLOSE (nedb OR(nedc OR nedd))))
}

S1PTDP {@Minimum PDD spacing to PDIFF ... 0.86
  (EXT pdd pdif < 0.86 ABUT <90 SINGULAR REGION) NOT (peda2 OR (pedb2 OR pedc2))
}

E1WAPT {@Minimum DNWELL15 enclosure of PDD ... 1.5
  ENC pdd dnwel15 < 1.5 ABUT<90 SINGULAR REGION
}

E1WBPT {@Minimum DNWELL25 enclosure of PDD ... 1.5
  ENC pdd dnwel25 < 1.5 ABUT<90 SINGULAR REGION
}

E1WDPT {@Minimum DNWELL60 enclosure of PDD ... 1.8
  ENC pdd dnwel60 < 1.8 ABUT<90 SINGULAR REGION
}

E1PTDN {@Minimum PDD enclosure of NDIFF ... 0.86
  (ENC ndif pdd < 0.86 ABUT<90 SINGULAR REGION) NOT (ENC qnva_all qnva_67 < 0.86 ABUT<90 SINGULAR REGION)
}

E1PTDP {@Minimum PDD enclosure of PDIFF ... 0.86
  (ENC pdif pdd < 0.86 ABUT<90 SINGULAR REGION) NOT
     ((ENC (pedd2 AND pdif) pdd < 0.86 ABUT<90 SINGULAR REGION) OR
     ((ENC ((pdd INTERACT pmma) AND pdif) pdd < 0.86 ABUT<90 SINGULAR REGION) OR
     (qnva_67 OR (peda1511 ENCLOSE peda))))
}

A1PT {@Minimum PDD area ... 4.0
  AREA pdd < 4
}

A2PT {@Minimum PDD enclosed area ... 8.0
  AREA ((HOLES pdd) NOT pdd) < 8
}


B1NC {@DNC is only allowed for qnva, qnva5, dsba, dsb, dpp, ped#, pede, qpvhascr
  dnc NOT (hvscr_vd OR (((dnw_al ENCLOSE ped_al) OR ((qnva_66 ENCLOSE qnva_67) OR ((dpp SIZE BY 2.32) OR (d_dsb0 SIZE BY 2.34)))) OR qpvhasvd))
}

B2NC {@DNC without NWELL is not allowed
  dnc NOT nwell
}

vdnw_b1  = vdnwell NOT qpvhasvd
vdnw_b2  = vdnw_b1 NOT hvscr_vd

B3NC {@DNC overlap of DNWELLMV, DNWELLNVM, NDD or VDNWELL is not allowed
  dnc AND dnw_al3
  dnc AND ndd
  dnc AND vdnw_b2
}

B4NC {@DNC overlap of NW_VERIFY is not allowed
  nwrdef AND dnc
}

W1NC {@Minimum DNC width ... 0.86
  INT dnc < 0.86 ABUT <90 SINGULAR REGION
}

S1NC {@Minimum DNC spacing/notch ... 0.6
  EXT dnc < 0.6 ABUT <90 SINGULAR REGION
}

E1WANC {@Minimum DNWELL15 enclosure of DNC ... 0.49
  ENC dnc dnwel15 < 0.49 ABUT<90 SINGULAR REGION
}

E1WBNC {@Minimum DNWELL25 enclosure of DNC ... 0.54
  ENC dnc dnwel25 < 0.54 ABUT<90 SINGULAR REGION
}

E1WDNC {@Minimum DNWELL60 enclosure of DNC ... 0.54
  (ENC dnc dnwel60 < 0.54 ABUT<90 SINGULAR REGION) NOT hvscr_vd
}


B1PC {@DPC is only allowed for dnp, qnvb, nedb, nedc and nedd
  dpc NOT ((((nedb154 AND (HOLES INNER nedb2)) OR (nedc154 INTERACT (nedc2 OR nedd2))) OR
           ((dnp SIZE BY 1.17) OR (qnvb SIZE BY 1.46))) OR (rdn_g52 INTERACT rdn_g5))
}

B2PC {@DPC overlap of NTYPE_WELL without ISOPW is not allowed
  (dpc AND anwell) NOT pwiso
}

B3PC {@DPC crossing MV edge is not allowed
  INSIDE EDGE mv dpc
}

B4PC {@DPC overlap of DEPL or PWS is not allowed
  dpc AND depl
  dpc AND pws
}

W1PC {@Minimum DPC width ... 0.6
  INT dpc < 0.6 ABUT <90 SINGULAR REGION
}

S1PC {@Minimum DPC spacing/notch ... 0.6
  EXT dpc < 0.6 ABUT <90 SINGULAR REGION
}

S1PCNW {@Minimum DPC spacing to NWELL ... 1.0
  EXT dpc nwtrm1 < 1.0 ABUT <90 SINGULAR REGION
}

S1PCWM {@Minimum DPC spacing to DNWELLMV ... 1.0
  EXT dpc dnw_mv1 < 1.0 ABUT <90 SINGULAR REGION
}


W3GA {@Fixed CHANNEL length ... 0.65
  NOT RECTANGLE neda ==0.65
}

W4GA {@Fixed CHANNEL length ... 0.65
  NOT RECTANGLE nedb ==0.65
}

W5GA {@Fixed CHANNEL length ... 0.65
  NOT RECTANGLE nedc ==0.65
}

W6GA {@Fixed CHANNEL length ... 0.65
  NOT RECTANGLE nedd ==0.65
}

W7GA {@Minimum linear cell width ... 10.0
  LENGTH (COIN EDGE ned_al pwiso) < 10.0
}

W11GA {@Fixed CHANNEL length ... 0.86
  NOT RECTANGLE peda ==0.86
}

W12GA {@Fixed CHANNEL length ... 0.86
  NOT RECTANGLE pedb ==0.86
}

W13GA {@Fixed CHANNEL length ... 0.95
  NOT RECTANGLE pedc ==0.95
}

W14GA {@Fixed CHANNEL length ... 0.95
  NOT RECTANGLE pedd ==0.95
}

W15GA {@Minimum linear cell width ... 10.0
  LENGTH (COIN EDGE ped_al pdd) < 10.0
}

W18GA {@Fixed CHANNEL length ... 0.45
  NOT RECTANGLE nede ==0.45
}

W19GA {@Fixed CHANNEL length ... 0.66
  NOT RECTANGLE pede ==0.66
}


B5GA {@POLY1 must be a rectangle
  NOT RECTANGLE (poly1 INTERACT pmx_al)
}

W26GA {@Minimum CHANNEL length ... 1.6
  INT (pmma NOT pdd) < 1.6 ABUT <90 SINGULAR REGION
}

W27GA {@Minimum GATE width ... 2.4
  LENGTH (INSIDE EDGE pdd pmma) < 2.4
}

pmma_pdd = pdd INTERACT pmma

W2PT {@Minimum PDD width ... 2.42
  INT pmma_pdd < 2.42 ABUT <90 SINGULAR REGION
}

S2PT {@Minimum PDD spacing ... 1.6
  EXT pmma_pdd pdd < 1.6 ABUT <90 SINGULAR REGION
}

s7_dp1     = EXPAND EDGE (INSIDE EDGE pdd pmma) INSIDE BY 1.5
s7_dp2     = EXPAND EDGE (COIN EDGE s7_dp1 pdiff) INSIDE BY 1.1
S7DF {@Fixed SOURCE/DRAIN-EDGE-STI length ... 1.1
  (s7_dp1 NOT pmma) XOR s7_dp2
}

S1PTDF {@Minimum PDD spacing to DIFF ... 2.0
  EXT pmma_pdd diff < 2.0 ABUT <90 SINGULAR REGION
}

S3PTDN {@Fixed PDD spacing to NDIFF ... 2.0
  a1 = EXPAND EDGE (NOT INSIDE EDGE pmma pdd) OUTSIDE BY 1.0
  a2 = (a1 OR pmma) OR pmma_pdd
  a3 = a2 SIZE BY 2.0
  NOT INSIDE EDGE (a3 SIZE BY 0.005) ndiff
  a3 ENCLOSE a2 > 1
}

S2PTNW {@Fixed PDD spacing to NWELL ... 0.1
  x1 = EXPAND EDGE (INSIDE EDGE pdd pmma) OUTSIDE BY 0.1
  (pmma NOT (x1 OR pdd)) NOT nwell
  x1 AND nwell
}

S3PTNW {@Fixed PDD spacing to NWELL ... 1.78
  a1 = (pmma AND pdd) SIZE BY 1 INSIDE OF pdd
  a2 = pmma_pdd NOT a1
  a3 = a2 SIZE BY 0.28
  a4 = EXPAND EDGE (COIN EDGE a1 pmma_pdd) OUTSIDE BY 0.28
  a5 = (a3 NOT a4) NOT a1
  y = a5 SIZE BY 1.5
  EXT (y AND nwell) pdd < 1.78 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (y SIZE BY 0.005) nwell
  (y NOT nwell) ENCLOSE pdd > 1
}

S1P1DP {@Minimum POLY1 spacing to SOURCE/DRAIN PDIFF ... 0.8
  EXT (pmma_pdd AND pdif) poly1 < 0.8 ABUT <90 SINGULAR REGION
}

O1PTGA {@Fixed PDD overlap of GATE ... 0.4
  (pmma AND pdd) NOT RECTANGLE == 0.4 ASPECT >1
}

E2PTDP {@Minimum PDD enclosure of PDIFF ... 0.5
  ENC pdif pmma_pdd < 0.5 ABUT<90 SINGULAR REGION
}

E8P1GA {@Minimum POLY1 extension beyond GATE ... 0.3
  ENC pmma poly1 < 0.3 ABUT<90 SINGULAR REGION
}

E9P1GA {@Minimum POLY1 extension beyond GATE ... 1.5
  ENC (NOT COIN EDGE pmma (pmma_pdd SIZE BY -0.4)) poly1 < 1.5 ABUT<90 REGION
}

pmma_dnw = dnwel25 ENCLOSE pmma

E2WBNW {@Fixed DNWELL25 enclosure of NWELL ... 0.78
  ENC nwell pmma_dnw < 0.78 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (pmma_dnw SIZE BY -0.785) nwell
}

E2WBDN {@Fixed DNWELL25 enclosure of NDIFF ... 1.0
  ENC ndif pmma_dnw < 1.0 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (pmma_dnw SIZE BY -1.005) ndif
}

E1PTGA {@Minimum PDD extension beyond GATE ... 1.0
  ENC (INSIDE EDGE pmma pdd) pdd < 1.0 ABUT<90 REGION
}

E5MVGA {@Minimum MV enclosure of GATE ... 5.5
  ENC pmma mv < 5.5 ABUT<90 SINGULAR REGION
}


W28GA {@Minimum CHANNEL length ... 2.2
  INT (pmmb NOT pdd) < 2.2 ABUT <90 SINGULAR REGION
}

W32GA {@Minimum CHANNEL length ... 1.6
  INT (pmb NOT pdd) < 1.6 ABUT <90 SINGULAR REGION
}

W29GA {@Minimum GATE width ... 3.0
  LENGTH (INSIDE EDGE pdd pmx_b) < 3.0
}

pmb_pdd  = pdd INTERACT pmb
pmmb_pdd = pdd INTERACT pmmb
pmxb_pdd = pdd INTERACT pmx_b

W3PT {@Minimum PDD width ... 4.42
  INT pmxb_pdd < 4.42 ABUT <90 SINGULAR REGION
}

S3PT {@Minimum PDD spacing ... 2.2
  EXT pmxb_pdd pdd < 2.2 ABUT <90 SINGULAR REGION
}

s15_dp1    = EXPAND EDGE (INSIDE EDGE pdd pmb) INSIDE BY 3.0
s15_dp2    = EXPAND EDGE (COIN EDGE s15_dp1 pdiff) INSIDE BY 2.6
S15DF {@Fixed DRAIN-EDGE-STI length ... 2.6
  (s15_dp1 NOT pmb) XOR s15_dp2
}

s8_dp1     = EXPAND EDGE (INSIDE EDGE pdd pmmb) INSIDE BY 3.0
s8_dp2     = EXPAND EDGE (COIN EDGE s8_dp1 pdiff) INSIDE BY 2.6
S8DF {@Fixed SOURCE/DRAIN-EDGE-STI length ... 2.6
  (s8_dp1 NOT pmmb) XOR s8_dp2
}

S2PTDF {@Minimum PDD spacing to DIFF ... 3.0
  EXT pmxb_pdd diff < 3.0 ABUT <90 SINGULAR REGION
}

pmb_a1 = EXPAND EDGE (COIN EDGE pmb poly1) INSIDE BY 1.44
pmb_a2 = pmx_b NOT pmb_a1
S5PTDN {@Fixed PDD spacing to NDIFF ... 3.0
  a1 = EXPAND EDGE (COIN EDGE (NOT INSIDE EDGE pmb_a2 pdd) pmx_b) OUTSIDE BY 2.0
  a2 = (a1 OR pmb_a2) OR pmxb_pdd
  a3 = a2 SIZE BY 3.0
  NOT INSIDE EDGE (a3 SIZE BY 0.005) ndiff
  a3 ENCLOSE (pmxb_pdd OR (diff ENCLOSE pmx_b)) > 1
}

S4PTNW {@Fixed PDD spacing to NWELL ... 0.1
  x1 = EXPAND EDGE (INSIDE EDGE pdd pmx_b) OUTSIDE BY 0.1
  (pmx_b NOT (x1 OR pdd)) NOT nwell
  x1 AND nwell
}

S5PTNW {@Fixed PDD spacing to NWELL ... 2.78
  a1 = (pmx_b AND pdd) SIZE BY 2 INSIDE OF pdd
  a2 = pmxb_pdd NOT a1
  a3 = a2 SIZE BY 0.28
  a4 = EXPAND EDGE (COIN EDGE a1 pmxb_pdd) OUTSIDE BY 0.28
  a5 = (a3 NOT a4) NOT a1
  y = a5 SIZE BY 2.5
  EXT (y AND nwell) pdd < 2.78 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (y SIZE BY 0.005) nwell
  (y NOT nwell) ENCLOSE pdd > 1
}

S2P1DP {@Minimum POLY1 spacing to SOURCE/DRAIN PDIFF ... 2.05
  EXT (pmmb_pdd AND pdif) poly1 < 2.05 ABUT <90 SINGULAR REGION
}

S4P1DP {@Minimum POLY1 spacing to DRAIN PDIFF ... 2.05
  EXT (pmb_pdd AND pdif) poly1 < 2.05 ABUT <90 SINGULAR REGION
}

O2PTGA {@Fixed PDD overlap of GATE ... 0.4
  (pmx_b AND pdd) NOT RECTANGLE == 0.4 ASPECT >1
}

E3PTDP {@Minimum PDD enclosure of PDIFF ... 1.0
  ENC pdif pmxb_pdd < 1.0 ABUT<90 SINGULAR REGION
}

E1P1DP {@Minimum POLY1 extension beyond GATE ... 0.55
  ((EXPAND EDGE (COIN EDGE pmb pdif) OUTSIDE BY 0.55) OR ((pmb AND pdd) SIZE BY 0.55)) NOT poly1
}

E10P1GA {@Minimum POLY1 extension beyond GATE ... 0.55
  ENC pmmb poly1 < 0.55 ABUT<90 SINGULAR REGION
}

E11P1GA {@Minimum POLY1 extension beyond GATE ... 2.5
  pmxb_x4 = NOT COIN EDGE (NOT COIN EDGE pmx_b (pmxb_pdd SIZE BY -0.4)) poly1
  ENC pmxb_x4 poly1 < 2.5 ABUT<90 REGION
}

pmxb_dnw = dnwel60 ENCLOSE pmx_b

E2WDNW {@Fixed DNWELL60 enclosure of NWELL ... 1.78
  ENC nwell pmxb_dnw < 1.78 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (pmxb_dnw SIZE BY -1.785) nwell
}

E2WDDN {@Fixed DNWELL60 enclosure of NDIFF ... 2.0
  ENC ndif pmxb_dnw < 2.0 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (pmxb_dnw SIZE BY -2.005) ndif
}

E2PTGA {@Minimum PDD extension beyond GATE ... 2.0
  ENC (INSIDE EDGE pmx_b pdd) pdd < 2.0 ABUT<90 REGION
}

E6MVGA {@Minimum MV enclosure of GATE ... 9.5
  ENC pmmb mv < 9.5 ABUT<90 SINGULAR REGION
}

B9MV {@PDD without MV is not allowed
  pmb_pdd NOT mv
  pmc_pdd NOT mv
}


W30GA {@Minimum CHANNEL length ... 2.7
  INT (pmmc NOT pdd) < 2.7 ABUT <90 SINGULAR REGION
}

W31GA {@Minimum GATE width ... 3.5
  LENGTH (INSIDE EDGE pdd pmx_c) < 3.5
}

W33GA {@Minimum CHANNEL length ... 2.1
  INT (pmc NOT pdd) < 2.1 ABUT <90 SINGULAR REGION
}

pmc_pdd  = pdd INTERACT pmc
pmmc_pdd = pdd INTERACT pmmc
pmxc_pdd = pdd INTERACT pmx_c

W4PT {@Minimum PDD width ... 8.02
  INT pmxc_pdd < 8.02 ABUT <90 SINGULAR REGION
}

S4PT {@Minimum PDD spacing ... 2.7
  EXT pmxc_pdd pdd < 2.7 ABUT <90 SINGULAR REGION
}

s16_dp1    = EXPAND EDGE (INSIDE EDGE pdd pmc) INSIDE BY 4.6
s16_dp2    = EXPAND EDGE (COIN EDGE s16_dp1 pdiff) INSIDE BY 4.2
S16DF {@Fixed DRAIN-EDGE-STI length ... 4.2
  (s16_dp1 NOT pmc) XOR s16_dp2
}

s9_dp1     = EXPAND EDGE (INSIDE EDGE pdd pmmc) INSIDE BY 4.6
s9_dp2     = EXPAND EDGE (COIN EDGE s9_dp1 pdiff) INSIDE BY 4.2
S9DF {@Fixed SOURCE/DRAIN-EDGE-STI length ... 4.2
  (s9_dp1 NOT pmmc) XOR s9_dp2
}

S3PTDF {@Minimum PDD spacing to DIFF ... 2.0
  EXT pmxc_pdd diff < 2.0 ABUT <90 SINGULAR REGION
}

pmc_a1 = EXPAND EDGE (COIN EDGE pmc poly1) INSIDE BY 0.44
pmc_a2 = pmx_c NOT pmc_a1
S7PTDN {@Fixed PDD spacing to NDIFF ... 2.0
  a1 = EXPAND EDGE (COIN EDGE (NOT INSIDE EDGE pmc_a2 pdd) pmx_c) OUTSIDE BY 5.0
  a2 = (a1 OR pmc_a2) OR pmxc_pdd
  a3 = a2 SIZE BY 2.0
  NOT INSIDE EDGE (a3 SIZE BY 0.005) ndiff
  a3 ENCLOSE (pmxc_pdd OR (diff ENCLOSE pmx_c)) > 1
}

S6PTNW {@Fixed PDD spacing to NWELL ... 0.1
  x1 = EXPAND EDGE (INSIDE EDGE pdd pmx_c) OUTSIDE BY 0.1
  (pmx_c NOT (x1 OR pdd)) NOT nwell
  x1 AND nwell
}

S7PTNW {@Fixed PDD spacing to NWELL ... 1.78
  x1 = (EXPAND EDGE (LENGTH (INSIDE EDGE pmx_c pmxc_pdd) == 0.4) OUTSIDE BY 4) AND pmxc_pdd
  a1 = ((pmx_c AND pdd) OR x1) SIZE BY 1 INSIDE OF pdd
  a2 = pmxc_pdd NOT a1
  a3 = a2 SIZE BY 0.28
  a4 = EXPAND EDGE (COIN EDGE a1 pmxc_pdd) OUTSIDE BY 0.28
  a5 = (a3 NOT a4) NOT a1
  y = a5 SIZE BY 1.5
  EXT (y AND nwell) pdd < 1.78 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (y SIZE BY 0.005) nwell
  (y NOT nwell) ENCLOSE pdd > 1
}

S3P1DP {@Minimum POLY1 spacing to SOURCE/DRAIN PDIFF ... 3.65
  EXT (pmmc_pdd AND pdif) poly1 < 3.65 ABUT <90 SINGULAR REGION
}

S6P1DP {@Minimum POLY1 spacing to DRAIN PDIFF ... 3.65
  EXT (pmc_pdd AND pdif) poly1 < 3.65 ABUT <90 SINGULAR REGION
}

O3PTGA {@Fixed PDD overlap of GATE ... 0.4
  (pmx_c AND pdd) NOT RECTANGLE == 0.4 ASPECT >1
}

E4PTDP {@Minimum PDD enclosure of PDIFF ... 3.0
  ENC pdif pmxc_pdd < 3.0 ABUT<90 SINGULAR REGION
}

E3P1DP {@Minimum POLY1 extension beyond GATE ... 0.55
  ((EXPAND EDGE (COIN EDGE pmc pdif) OUTSIDE BY 0.55) OR ((pmc AND pdd) SIZE BY 0.55)) NOT poly1
}

E12P1GA {@Minimum POLY1 extension beyond GATE ... 0.55
  ENC pmmc poly1 < 0.55 ABUT<90 SINGULAR REGION
}

E13P1GA {@Minimum POLY1 extension beyond GATE ... 5.47
  pmxc_x4 = NOT COIN EDGE (NOT COIN EDGE pmx_c (pmxc_pdd SIZE BY -0.4)) poly1
  ENC pmxc_x4 poly1 < 5.47 ABUT<90 REGION
}

pmxc_dnw = dnwel60 ENCLOSE pmx_c

E3WDNW {@Fixed DNWELL60 enclosure of NWELL ... 1.78
  ENC nwell pmxc_dnw < 1.78 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (pmxc_dnw SIZE BY -1.785) nwell
}

E3WDDN {@Fixed DNWELL60 enclosure of NDIFF ... 2.0
  ENC ndif pmxc_dnw < 2.0 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (pmxc_dnw SIZE BY -2.005) ndif
}

E3PTGA {@Minimum PDD extension beyond GATE ... 5.0
  ENC (INSIDE EDGE pmx_c pdd) pdd < 5.0 ABUT<90 REGION
}

E7MVGA {@Minimum MV enclosure of GATE ... 12.0
  ENC pmmc mv < 12.0 ABUT<90 SINGULAR REGION
}


B1NX {@NDD is only allowed for nm# and qnvb
  ndd NOT ((ndd INTERACT nmx_al) OR qnvb)
}

B2NX {@NDD without PWBLK or DPB is not allowed
  ndd NOT (pwblk OR dpb)
}

B3NX {@NDD overlap of ISOWELL, DPC or PDIFF is not allowed
  ndd AND isowell
  ndd AND dpc
  ndd AND pdif
}

B4NX {@NDD overlap of rpp1#, rnp1#, rpp1s#, HRES or MRES is not allowed
  ndd AND rpp1
  ndd AND rnp1
  ndd AND rpp1s
  ndd AND hres
  ndd AND mres
}

W1NX {@Minimum NDD width ... 1.6
  INT ndd < 1.6 ABUT <90 SINGULAR REGION
}

S1NX {@Minimum NDD spacing/notch ... 1.6
  EXT ndd < 1.6 ABUT <90 SINGULAR REGION
}

S1NXPC {@Minimum NDD spacing to DPC ... 0.8
  EXT ndd dpc < 0.8 ABUT <90 SINGULAR REGION
}

S1NXPI {@Minimum NDD spacing to ISOPW ... 1.0
  (EXT ndd pwiso < 1.0 ABUT <90 SINGULAR REGION) NOT (qnvb_34 ENCLOSE qnvb == 1)
}

S1NXDN {@Minimum NDD spacing to NDIFF ... 0.43
  EXT ndd ndif < 0.43 ABUT <90 SINGULAR REGION
}

S1NXDP {@Minimum NDD spacing to PDIFF ... 0.43
  EXT ndd pdif < 0.43 ABUT <90 SINGULAR REGION
}

S1NXPT {@Minimum NDD spacing to PDD ... 1.0
  EXT ndd pdd < 1.0 ABUT <90 SINGULAR REGION
}

E1NXDN {@Minimum NDD enclosure of NDIFF ... 0.5
  (ENC ndif ndd < 0.5 ABUT <90 SINGULAR REGION) NOT qnvb
}

E1PBNX {@Minimum PWBLK enclosure of NDD ... 3.0
  ENC (ndd NOT nmx_ndd) pwblk < 3.0 ABUT <90 SINGULAR REGION
}


B4GA {@POLY1 must be a rectangle
  NOT RECTANGLE (poly1 INTERACT nmx_al)
}

W20GA {@Minimum CHANNEL length ... 2.6
  INT (nmma NOT ndd) < 2.6 ABUT <90 SINGULAR REGION
}

W21GA {@Minimum GATE width ... 3.0
  LENGTH (INSIDE EDGE ndd nmma) < 3.0
}

nmma_ndd = ndd INTERACT nmma

W2NX {@Minimum NDD width ... 1.62
  INT nmma_ndd < 1.62 ABUT <90 SINGULAR REGION
}

S2NX {@Minimum NDD spacing ... 2.6
  EXT nmma_ndd ndd < 2.6 ABUT <90 SINGULAR REGION
}

s4_dn1     = EXPAND EDGE (INSIDE EDGE ndd nmma) INSIDE BY 0.7
s4_dn2     = EXPAND EDGE (COIN EDGE s4_dn1 ndiff) INSIDE BY 0.5
S4DF {@Fixed SOURCE/DRAIN-EDGE-STI length ... 0.5
  (s4_dn1 NOT nmma) XOR s4_dn2
}

S2NXDP {@Fixed NDD spacing to PDIFF ... 3.12
  EXT nmma_ndd pdif < 3.12 ABUT <90 SINGULAR REGION
  a1 = EXPAND EDGE (NOT INSIDE EDGE nmma ndd) OUTSIDE BY 4.0
  a2 = (a1 OR nmma) OR nmma_ndd
  a3 = a2 SIZE BY 3.12
  INSIDE EDGE a3 pdif
  NOT INSIDE EDGE (a3 SIZE BY 0.005) pdif
  a3 ENCLOSE a2 > 1
}

nmma_p1 = poly1 ENCLOSE nmma
nmma_x1 = EXPAND EDGE (TOUCH EDGE nmma_ndd (INSIDE EDGE nmma_ndd nmma)) OUTSIDE BY 0.55
nmma_x2 = (EXPAND EDGE (LENGTH nmma_x1 == 0.55) OUTSIDE BY 3) OR nmma_x1
nmma_x3 = (EXPAND EDGE (NOT INSIDE EDGE nmma nmma_ndd) OUTSIDE BY 7.0) OR (nmma NOT nmma_ndd)
nmma_x4 = NOT COIN EDGE nmma (nmma_ndd SIZE BY -0.2)
nmma_x5 = ((nmma_ndd SIZE BY 3.0) NOT nmma_x3) OR nmma_x2

S2P1DF {@Minimum POLY1 spacing to DIFF ... 2.6
  (EXT nmma_p1 diff < 2.6 ABUT <90 SINGULAR REGION) NOT nmma_ndd
}

S1P1NW {@Minimum POLY1 spacing to NWELL ... 3.0
  EXT nmma_p1 nwell < 3.0 ABUT <90 SINGULAR REGION
}

S1P1WM {@Minimum POLY1 spacing to DNWELLMV ... 3.0
  EXT nmma_p1 dnw_mv < 3.0 ABUT <90 SINGULAR REGION
}

S1P1WN {@Minimum POLY1 spacing to DNWELLNVM ... 3.0
  EXT nmma_p1 dnw_nvm < 3.0 ABUT <90 SINGULAR REGION
}

S1GAPC {@Minimum GATE spacing to DPC ... 7.5
  EXT nmma_x4 dpc < 7.5 ABUT <90 REGION
}

O1NXGA {@Fixed NDD overlap of GATE ... 0.2
  (nmma AND ndd) NOT RECTANGLE == 0.2 ASPECT >1
}

E2PBNX {@Fixed PWBLK enclosure of NDD ... 3.0
  nmma_x5 NOT pwblk
  (((nmma_x5 SIZE BY 0.005) NOT nmma_x5) OR (nmma_x3 NOT nmma_x2)) AND pwblk
}

E3PBNX {@Fixed PWBLK enclosure of NDD ... 0.55
  nmma_x2 NOT pwblk
  (nmma_x3 NOT nmma_x2) AND pwblk
}

E2P1GA {@Minimum POLY1 extension beyond GATE ... 0.4
  ENC nmma poly1 < 0.4 ABUT<90 SINGULAR REGION
}

E3P1GA {@Minimum POLY1 extension beyond GATE ... 4.5
  ENC nmma_x4 poly1 < 4.5 ABUT<90 REGION
}

E2MVGA {@Minimum MV enclosure of GATE ... 4.5
  ENC nmma mv < 4.5 ABUT<90 SINGULAR REGION
}

E1NXGA {@Minimum NDD extension beyond GATE ... 4.0
  ENC nmma_x4 ndd < 4.0 ABUT<90 REGION
}


W22GA {@Minimum CHANNEL length ... 3.1
  INT (nmx_b NOT ndd) < 3.1 ABUT <90 SINGULAR REGION
}

W23GA {@Minimum GATE width ... 3.5
  LENGTH (INSIDE EDGE ndd nmx_b) < 3.5
}

nmb_ndd  = ndd INTERACT nmb
nmmb_ndd = ndd INTERACT nmmb
nmxb_ndd = ndd INTERACT nmx_b

W3NX {@Minimum NDD width ... 2.92
  INT nmxb_ndd < 2.92 ABUT <90 SINGULAR REGION
}

S3NX {@Minimum NDD spacing ... 3.1
  EXT nmxb_ndd ndd < 3.1 ABUT <90 SINGULAR REGION
}

s5_dn1     = EXPAND EDGE (INSIDE EDGE ndd nmmb) INSIDE BY 2.0
s5_dn2     = EXPAND EDGE (COIN EDGE s5_dn1 ndiff) INSIDE BY 1.8
S5DF {@Fixed SOURCE/DRAIN-EDGE-STI length ... 1.8
  (s5_dn1 NOT nmmb) XOR s5_dn2
}

s13_dn1    = EXPAND EDGE (INSIDE EDGE ndd nmb) INSIDE BY 2.0
s13_dn2    = EXPAND EDGE (COIN EDGE s13_dn1 ndiff) INSIDE BY 1.8
S13DF {@Fixed DRAIN-EDGE-STI length ... 1.8
  (s13_dn1 NOT nmb) XOR s13_dn2
}

S3P1DN {@Minimum POLY1 spacing to SOURCE/DRAIN NDIFF ... 1.1
  EXT (nmmb_ndd AND ndif) poly1 < 1.1 ABUT <90 SINGULAR REGION
}

S5P1DN {@Minimum POLY1 spacing to DRAIN NDIFF ... 1.1
  EXT (nmb_ndd AND ndif) poly1 < 1.1 ABUT <90 SINGULAR REGION
}

nmb_a1 = EXPAND EDGE (COIN EDGE nmb poly1) INSIDE BY 2.2
nmb_a2 = nmx_b NOT nmb_a1
S4NXDP {@Fixed NDD spacing to PDIFF ... 3.12
  EXT nmxb_ndd pdif < 3.12 ABUT <90 SINGULAR REGION
  a1 = EXPAND EDGE (COIN EDGE (NOT INSIDE EDGE nmb_a2 ndd) nmx_b) OUTSIDE BY 4.0
  a2 = (a1 OR nmb_a2) OR nmxb_ndd
  a3 = a2 SIZE BY 3.12
  INSIDE EDGE a3 pdif
  NOT INSIDE EDGE (a3 SIZE BY 0.005) pdif
  a3 ENCLOSE ((diff ENCLOSE nmx_b) OR nmxb_ndd) > 1
}

nmxb_p1 = poly1 ENCLOSE nmx_b
nmxb_x1 = EXPAND EDGE (TOUCH EDGE nmxb_ndd (INSIDE EDGE nmxb_ndd nmx_b)) OUTSIDE BY 1.05
nmxb_x2 = (EXPAND EDGE (LENGTH nmxb_x1 == 1.05) OUTSIDE BY 3) OR nmxb_x1
nmxb_x3 = (EXPAND EDGE (NOT INSIDE EDGE (NOT COIN EDGE nmx_b poly1) nmxb_ndd) OUTSIDE BY 7.0) OR (nmx_b NOT nmxb_ndd)
nmxb_x4 = NOT COIN EDGE (NOT COIN EDGE nmx_b (nmxb_ndd SIZE BY -0.2)) poly1
nmxb_x5 = (nmxb_ndd NOT (EXPAND EDGE (TOUCH EDGE nmxb_ndd (INSIDE EDGE nmxb_ndd nmx_b)) INSIDE BY 1.95)) SIZE BY 3

S3P1DF {@Minimum POLY1 spacing to DIFF ... 2.6
  x1 = NOT TOUCH EDGE nmxb_p1 (EXPAND EDGE (INSIDE EDGE ndd nmx_b) INSIDE BY 0.9)
  x2 = NOT TOUCH EDGE x1 ( COIN EDGE nmx_b nmxb_p1)
  EXT x2 diff < 2.6 ABUT <90 REGION
}

S2P1NW {@Minimum POLY1 spacing to NWELL ... 3.0
  EXT nmxb_p1 nwell < 3.0 ABUT <90 SINGULAR REGION
}

S2P1WM {@Minimum POLY1 spacing to DNWELLMV ... 3.0
  EXT nmxb_p1 dnw_mv < 3.0 ABUT <90 SINGULAR REGION
}

S2P1WN {@Minimum POLY1 spacing to DNWELLNVM ... 3.0
  EXT nmxb_p1 dnw_nvm < 3.0 ABUT <90 SINGULAR REGION
}

S2GAPC {@Minimum GATE spacing to DPC ... 7.5
  EXT nmxb_x4 dpc < 7.5 ABUT <90 REGION
}

O2NXGA {@Fixed NDD overlap of GATE ... 0.2
  (nmx_b AND ndd) NOT RECTANGLE == 0.2 ASPECT >1
}

E4PBNX {@Fixed PWBLK enclosure of NDD ... 3.0
  nmxb_x5 NOT pwblk
  (((nmxb_x5 SIZE BY 0.005) NOT nmxb_x5) OR (nmxb_x3 NOT nmxb_x2)) AND pwblk
}

E5PBNX {@Fixed PWBLK enclosure of NDD ... 1.05
  nmxb_x2 NOT pwblk
  (nmxb_x3 NOT nmxb_x2) AND pwblk
}

E4P1GA {@Minimum POLY1 extension beyond GATE ... 0.7
  ENC nmmb poly1 < 0.7 ABUT<90 SINGULAR REGION
}

E3P1DN {@Minimum POLY1 extension beyond NDIFF ... 0.7
  ((EXPAND EDGE (COIN EDGE nmb ndif) OUTSIDE BY 0.7) OR ((nmb AND ndd) SIZE BY 0.7)) NOT poly1
}

E5P1GA {@Minimum POLY1 extension beyond GATE ... 4.5
  ENC nmxb_x4 poly1 < 4.5 ABUT<90 REGION
}

E3MVGA {@Minimum MV enclosure of GATE ... 4.5
  ENC nmmb mv < 4.5 ABUT<90 SINGULAR REGION
}

B8MV {@NDD without MV is not allowed
  nmb_ndd NOT mv
  nmc_ndd NOT mv
}

E2NXGA {@Minimum NDD extension beyond GATE ... 4.0
  ENC nmxb_x4 ndd < 4.0 ABUT<90 REGION
}


W24GA {@Minimum CHANNEL length ... 3.6
  INT (nmx_c NOT ndd) < 3.6 ABUT <90 SINGULAR REGION
}

W25GA {@Minimum GATE width ... 4.0
  LENGTH (INSIDE EDGE ndd nmx_c) < 4.0
}

nmc_ndd  = ndd INTERACT nmc
nmmc_ndd = ndd INTERACT nmmc
nmxc_ndd = ndd INTERACT nmx_c

W4NX {@Minimum NDD width ... 3.32
  INT nmxc_ndd < 3.32 ABUT <90 SINGULAR REGION
}

S4NX {@Minimum NDD spacing ... 3.6
  EXT nmxc_ndd ndd < 3.6 ABUT <90 SINGULAR REGION
}

s6_dn1     = EXPAND EDGE (INSIDE EDGE ndd nmmc) INSIDE BY 2.4
s6_dn2     = EXPAND EDGE (COIN EDGE s6_dn1 ndiff) INSIDE BY 2.2
S6DF {@Fixed SOURCE/DRAIN-EDGE-STI length ... 2.2
  (s6_dn1 NOT nmmc) XOR s6_dn2
}

s14_dn1    = EXPAND EDGE (INSIDE EDGE ndd nmc) INSIDE BY 2.4
s14_dn2    = EXPAND EDGE (COIN EDGE s14_dn1 ndiff) INSIDE BY 2.2
S14DF {@Fixed DRAIN-EDGE-STI length ... 2.2
  (s14_dn1 NOT nmc) XOR s14_dn2
}

S4P1DN {@Minimum POLY1 spacing to SOURCE/DRAIN NDIFF ... 1.5
  EXT (nmmc_ndd AND ndif) poly1 < 1.5 ABUT <90 SINGULAR REGION
}

S6P1DN {@Minimum POLY1 spacing to DRAIN NDIFF ... 1.5
  EXT (nmc_ndd AND ndif) poly1 < 1.5 ABUT <90 SINGULAR REGION
}

nmc_a1 = EXPAND EDGE (COIN EDGE nmc poly1) INSIDE BY 2.2
nmc_a2 = nmx_c NOT nmc_a1
S6NXDP {@Fixed NDD spacing to PDIFF ... 3.12
  EXT nmxc_ndd pdif < 3.12 ABUT <90 SINGULAR REGION
  a1 = EXPAND EDGE (COIN EDGE (NOT INSIDE EDGE nmc_a2 ndd) nmx_c) OUTSIDE BY 4.0
  a2 = (a1 OR nmc_a2) OR nmxc_ndd
  a3 = a2 SIZE BY 3.12
  INSIDE EDGE a3 pdif
  NOT INSIDE EDGE (a3 SIZE BY 0.005) pdif
  a3 ENCLOSE ((diff ENCLOSE nmx_c) OR nmxc_ndd) > 1
}

nmxc_p1 = poly1 ENCLOSE nmx_c
nmxc_x1 = EXPAND EDGE (TOUCH EDGE nmxc_ndd (INSIDE EDGE nmxc_ndd nmx_c)) OUTSIDE BY 1.3
nmxc_x2 = (EXPAND EDGE (LENGTH nmxc_x1 == 1.3) OUTSIDE BY 3) OR nmxc_x1
nmxc_x3 = (EXPAND EDGE (NOT INSIDE EDGE (NOT COIN EDGE nmx_c poly1) nmxc_ndd) OUTSIDE BY 7.0) OR (nmx_c NOT nmxc_ndd)
nmxc_x4 = NOT COIN EDGE (NOT COIN EDGE nmx_c (nmxc_ndd SIZE BY -0.2)) poly1
nmxc_x5 = (nmxc_ndd NOT (EXPAND EDGE (TOUCH EDGE nmxc_ndd (INSIDE EDGE nmxc_ndd nmx_c)) INSIDE BY 1.7)) SIZE BY 3

S4P1DF {@Minimum POLY1 spacing to DIFF ... 2.6
  x1 = NOT TOUCH EDGE nmxc_p1 (EXPAND EDGE (INSIDE EDGE ndd nmx_c) INSIDE BY 0.9)
  x2 = NOT TOUCH EDGE x1 ( COIN EDGE nmx_c nmxc_p1)
  EXT x2 diff < 2.6 ABUT <90 REGION
}

S3P1NW {@Minimum POLY1 spacing to NWELL ... 3.0
  EXT nmxc_p1 nwell < 3.0 ABUT <90 SINGULAR REGION
}

S3P1WM {@Minimum POLY1 spacing to DNWELLMV ... 3.0
  EXT nmxc_p1 dnw_mv < 3.0 ABUT <90 SINGULAR REGION
}

S3P1WN {@Minimum POLY1 spacing to DNWELLNVM ... 3.0
  EXT nmxc_p1 dnw_nvm < 3.0 ABUT <90 SINGULAR REGION
}

S3GAPC {@Minimum GATE spacing to DPC ... 7.5
  EXT nmxc_x4 dpc < 7.5 ABUT <90 REGION
}

O3NXGA {@Fixed NDD overlap of GATE ... 0.2
  (nmmc AND ndd) NOT RECTANGLE == 0.2 ASPECT >1
}

E6PBNX {@Fixed PWBLK enclosure of NDD ... 3.0
  nmxc_x5 NOT pwblk
  (((nmxc_x5 SIZE BY 0.005) NOT nmxc_x5) OR (nmxc_x3 NOT nmxc_x2)) AND pwblk
}

E7PBNX {@Fixed PWBLK enclosure of NDD ... 1.3
  nmxc_x2 NOT pwblk
  (nmxc_x3 NOT nmxc_x2) AND pwblk
}

E6P1GA {@Minimum POLY1 extension beyond GATE ... 0.7
  ENC nmmc poly1 < 0.7 ABUT<90 SINGULAR REGION
}

E4P1DN {@Minimum POLY1 extension beyond NDIFF ... 0.7
  ((EXPAND EDGE (COIN EDGE nmc ndif) OUTSIDE BY 0.7) OR ((nmc AND ndd) SIZE BY 0.7)) NOT poly1
}

E7P1GA {@Minimum POLY1 extension beyond GATE ... 4.5
  ENC nmxc_x4 poly1 < 4.5 ABUT<90 REGION
}

E4MVGA {@Minimum MV enclosure of GATE ... 4.5
  ENC nmmc mv < 4.5 ABUT<90 SINGULAR REGION
}

E3NXGA {@Minimum NDD extension beyond GATE ... 4.0
  ENC nmxc_x4 ndd < 4.0 ABUT<90 REGION
}


B1WV {@VDNWELL is only allowed for qnvhascr, qpvh and qnvb
  ((vdnw_b2 NOT dvdnw2) NOT (qnvb SIZE BY 6.66)) NOT qpvh_vd
}

B2WV {@VDNWELL must be surrounded by a GUARD RING
  vdnwelri = vdnwell SIZE BY 4
  vdnwelro = vdnwell SIZE BY 4.42
  ((vdnwelro NOT vdnwelri) NOT (mv AND pdif)) WITH WIDTH >=0.005
}

vdnw_b3  = vdnwell NOT dpb

B3WV {@POLY1 overlap of VDNWELL is only allowed with DPB
  vdnw_b3 AND poly1
}

B4WV {@DIFF overlap of VDNWELL is only allowed with PDD, DPB or VNC
  ((((vdnw_b3 NOT hvscr_vd) NOT pdd) NOT vnc) NOT qpvhasvd) AND diff
}

B5WV {@DNWELL overlap of VDNWELL is not allowed
  ((vdnwell AND dnw_al) NOT (qpvhasvd NOT qpvhas_dw6)) NOT hvscr_vd
}

B6WV {@VDNWELL without MV is not allowed
  vdnwell NOT mv
}

B7WV {@VDNWELL overlap of PDD is not allowed
  ((((vdnwell AND pdd) NOT hvscrv_emq) NOT qpvh) NOT qpvhascr) NOT dpdd_vda
}

B8WV {@VDNWELL overlap of rpp1#, rnp1#, rpp1s#, HRES or MRES is not allowed
  vdnwell AND rpp1
  vdnwell AND rnp1
  vdnwell AND rpp1s
  vdnwell AND hres
  vdnwell AND mres
}

B10WV {@NDD overlap of VDNWELL is only allowed with DPB
  vdnw_b3 AND ndd
}

B11WV {@NWELL overlap of VDNWELL is not allowed
  vdnw_b2 AND nwell
}

W1WV {@Minimum VDNWELL width ... 6.44
  INT vdnwell < 6.44 ABUT <90 SINGULAR REGION
}

S1WV {@Minimum VDNWELL spacing/notch ... 10.0
  EXT vdnwell < 10.0 ABUT <90 SINGULAR REGION
}

S1WVNW {@Minimum VDNWELL spacing to NWELL ... 10.0
  EXT vdnwell nwell < 10.0 ABUT <90 SINGULAR REGION
}

S1WVDN {@Minimum VDNWELL spacing to NDIFF ... 4.86
  EXT vdnwell ndif < 4.86 ABUT <90 SINGULAR REGION
}

S1WVP1 {@Minimum VDNWELL spacing to POLY1 ... 5.35
  EXT vdnwell poly1 < 5.35 ABUT<90 SINGULAR REGION
}

S1WVDP {@Fixed VDNWELL spacing to PDIFF ... 4.0
  EXT vdnwell pdif < 4.0 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (vdnwell SIZE BY 4.005) pdif
}

E1WVNC {@Minimum VDNWELL enclosure of VNC ... 0.1
  ENC vnc vdnwell < 0.1 ABUT <90 SINGULAR REGION
}

E1WVP1 {@Minimum VDNWELL enclosure of POLY1 ... 3.95
  ENC poly1 vdnwell < 3.95 ABUT<90 SINGULAR REGION
}

E1PBWV {@Fixed PWBLK enclosure of VDNWELL ... 3.88
  vdnwelri = vdnwell SIZE BY 3.88
  vdnwelro = vdnwell SIZE BY 3.89
  (vdnwelri NOT vdnwell) NOT pwblk
  a1 = (vdnwelro NOT vdnwelri) AND pwblk
  a1 WITH WIDTH >=0.005
}

E1WVDP {@Minimum VDNWELL enclosure of PDIFF ... 3.5
  ENC pdif vdnwell < 3.5 ABUT <90 SINGULAR REGION
}

E1WVDN {@Fixed VDNWELL enclosure of NDIFF ... 0.79
  ENC ndif vdnwell < 0.79 ABUT <90 SINGULAR REGION
  NOT INSIDE EDGE (p_dvdnw SIZE BY -0.796) dntap
}

E1WVPT {@Minimum VDNWELL enclosure of PDD ... 3.0
  ENC pdd vdnwell < 3.0 ABUT <90 SINGULAR REGION
}

E1WVDB {@Minimum VDNWELL enclosure of DPB ... 3.78
  ENC dpb vdnwell < 3.78 ABUT <90 SINGULAR REGION
}


B1DB {@DPB is only allowed for qnvb
  dpb NOT (qnvb SIZE BY 1.76)
}

B2DB {@DPB without VDNWELL is not allowed
  dpb NOT vdnwell
}

W1DB {@Minimum DPB width ... 2.0
  INT dpb < 2.0 ABUT <90 SINGULAR REGION
}

S1DB {@Minimum DPB spacing/notch ... 2.0
  EXT dpb < 2.0 ABUT <90 SINGULAR REGION
}

S1DBPT {@Minimum DPB spacing to PDD ... 2.0
  EXT dpb pdd < 2.0 ABUT <90 SINGULAR REGION
}

E1DBPC {@Minimum DPB enclosure of DPC ... 0.2
  ENC dpc dpb < 0.2 ABUT <90 SINGULAR REGION
}

E1DBNX {@Minimum DPB enclosure of NDD ... 1.6
  ENC ndd dpb < 1.6 ABUT <90 SINGULAR REGION
}

E1DBPI {@Minimum DPB enclosure of ISOPW ... 0.2
  ENC pwiso dpb < 0.2 ABUT <90 SINGULAR REGION
}


B1NV {@VNC without VDNWELL is not allowed
  vnc NOT vdnwell
}

B2NV {@VNC overlap of POLY1, PDIFF, PDD or DPB is not allowed
  vnc AND poly1
  vnc AND pdif
  vnc AND pdd
  vnc AND dpb
}

W1NV {@Minimum VNC width ... 1.9
  INT vnc < 1.9 ABUT <90 SINGULAR REGION
}

S1NV {@Minimum VNC spacing/notch ... 2.0
  EXT vnc < 2.0 ABUT <90 SINGULAR REGION
}

S1NVDB {@Minimum VNC spacing to DPB ... 1.77
  EXT vnc dpb < 1.77 ABUT <90 SINGULAR REGION
}

E1NVDN {@Minimum VNC enclosure of NDIFF ... 0.69
  ENC ((vnc AND ndif) NOT (qnvb SIZE BY 5.73)) vnc < 0.69 ABUT <90 SINGULAR REGION
}


B1MR {@MRES overlap of DIFF is not allowed
  mres AND diff
}

B2MR {@MRES without SBLK is not allowed
  mres NOT sblk
}

B3MR {@MRES overlap of NIMP or PIMP is not allowed
  mres AND implt
}

B4MR {@HRES overlap of MRES is not allowed
  mres AND hres
}

W1MR {@Minimum MRES width ... 0.44
  INT mres < 0.44 ABUT <90 SINGULAR REGION
}

S1MR {@Minimum MRES spacing/notch ... 0.44
  EXT mres < 0.44 ABUT <90 SINGULAR REGION
}

S1MRDF {@Minimum MRES spacing to DIFF ... 0.32
  EXT mres diff < 0.32 ABUT <90 SINGULAR REGION
}

S1MRP1 {@Minimum MRES spacing to POLY1 ... 0.32
  EXT mres poly1 < 0.32 ABUT <90 SINGULAR REGION
}

B6MR {@rpp1k1_3 crossing NTYPE_WELL or PTYPE_WELL or SUBCUT edge is not allowed
  INSIDE EDGE anwelft rpp1k1_3
  INSIDE EDGE subcut rpp1k1_3
}

B7MR {@rpp1k1_3 overlap rnw/rnw5/rdnwmv is not allowed
  rpp1k1_3 AND rnw1
  rpp1k1_3 AND rdnwmv
}

W16P1 {@Minimum rpp1k1# width ... 0.42
  INT (COIN EDGE rpp1k1 poly1) rpp1k1 < 0.42 ABUT <90 REGION
}

E1MRP1 {@Minimum MRES extension beyond rpp1k1# ... 0.18
  ENC (COINCIDENT EDGE rpp1k1 poly1) mres < 0.18 ABUT <90 REGION
}

rp_ext     = EXPAND EDGE (INSIDE EDGE rpp1k1 poly1) OUTSIDE BY 0.22

E1SBMR {@Fixed SBLK extension beyond MRES in direction of POLY1 ... 0.22
  rp_ext XOR (((sblk AND poly1) INTERACT mres) NOT rpp1k1)
}

E2IPP1 {@Minimum PIMP extension beyond rpp1k1_ext ... 0.18
  ENC (OUTSIDE EDGE rp_ext rpp1k1) pimp < 0.18 ABUT <90 REGION
  rp_ext NOT pimp
}

S3INP1 {@Minimum NIMP spacing to rpp1k1# or rpp1k1_ext ... 0.26
  EXT (rpp1k1 OR rp_ext) nimp < 0.26 ABUT <90 SINGULAR REGION
}


nede_ex1   = nede18 ENCLOSE nede
nede_nd2   = ((ndiff INTERACT nede_ex1) OR nede_ex1) SIZE BY 1.505
pede_ex1   = (pede15 INTERACT pede) SIZE BY 1
pede_ex2   = (pdiff INTERACT pede_ex1) OR pede_ex1
pede_nd2   = pede_ex2 SIZE BY 2.265
pede_pd2   = pede_ex2 SIZE BY 0.61

B1NY {@ND2 is only allowed for nede, pede
  nd2 NOT (nede_nd2 OR pede_nd2)
}

B2NY {@ND2 without DNWELL15 is not allowed
  nd2 NOT dnwel15
}

B3NY {@ND2 overlap of DNWELLMV is not allowed
  nd2 AND dnw_mv
}

B4NY {@DNWELL15 crossing ND2 edge is not allowed
  INSIDE EDGE nd2 dnwel15
}

B5NY {@ND2 overlap of DEPL is not allowed
  nd2 AND depl
}

B6NY {@ND2 overlap of rpp1#, rnp1#, rpp1s#, HRES or MRES is not allowed
  nd2 AND rpp1
  nd2 AND rnp1
  nd2 AND rpp1s
  nd2 AND hres
  nd2 AND mres
}

B7NY {@ND2 without MV is not allowed
  nd2 NOT mv
}

B8NY {@ND2 overlap of PDD is not allowed
  nd2 AND pdd
}

B9NY {@ND2 overlap of NDD is not allowed
  nd2 AND ndd
}

W1NY {@Minimum ND2 width ... 2.0
  INT nd2 < 2 ABUT <90 SINGULAR REGION
}

S1NY {@Minimum ND2 spacing/notch ... 2.0
  EXT nd2 < 2 ABUT <90 SINGULAR REGION
}


B1PY {@PD2 is only allowed for pede
  pd2 NOT pede_pd2
}

B2PY {@PD2 without DNWELL15 is not allowed
  pd2 NOT dnwel15
}

B3PY {@PD2 overlap of NWELL or ISOPW is not allowed
  pd2 AND nwell
  pd2 AND pwiso
}

B4PY {@DIFF crossing PD2 edge is not allowed
  INSIDE EDGE pd2 (diff NOT pede)
}

B6PY {@PD2 without ND2 is not allowed
  pd2 NOT nd2
}

W1PY {@Minimum PD2 width ... 0.8
  INT pd2 < 0.8 ABUT <90 SINGULAR REGION
}

S1PY {@Minimum PD2 spacing/notch ... 0.8
  EXT pd2 < 0.8 ABUT <90 SINGULAR REGION
}

S1PYNW {@Minimum PD2 spacing to NWELL ... 1.0
  EXT (pd2 NOT pede1511) nwell < 1.0 ABUT <90 SINGULAR REGION
}

S1PYIW {@Minimum PD2 spacing to ISOWELL ... 1.0
  EXT pd2 isowell < 1.0 ABUT <90 SINGULAR REGION
}

S1PYDN {@Minimum PD2 spacing to NDIFF ... 0.86
  EXT pd2 ndif < 0.86 ABUT <90 SINGULAR REGION
}

S1PYDP {@Minimum PD2 spacing to PDIFF ... 0.86
  (EXT pd2 pdif < 0.86 ABUT <90 SINGULAR REGION) NOT pede2
}

E1WAPY {@Minimum DNWELL15 enclosure of PD2 ... 1.5
  ENC pd2 dnwel15 < 1.5 ABUT <90 SINGULAR REGION
}

E1PYDN {@Minimum PD2 enclosure of NDIFF ... 0.86
  ENC ndif pd2 < 0.86 ABUT <90 SINGULAR REGION
}

E1PYDP {@Minimum PD2 enclosure of PDIFF ... 0.86
  (ENC pdif pd2 < 0.86 ABUT <90 SINGULAR REGION) NOT (pede1511 ENCLOSE pede)
}


W1PZ {@Minimum PZENER width ... 0.6
  INT pzener < 0.6 ABUT <90 SINGULAR REGION
}

S1PZ {@Minimum PZENER spacing/notch ... 0.6
  EXT pzener < 0.6 ABUT <90 SINGULAR REGION
}

B1PZ {@PZENER is only allowed for dza_m, dza_a, dza_b, dza_d
  pzener NOT dza_all
}


bulk_cm    = bulk_1 INTERACT capm
bulk_cmh   = bulk_1 INTERACT capmh
bulk_cm23  = bulk_1 INTERACT capm23f
bulk_cmh23 = bulk_1 INTERACT capmh23f
bulk_cm34  = bulk_1 INTERACT capm34f
bulk_cmh34 = bulk_1 INTERACT capmh34f
bulk_cm45  = bulk_1 INTERACT capm45f
bulk_cmh45 = bulk_1 INTERACT capmh45f
bulk_dm    = bulk_1 INTERACT capm2
bulk_dmh   = bulk_1 INTERACT capmh2
bulk_dma   = bulk_1 INTERACT capm2a
bulk_dmha  = bulk_1 INTERACT capmh2a
bulk_dmb   = bulk_1 INTERACT capm2b
bulk_dmhb  = bulk_1 INTERACT capmh2b
bulk_tm    = bulk_1 INTERACT capm3
bulk_tmh   = bulk_1 INTERACT capmh3
bulk_tma   = bulk_1 INTERACT capm3a
bulk_tmha  = bulk_1 INTERACT capmh3a

bulk_f_al  = bulk_cm23 OR (bulk_cm34 OR bulk_cm45)
bulk_fh_al = bulk_cmh23 OR (bulk_cmh34 OR bulk_cmh45)
bulk_d_al  = bulk_dm OR (bulk_dma OR bulk_dmb)
bulk_dh_al = bulk_dmh OR (bulk_dmha OR bulk_dmhb)
bulk_t_al  = bulk_tm OR bulk_tma
bulk_th_al = bulk_tmh OR bulk_tmha

bulk_m     = (bulk_cm OR bulk_f_al) OR (bulk_d_al OR bulk_t_al)
bulk_mh    = (bulk_cmh OR bulk_fh_al) OR (bulk_dh_al OR bulk_th_al)
bulk_mim   = bulk_m OR bulk_mh

B3CM {@CAPM is not allowed when CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capm AND ((bulk_f_al OR (bulk_d_al OR bulk_t_al)) OR bulk_mh)
}

B3C3 {@CAPM23F is not allowed when CAPM, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capm23f AND (((bulk_cm OR (bulk_cm34 OR bulk_cm45)) OR (bulk_d_al OR bulk_t_al)) OR bulk_mh)
}

B3C4 {@CAPM34F is not allowed when CAPM, CAPM23F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capm34f AND (((bulk_cm OR (bulk_cm23 OR bulk_cm45)) OR (bulk_d_al OR bulk_t_al)) OR bulk_mh)
}

B3C5 {@CAPM45F is not allowed when CAPM, CAPM23F, CAPM34F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capm45f AND (((bulk_cm OR (bulk_cm23 OR bulk_cm34)) OR (bulk_d_al OR bulk_t_al)) OR bulk_mh)
}

B3CH {@CAPMH is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capmh AND (bulk_m OR (bulk_fh_al OR (bulk_dh_al OR bulk_th_al)))
}

B3H3 {@CAPMH23F is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capmh23f AND (bulk_m OR ((bulk_cmh OR (bulk_cmh34 OR bulk_cmh45)) OR (bulk_dh_al OR bulk_th_al)))
}

B3H4 {@CAPMH34F is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capmh34f AND (bulk_m OR ((bulk_cmh OR (bulk_cmh23 OR bulk_cmh45)) OR (bulk_dh_al OR bulk_th_al)))
}

B3H5 {@CAPMH45F is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capmh45f AND (bulk_m OR ((bulk_cmh OR (bulk_cmh23 OR bulk_cmh34)) OR (bulk_dh_al OR bulk_th_al)))
}

B1DM {@CAPM2 is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capm2 AND (((bulk_cm OR bulk_f_al) OR ((bulk_dma OR bulk_dmb) OR bulk_t_al)) OR bulk_mh)
}

B1D3 {@CAPM2A is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capm2a AND (((bulk_cm OR bulk_f_al) OR ((bulk_dm OR bulk_dmb) OR bulk_t_al)) OR bulk_mh)
}

B1D4 {@CAPM2B is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capm2b AND (((bulk_cm OR bulk_f_al) OR ((bulk_dm OR bulk_dma) OR bulk_t_al)) OR bulk_mh)
}

B1DH {@CAPMH2 is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2A, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capmh2 AND (bulk_m OR ((bulk_cmh OR bulk_fh_al) OR ((bulk_dmha OR bulk_dmhb) OR bulk_th_al)))
}

B1K3 {@CAPMH2A is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2B, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capmh2a AND (bulk_m OR ((bulk_cmh OR bulk_fh_al) OR ((bulk_dmh OR bulk_dmhb) OR bulk_th_al)))
}

B1K4 {@CAPMH2B is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPM3, CAPM3A, CAPMH3 or CAPMH3A is present
  capmh2b AND (bulk_m OR ((bulk_cmh OR bulk_fh_al) OR ((bulk_dmh OR bulk_dmha) OR bulk_th_al)))
}

B1TM {@CAPM3 is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3A, CAPMH3 or CAPMH3A is present
  capm3 AND (((bulk_cm OR bulk_f_al) OR (bulk_d_al OR bulk_tma)) OR bulk_mh)
}

B1T3 {@CAPM3A is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPMH3 or CAPMH3A is present
  capm3a AND (((bulk_cm OR bulk_f_al) OR (bulk_d_al OR bulk_tm)) OR bulk_mh)
}

B1TH {@CAPMH3 is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A or CAPMH3A is present
  capmh3 AND (bulk_m OR ((bulk_cmh OR bulk_fh_al) OR (bulk_dh_al OR bulk_tmha)))
}

B1J3 {@CAPMH3A is not allowed when CAPM, CAPM23F, CAPM34F, CAPM45F, CAPMH, CAPMH23F, CAPMH34F, CAPMH45F, 
      @CAPM2, CAPM2A, CAPM2B, CAPMH2, CAPMH2A, CAPMH2B, CAPM3, CAPM3A or CAPMH3 is present
  capmh3a AND (bulk_m OR ((bulk_cmh OR bulk_fh_al) OR (bulk_dh_al OR bulk_tmh)))
}


#IFDEF MIDMET
B1CM {@CAPM without BM is not allowed
  capm NOT bm
}

B2CM {@CAPM overlap of VIAn or PAD is not allowed
  capm AND vian
  capm AND pad
}

W1CM {@Minimum CAPM width ... 2.0
  INT capm < 2 ABUT <90 SINGULAR REGION
}

W2CM {@Maximum CAPM bounding box size ... 30.0 x 30.0
  RECTANGLE capm > 30 MEASURE EXTENTS
}

S1CM {@Minimum CAPM spacing/notch ... 1.5
  EXT capm < 1.5 ABUT <90 SINGULAR REGION
}

S1CMPA {@Minimum CAPM spacing to PAD ... 10.0
  EXT capm pad < 10 ABUT <90 SINGULAR REGION
}

S1CMVN {@Minimum CAPM spacing to VIAn ... 0.5
  EXT capm vian < 0.5 ABUT <90 SINGULAR REGION
}

E1BMCM {@Minimum BM enclosure of CAPM ... 0.5
  ENC capm bm < 0.5 ABUT <90 SINGULAR REGION
}

E1BMVN {@Minimum BM enclosure of VIAn ... 0.15
  ENC vian bm < 0.15 ABUT <90 SINGULAR REGION
}

S1CMVT {@Minimum CAPM spacing to VIATP ... 0.5
  EXT capm viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1CMVT {@Minimum CAPM enclosure of VIATP ... 0.3
  ENC viatp capm < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1BMVT {@Minimum BM enclosure of VIATP ... 0.15
  ENC (bm_v AND viatp) bm < 0.15 ABUT <90 SINGULAR REGION
}

S3VT {@Minimum VIATP spacing on CAPM ... 2.0
  EXT (capm AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

capmcp          = capm OR emptlay
Q1VTdensity     = DENSITY viatp capm < 0.01
                  [AREA(viatp)/AREA(capm)]
                  INSIDE OF LAYER capmcp
                  RDB Q1VTdensity.rdb

Q1VT {@Recommended minimum ratio of VIATP area to CAPM area ... 1.0%
  COPY Q1VTdensity
}
#ELSE
B4CM {@CAPM without module METMID is not allowed
  copy capm
}
#ENDIF


#IFDEF METAL3
B1C3 {@CAPM23F without MET2 is not allowed
  capm23f NOT m2trm
}

B2C3 {@CAPM23F overlap of VIA1 or PAD is not allowed
  capm23f AND via1
  capm23f AND pad
}

W1C3 {@Minimum CAPM23F width ... 2.0
  INT capm23f < 2 ABUT <90 SINGULAR REGION
}

W2C3 {@Maximum CAPM23F bounding box size ... 30.0 x 30.0
  RECTANGLE capm23f > 30 MEASURE EXTENTS
}

S1C3 {@Minimum CAPM23F spacing/notch ... 1.5
  EXT capm23f < 1.5 ABUT <90 SINGULAR REGION
}

S1C3PA {@Minimum CAPM23F spacing to PAD ... 10.0
  EXT capm23f pad < 10 ABUT <90 SINGULAR REGION
}

S1C3V1 {@Minimum CAPM23F spacing to VIA1 ... 0.5
  EXT capm23f via1 < 0.5 ABUT <90 SINGULAR REGION
}

E1M2C3 {@Minimum MET2 enclosure of CAPM23F ... 0.5
  ENC capm23f met2sl < 0.5 ABUT <90 SINGULAR REGION
}

S1C3V2 {@Minimum CAPM23F spacing to VIA2 ... 0.5
  EXT capm23f via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1C3V2 {@Minimum CAPM23F enclosure of VIA2 ... 0.3
  ENC via2 capm23f < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

capm23f_s  = (SIZE       capm23f      BY  2.5) NOT capm23f
cmm3_m2    = (capm23f_s  AND met2sl)  INTERACT capm23f
cmm3_m2v1  = cmm3_m2     AND          via1
cmm3_m2v2  = cmm3_m2     AND          via2

E5M2V1 {@Minimum MET2 enclosure of VIA1 ... 0.15
  ENC cmm3_m2v1 met2sl < 0.15 ABUT <90 SINGULAR REGION
}

E6M2V2 {@Minimum MET2 enclosure of VIA2 ... 0.15
  ENC cmm3_m2v2 met2sl < 0.15 ABUT <90 SINGULAR REGION
}

S5V2 {@Minimum VIA2 spacing on CAPM23F ... 2.0
  EXT (capm23f AND via2) < 2.0 ABUT <90 SINGULAR REGION
}

capm23fcp       = capm23f OR emptlay
Q3V2density     = DENSITY via2 capm23f < 0.01
                  [AREA(via2)/AREA(capm23f)]
                  INSIDE OF LAYER capm23fcp
                  RDB Q3V2density.rdb

Q3V2 {@Recommended minimum ratio of VIA2 area to CAPM23F area ... 1.0%
  COPY Q3V2density
}
#ELSE
B4C3 {@CAPM23F without module MET3 is not allowed
  copy capm23f
}
#ENDIF


#IFDEF METAL4
B1C4 {@CAPM34F without MET3 is not allowed
  capm34f NOT m3trm
}

B2C4 {@CAPM34F overlap of VIA2 or PAD is not allowed
  capm34f AND via2
  capm34f AND pad
}

W1C4 {@Minimum CAPM34F width ... 2.0
  INT capm34f < 2 ABUT <90 SINGULAR REGION
}

W2C4 {@Maximum CAPM34F bounding box size ... 30.0 x 30.0
  RECTANGLE capm34f > 30 MEASURE EXTENTS
}

S1C4 {@Minimum CAPM34F spacing/notch ... 1.5
  EXT capm34f < 1.5 ABUT <90 SINGULAR REGION
}

S1C4PA {@Minimum CAPM34F spacing to PAD ... 10.0
  EXT capm34f pad < 10 ABUT <90 SINGULAR REGION
}

S1C4V2 {@Minimum CAPM34F spacing to VIA2 ... 0.5
  EXT capm34f via2 < 0.5 ABUT <90 SINGULAR REGION
}

E1M3C4 {@Minimum MET3 enclosure of CAPM34F ... 0.5
  ENC capm34f met3sl < 0.5 ABUT <90 SINGULAR REGION
}

S1C4V3 {@Minimum CAPM34F spacing to VIA3 ... 0.5
  EXT capm34f via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1C4V3 {@Minimum CAPM34F enclosure of VIA3 ... 0.3
  ENC via3 capm34f < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

capm34f_s  = (SIZE       capm34f      BY  2.5) NOT capm34f
cmm4_m3    = (capm34f_s  AND met3sl)  INTERACT capm34f
cmm4_m3v2  = cmm4_m3     AND          via2
cmm4_m3v3  = cmm4_m3     AND          via3

E6M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.15
  ENC cmm4_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E6M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.15
  ENC cmm4_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

S5V3 {@Minimum VIA3 spacing on CAPM34F ... 2.0
  EXT (capm34f AND via3) < 2.0 ABUT <90 SINGULAR REGION
}

capm34fcp       = capm34f OR emptlay
Q3V3density     = DENSITY via3 capm34f < 0.01
                  [AREA(via3)/AREA(capm34f)]
                  INSIDE OF LAYER capm34fcp
                  RDB Q3V3density.rdb

Q3V3 {@Recommended minimum ratio of VIA3 area to CAPM34F area ... 1.0%
  COPY Q3V3density
}
#ELSE
B4C4 {@CAPM34F without module MET4 is not allowed
  copy capm34f
}
#ENDIF


#IFDEF METAL5
B1C5 {@CAPM45F without MET4 is not allowed
  capm45f NOT m4trm
}

B2C5 {@CAPM45F overlap of VIA3 or PAD is not allowed
  capm45f AND via3
  capm45f AND pad
}

W1C5 {@Minimum CAPM45F width ... 2.0
  INT capm45f < 2 ABUT <90 SINGULAR REGION
}

W2C5 {@Maximum CAPM45F bounding box size ... 30.0 x 30.0
  RECTANGLE capm45f > 30 MEASURE EXTENTS
}

S1C5 {@Minimum CAPM45F spacing/notch ... 1.5
  EXT capm45f < 1.5 ABUT <90 SINGULAR REGION
}

S1C5PA {@Minimum CAPM45F spacing to PAD ... 10.0
  EXT capm45f pad < 10 ABUT <90 SINGULAR REGION
}

S1C5V3 {@Minimum CAPM45F spacing to VIA3 ... 0.5
  EXT capm45f via3 < 0.5 ABUT <90 SINGULAR REGION
}

E1M4C5 {@Minimum MET4 enclosure of CAPM45F ... 0.5
  ENC capm45f met4sl < 0.5 ABUT <90 SINGULAR REGION
}

S1C5V4 {@Minimum CAPM45F spacing to VIA4 ... 0.5
  EXT capm45f via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1C5V4 {@Minimum CAPM45F enclosure of VIA4 ... 0.3
  ENC via4 capm45f < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

capm45f_s  = (SIZE       capm45f      BY  2.5) NOT capm45f
cmm5_m4    = (capm45f_s  AND met4sl)  INTERACT capm45f
cmm5_m4v3  = cmm5_m4     AND          via3
cmm5_m4v4  = cmm5_m4     AND          via4

E6M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC cmm5_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E6M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC cmm5_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S6V4 {@Minimum VIA4 spacing on CAPM45F ... 2.0
  EXT (capm45f AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

capm45fcp       = capm45f OR emptlay
Q3V4density     = DENSITY via4 capm45f < 0.01
                  [AREA(via4)/AREA(capm45f)]
                  INSIDE OF LAYER capm45fcp
                  RDB Q3V4density.rdb

Q3V4 {@Recommended minimum ratio of VIA4 area to CAPM45F area ... 1.0%
  COPY Q3V4density
}
#ELSE
B4C5 {@CAPM45F without module MET5 is not allowed
  copy capm45f
}
#ENDIF


B1CH {@CAPMH without BM is not allowed
  capmh NOT bmh
}

B2CH {@CAPMH overlap of VIAn or PAD is not allowed
  capmh AND vian
  capmh AND pad
}

W1CH {@Minimum CAPMH width ... 2.0
  INT capmh < 2 ABUT <90 SINGULAR REGION
}

W2CH {@Maximum CAPMH bounding box size ... 30.0 x 30.0
  RECTANGLE capmh > 30 MEASURE EXTENTS
}

S1CH {@Minimum CAPMH spacing/notch ... 1.5
  EXT capmh < 1.5 ABUT <90 SINGULAR REGION
}

S1CHPA {@Minimum CAPMH spacing to PAD ... 10.0
  EXT capmh pad < 10 ABUT <90 SINGULAR REGION
}

S1CHVN {@Minimum CAPMH spacing to VIAn ... 0.5
  EXT capmh vian < 0.5 ABUT <90 SINGULAR REGION
}

E1BMCH {@Minimum BM enclosure of CAPMH ... 0.5
  ENC capmh bmh < 0.5 ABUT <90 SINGULAR REGION
}

E2BMVN {@Minimum BM enclosure of VIAn ... 0.15
  ENC vian bmh < 0.15 ABUT <90 SINGULAR REGION
}

#IFDEF MIDMET
S1CHVT {@Minimum CAPMH spacing to VIATP ... 0.5
  EXT capmh viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1CHVT {@Minimum CAPMH enclosure of VIATP ... 0.3
  ENC viatp capmh < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E2BMVT {@Minimum BM enclosure of VIATP ... 0.15
  ENC (bmh_v AND viatp) bmh < 0.15 ABUT <90 SINGULAR REGION
}

S4VT {@Minimum VIATP spacing on CAPMH ... 2.0
  EXT (capmh AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

capmhcp         = capmh OR emptlay
Q4VTdensity     = DENSITY viatp capmh < 0.01
                  [AREA(viatp)/AREA(capmh)]
                  INSIDE OF LAYER capmhcp
                  RDB Q4VTdensity.rdb

Q4VT {@Recommended minimum ratio of VIATP area to CAPMH area ... 1.0%
  COPY Q4VTdensity
}

#ELSE
#IFDEF THKMET
S2VL {@Minimum VIATPL spacing on CAPMH ... 2.0
  EXT (capmh AND viatpl) < 2.0 ABUT <90 SINGULAR REGION
}

S1CHVL {@Minimum CAPMH spacing to VIATPL ... 0.5
  EXT capmh viatpl < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1CHVL {@Minimum CAPMH enclosure of VIATPL ... 0.3
  ENC viatpl capmh < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1BMVL {@Minimum BM enclosure of VIATPL ... 0.15
  ENC (bmh_v AND viatpl) bmh < 0.15 ABUT <90 SINGULAR REGION
}

capmhcp         = capmh OR emptlay
Q1VLdensity     = DENSITY viatpl capmh < 0.01
                  [AREA(viatpl)/AREA(capmh)]
                  INSIDE OF LAYER capmhcp
                  RDB Q1VLdensity.rdb

Q1VL {@Recommended minimum ratio of VIATPL area to CAPMH area ... 1.0%
  COPY Q1VLdensity
}

#ELSE
B4CH {@CAPMH is not allowed
  copy capmh
}

#ENDIF
#ENDIF


#IFDEF METAL3
B1H3 {@CAPMH23F without MET2 is not allowed
  capmh23f NOT m2trm
}

B2H3 {@CAPMH23F overlap of VIA1 or PAD is not allowed
  capmh23f AND via1
  capmh23f AND pad
}

W1H3 {@Minimum CAPMH23F width ... 2.0
  INT capmh23f < 2 ABUT <90 SINGULAR REGION
}

W2H3 {@Maximum CAPMH23F bounding box size ... 30.0 x 30.0
  RECTANGLE capmh23f > 30 MEASURE EXTENTS
}

S1H3 {@Minimum CAPMH23F spacing/notch ... 1.5
  EXT capmh23f < 1.5 ABUT <90 SINGULAR REGION
}

S1H3PA {@Minimum CAPMH23F spacing to PAD ... 10.0
  EXT capmh23f pad < 10 ABUT <90 SINGULAR REGION
}

S1H3V1 {@Minimum CAPMH23F spacing to VIA1 ... 0.5
  EXT capmh23f via1 < 0.5 ABUT <90 SINGULAR REGION
}

E1M2H3 {@Minimum MET2 enclosure of CAPMH23F ... 0.5
  ENC capmh23f met2sl < 0.5 ABUT <90 SINGULAR REGION
}

S1H3V2 {@Minimum CAPMH23F spacing to VIA2 ... 0.5
  EXT capmh23f via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1H3V2 {@Minimum CAPMH23F enclosure of VIA2 ... 0.3
  ENC via2 capmh23f < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

capmh23f_s = (SIZE       capmh23f     BY  2.5) NOT capmh23f
cmmh3_m2   = (capmh23f_s AND met2sl)  INTERACT capmh23f
cmmh3_m2v1 = cmmh3_m2    AND          via1
cmmh3_m2v2 = cmmh3_m2    AND          via2

E6M2V1 {@Minimum MET2 enclosure of VIA1 ... 0.15
  ENC cmmh3_m2v1 met2sl < 0.15 ABUT <90 SINGULAR REGION
}

E7M2V2 {@Minimum MET2 enclosure of VIA2 ... 0.15
  ENC cmmh3_m2v2 met2sl < 0.15 ABUT <90 SINGULAR REGION
}

S6V2 {@Minimum VIA2 spacing on CAPMH23F ... 2.0
  EXT (capmh23f AND via2) < 2.0 ABUT <90 SINGULAR REGION
}

capmh23fcp      = capmh23f OR emptlay
Q4V2density     = DENSITY via2 capmh23f < 0.01
                  [AREA(via2)/AREA(capmh23f)]
                  INSIDE OF LAYER capmh23fcp
                  RDB Q4V2density.rdb

Q4V2 {@Recommended minimum ratio of VIA2 area to CAPMH23F area ... 1.0%
  COPY Q4V2density
}
#ELSE
B4H3 {@CAPMH23F without module MET3 is not allowed
  copy capmh23f
}
#ENDIF


#IFDEF METAL4
B1H4 {@CAPMH34F without MET3 is not allowed
  capmh34f NOT m3trm
}

B2H4 {@CAPMH34F overlap of VIA2 or PAD is not allowed
  capmh34f AND via2
  capmh34f AND pad
}

W1H4 {@Minimum CAPMH34F width ... 2.0
  INT capmh34f < 2 ABUT <90 SINGULAR REGION
}

W2H4 {@Maximum CAPMH34F bounding box size ... 30.0 x 30.0
  RECTANGLE capmh34f > 30 MEASURE EXTENTS
}

S1H4 {@Minimum CAPMH34F spacing/notch ... 1.5
  EXT capmh34f < 1.5 ABUT <90 SINGULAR REGION
}

S1H4PA {@Minimum CAPMH34F spacing to PAD ... 10.0
  EXT capmh34f pad < 10 ABUT <90 SINGULAR REGION
}

S1H4V2 {@Minimum CAPMH34F spacing to VIA2 ... 0.5
  EXT capmh34f via2 < 0.5 ABUT <90 SINGULAR REGION
}

E1M3H4 {@Minimum MET3 enclosure of CAPMH34F ... 0.5
  ENC capmh34f met3sl < 0.5 ABUT <90 SINGULAR REGION
}

S1H4V3 {@Minimum CAPMH34F spacing to VIA3 ... 0.5
  EXT capmh34f via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1H4V3 {@Minimum CAPMH34F enclosure of VIA3 ... 0.3
  ENC via3 capmh34f < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

capmh34f_s = (SIZE       capmh34f     BY  2.5) NOT capmh34f
cmmh4_m3   = (capmh34f_s AND met3sl)  INTERACT capmh34f
cmmh4_m3v2 = cmmh4_m3    AND          via2
cmmh4_m3v3 = cmmh4_m3    AND          via3

E7M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.15
  ENC cmmh4_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E7M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.15
  ENC cmmh4_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

S6V3 {@Minimum VIA3 spacing on CAPMH34F ... 2.0
  EXT (capmh34f AND via3) < 2.0 ABUT <90 SINGULAR REGION
}

capmh34fcp      = capmh34f OR emptlay
Q4V3density     = DENSITY via3 capmh34f < 0.01
                  [AREA(via3)/AREA(capmh34f)]
                  INSIDE OF LAYER capmh34fcp
                  RDB Q4V3density.rdb

Q4V3 {@Recommended minimum ratio of VIA3 area to CAPMH34F area ... 1.0%
  COPY Q4V3density
}
#ELSE
B4H4 {@CAPMH34F without module MET4 is not allowed
  copy capmh34f
}
#ENDIF


#IFDEF METAL5
B1H5 {@CAPMH45F without MET4 is not allowed
  capmh45f NOT m4trm
}

B2H5 {@CAPMH45F overlap of VIA3 or PAD is not allowed
  capmh45f AND via3
  capmh45f AND pad
}

W1H5 {@Minimum CAPMH45F width ... 2.0
  INT capmh45f < 2 ABUT <90 SINGULAR REGION
}

W2H5 {@Maximum CAPMH45F bounding box size ... 30.0 x 30.0
  RECTANGLE capmh45f > 30 MEASURE EXTENTS
}

S1H5 {@Minimum CAPMH45F spacing/notch ... 1.5
  EXT capmh45f < 1.5 ABUT <90 SINGULAR REGION
}

S1H5PA {@Minimum CAPMH45F spacing to PAD ... 10.0
  EXT capmh45f pad < 10 ABUT <90 SINGULAR REGION
}

S1H5V3 {@Minimum CAPMH45F spacing to VIA3 ... 0.5
  EXT capmh45f via3 < 0.5 ABUT <90 SINGULAR REGION
}

E1M4H5 {@Minimum MET4 enclosure of CAPMH45F ... 0.5
  ENC capmh45f met4sl < 0.5 ABUT <90 SINGULAR REGION
}

S1H5V4 {@Minimum CAPMH45F spacing to VIA4 ... 0.5
  EXT capmh45f via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1H5V4 {@Minimum CAPMH45F enclosure of VIA4 ... 0.3
  ENC via4 capmh45f < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

capmh45f_s = (SIZE       capmh45f     BY  2.5) NOT capmh45f
cmmh5_m4   = (capmh45f_s AND met4sl)  INTERACT capmh45f
cmmh5_m4v3 = cmmh5_m4    AND          via3
cmmh5_m4v4 = cmmh5_m4    AND          via4

E7M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC cmmh5_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E7M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC cmmh5_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S7V4 {@Minimum VIA4 spacing on CAPMH45F ... 2.0
  EXT (capmh45f AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

capmh45fcp      = capmh45f OR emptlay
Q4V4density     = DENSITY via4 capmh45f < 0.01
                  [AREA(via4)/AREA(capmh45f)]
                  INSIDE OF LAYER capmh45fcp
                  RDB Q4V4density.rdb

Q4V4 {@Recommended minimum ratio of VIA4 area to CAPMH45F area ... 1.0%
  COPY Q4V4density
}
#ELSE
B4H5 {@CAPMH45F without module MET5 is not allowed
  copy capmh45f
}
#ENDIF


#IFDEF METAL3
B2DM {@CAPM2 must be enclosed by MET2 and MET3
  capm2 NOT m2trm
  capm2 NOT m3trm
}

B3DM {@CAPM2 must not be over VIA1 or PAD
  capm2 AND via1
  capm2 AND pad
}

B4DM {@CAPM2 without VIA2 is not allowed
  capm2 OUTSIDE via2
}
 
W1DM {@Minimum CAPM2 width ... 2.0
  INT capm2 < 2 ABUT <90 SINGULAR REGION
}
 
W2DM {@Maximum CAPM2 bounding box size ... 30.0 x 30.0
  RECTANGLE capm2 > 30 MEASURE EXTENTS
}
 
S1DM {@Minimum CAPM2 spacing/notch ... 1.5
  EXT capm2 < 1.5 ABUT <90 SINGULAR REGION
}
 
S1DMPA {@Minimum CAPM2 spacing to PAD ... 10.0
  EXT capm2 pad < 10 ABUT <90 SINGULAR REGION
}
 
S1DMV1 {@Minimum CAPM2 spacing to VIA1 ... 0.5
  EXT capm2 via1 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}
 
S1DMV2 {@Minimum CAPM2 spacing to VIA2 ... 0.5
  EXT capm2 via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}
 
E1DMV2 {@Minimum CAPM2 enclosure of VIA2 ... 0.3
  ENC via2 capm2 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}
 
E1M2DM {@Minimum MET2 enclosure of CAPM2 ... 0.5
  ENC capm2 met2sl < 0.5 ABUT <90 SINGULAR REGION
}
 
E1M3DM {@Minimum MET3 enclosure of CAPM2 ... 0.5
  ENC capm2 met3sl < 0.5 ABUT <90 SINGULAR REGION
}

capm2_s  = (SIZE     capm2      BY  2.5) NOT capm2
dmm_m2   = (capm2_s  AND met2sl) INTERACT capm2
dmm_m3   = (capm2_s  AND met3sl) INTERACT capm2
dmm_m2v1 = dmm_m2   AND          via1
dmm_m2v2 = dmm_m2   AND          via2
dmm_m3v2 = dmm_m3   AND          via2
capmh2_s  = (SIZE     capmh2      BY  2.5) NOT capmh2
dmmh_m2   = (capmh2_s AND met2sl) INTERACT capmh2
dmmh_m3   = (capmh2_s AND met3sl) INTERACT capmh2
dmmh_m2v1 = dmmh_m2   AND          via1
dmmh_m2v2 = dmmh_m2   AND          via2
dmmh_m3v2 = dmmh_m3   AND          via2
 
E3M2V1 {@Minimum MET2 enclosure of VIA1 ... 0.15
  ENC dmm_m2v1 met2sl < 0.15 ABUT <90 SINGULAR REGION
  ENC dmmh_m2v1 met2sl < 0.15 ABUT <90 SINGULAR REGION
}

E4M2V2 {@Minimum MET2 enclosure of VIA2 ... 0.15
  ENC dmm_m2v2 met2sl < 0.15 ABUT <90 SINGULAR REGION
  ENC dmmh_m2v2 met2sl < 0.15 ABUT <90 SINGULAR REGION
}

E4M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.15
  ENC dmm_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
  ENC dmmh_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

S3V2 {@Minimum VIA2 spacing on CAPM2 ... 2.0
  EXT (capm2 AND via2) < 2.0 ABUT <90 SINGULAR REGION
}

capm2cp         = capm2 OR emptlay
Q1V2density     = DENSITY via2 capm2 < 0.01
                  [AREA(via2)/AREA(capm2)]
                  INSIDE OF LAYER capm2cp
                  RDB Q1V2density.rdb

Q1V2 {@Recommended minimum ratio of VIA2 area to CAPM2 area ... 1.0%
  COPY Q1V2density
}

#IFDEF METAL4
B7DM {@CAPM2 without VIA3 is not allowed
  capm2 OUTSIDE via3
}
 
m2_dm = m2trm AND capm2  
m4_dm = m4trm AND capm2
B8DM {@MET2 and MET4 must be connected
      @Note: CAPM2 must be enclosed by MET4
  ENC m2_dm m4_dm == 0 ABUT == 0 NOT CONNECTED REGION
  capm2 NOT m4trm
}
 
S1DMV3 {@Minimum CAPM2 spacing to VIA3 ... 0.5
  EXT capm2 via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}
 
E1DMV3 {@Minimum CAPM2 enclosure of VIA3 ... 0.3
  ENC via3 capm2 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}
 
dmm_m3v3  = dmm_m3   AND          via3
dmmh_m3v3 = dmmh_m3  AND          via3
E4M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.15
  ENC dmm_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
  ENC dmmh_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
}
 
S3V3 {@Minimum VIA3 spacing on CAPM2 ... 2.0
  EXT (capm2 AND via3) < 2.0 ABUT <90 SINGULAR REGION
}
 
Q1V3density     = DENSITY via3 capm2 < 0.01
                  [AREA(via3)/AREA(capm2)]
                  INSIDE OF LAYER capm2cp
                  RDB Q1V3density.rdb

Q1V3 {@Recommended minimum ratio of VIA3 area to CAPM2 area ... 1.0%
  COPY Q1V3density
}

#ELSE
#IFDEF MIDMET
B5DM {@CAPM2 without VIATP is not allowed
  capm2 OUTSIDE viatp
}
 
m2_dm = m2trm AND capm2  
mt_dm = mttrm AND capm2
B6DM {@MET2 and METTP must be connected
      @Note: CAPM2 must be enclosed by METTP
  ENC m2_dm mt_dm == 0 ABUT == 0 NOT CONNECTED REGION
  capm2 NOT mttrm
}

S1DMVT {@Minimum CAPM2 spacing to VIATP ... 0.5
  EXT capm2 viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}
 
E1DMVT {@Minimum CAPM2 enclosure of VIATP ... 0.3
  ENC viatp capm2 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}
 
dmm_m3vt  = dmm_m3   AND          viatp
dmmh_m3vt = dmmh_m3  AND          viatp
E4M3VT {@Minimum MET3 enclosure of VIATP ... 0.15
  ENC dmm_m3vt met3sl < 0.15 ABUT <90 SINGULAR REGION
  ENC dmmh_m3vt met3sl < 0.15 ABUT <90 SINGULAR REGION
}
 
S5VT {@Minimum VIATP spacing on CAPM2 ... 2.0
  EXT (capm2 AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}
 
Q2VTdensity     = DENSITY viatp capm2 < 0.01
                  [AREA(viatp)/AREA(capm2)]
                  INSIDE OF LAYER capm2cp
                  RDB Q2VTdensity.rdb

Q2VT {@Recommended minimum ratio of VIATP area to CAPM2 area ... 1.0%
  COPY Q2VTdensity
}
#ELSE
B10DM {@CAPM2 without module MET4 or METMID is not allowed
  copy capm2
}
#ENDIF
#ENDIF
#ELSE
B9DM {@CAPM2 without module MET3 is not allowed
  copy capm2
}
#ENDIF


#IFDEF METAL4
B2D3 {@CAPM2A must be enclosed by MET3 and MET4
  capm2a NOT m3trm
  capm2a NOT m4trm
}

B3D3 {@CAPM2A must not be over VIA2 or PAD
  capm2a AND via2
  capm2a AND pad
}

B4D3 {@CAPM2A without VIA3 is not allowed
  capm2a OUTSIDE via3
}

W1D3 {@Minimum CAPM2A width ... 2.0
  INT capm2a < 2 ABUT <90 SINGULAR REGION
}

W2D3 {@Maximum CAPM2A bounding box size ... 30.0 x 30.0
  RECTANGLE capm2a > 30 MEASURE EXTENTS
}

S1D3 {@Minimum CAPM2A spacing/notch ... 1.5
  EXT capm2a < 1.5 ABUT <90 SINGULAR REGION
}

S1D3PA {@Minimum CAPM2A spacing to PAD ... 10.0
  EXT capm2a pad < 10 ABUT <90 SINGULAR REGION
}

S1D3V2 {@Minimum CAPM2A spacing to VIA2 ... 0.5
  EXT capm2a via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1D3V3 {@Minimum CAPM2A spacing to VIA3 ... 0.5
  EXT capm2a via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1D3V3 {@Minimum CAPM2A enclosure of VIA3 ... 0.3
  ENC via3 capm2a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1M3D3 {@Minimum MET3 enclosure of CAPM2A ... 0.5
  ENC capm2a met3sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M4D3 {@Minimum MET4 enclosure of CAPM2A ... 0.5
  ENC capm2a met4sl < 0.5 ABUT <90 SINGULAR REGION
}

capm2a_s  = (SIZE     capm2a      BY  2.5) NOT capm2a
dmma_m3   = (capm2a_s AND met3sl) INTERACT capm2a
dmma_m4   = (capm2a_s AND met4sl) INTERACT capm2a
dmma_m3v2 = dmma_m3   AND         via2
dmma_m3v3 = dmma_m3   AND         via3
dmma_m4v3 = dmma_m4   AND         via3

E3M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.15
  ENC dmma_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E8M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.15
  ENC dmma_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E4M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC dmma_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S9V3 {@Minimum VIA3 spacing on CAPM2A ... 2.0
  EXT (capm2a AND via3) < 2.0 ABUT <90 SINGULAR REGION
}

capm2acp        = capm2a OR emptlay
Q7V3density     = DENSITY via3 capm2a < 0.01
                  [AREA(via3)/AREA(capm2a)]
                  INSIDE OF LAYER capm2acp
                  RDB Q7V3density.rdb

Q7V3 {@Recommended minimum ratio of VIA3 area to CAPM2A area ... 1.0%
  COPY Q7V3density
}

#IFDEF METAL5
B7D3 {@CAPM2A without VIA4 is not allowed
  capm2a OUTSIDE via4
}

m3_d3 = m3trm AND capm2a
m5_d3 = m5trm AND capm2a
B8D3 {@MET3 and MET5 must be connected
      @Note: CAPM2A must be enclosed by MET5
  ENC m3_d3 m5_d3 == 0 ABUT == 0 NOT CONNECTED REGION
  capm2a NOT m5trm
}

S1D3V4 {@Minimum CAPM2A spacing to VIA4 ... 0.5
  EXT capm2a via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1D3V4 {@Minimum CAPM2A enclosure of VIA4 ... 0.3
  ENC via4 capm2a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

dmma_m4v4  = dmma_m4   AND          via4
E5M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC dmma_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S5V4 {@Minimum VIA4 spacing on CAPM2A ... 2.0
  EXT (capm2a AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

Q5V4density     = DENSITY via4 capm2a < 0.01
                  [AREA(via4)/AREA(capm2a)]
                  INSIDE OF LAYER capm2acp
                  RDB Q5V4density.rdb

Q5V4 {@Recommended minimum ratio of VIA4 area to CAPM2A area ... 1.0%
  COPY Q5V4density
}

#ELSE
#IFDEF MIDMET
B5D3 {@CAPM2A without VIATP is not allowed
  capm2a OUTSIDE viatp
}

m3_d3 = m3trm AND capm2a
mt_d3 = mttrm AND capm2a
B6D3 {@MET3 and METTP must be connected
      @Note: CAPM2A must be enclosed by METTP
  ENC m3_d3 mt_d3 == 0 ABUT == 0 NOT CONNECTED REGION
  capm2a NOT mttrm
}

S1D3VT {@Minimum CAPM2A spacing to VIATP ... 0.5
  EXT capm2a viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1D3VT {@Minimum CAPM2A enclosure of VIATP ... 0.3
  ENC viatp capm2a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

dmma_m4vt  = dmma_m4   AND          viatp
E5M4VT {@Minimum MET4 enclosure of VIATP ... 0.15
  ENC dmma_m4vt met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S2VT {@Minimum VIATP spacing on CAPM2A ... 2.0
  EXT (capm2a AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

Q7VTdensity     = DENSITY viatp capm2a < 0.01
                  [AREA(viatp)/AREA(capm2a)]
                  INSIDE OF LAYER capm2acp
                  RDB Q7VTdensity.rdb

Q7VT {@Recommended minimum ratio of VIATP area to CAPM2A area ... 1.0%
  COPY Q7VTdensity
}
#ELSE
B10D3 {@CAPM2A without module MET5 or METMID is not allowed
  copy capm2a
}
#ENDIF
#ENDIF
#ELSE
B9D3 {@CAPM2A without module MET4 is not allowed
  copy capm2a
}
#ENDIF


#IFDEF METAL5
B2D4 {@CAPM2B must be enclosed by MET4 and MET5
  capm2b NOT m4trm
  capm2b NOT m5trm
}

B3D4 {@CAPM2B must not be over VIA3 or PAD
  capm2b AND via3
  capm2b AND pad
}

B4D4 {@CAPM2B without VIA4 is not allowed
  capm2b OUTSIDE via4
}

W1D4 {@Minimum CAPM2B width ... 2.0
  INT capm2b < 2 ABUT <90 SINGULAR REGION
}

W2D4 {@Maximum CAPM2B bounding box size ... 30.0 x 30.0
  RECTANGLE capm2b > 30 MEASURE EXTENTS
}

S1D4 {@Minimum CAPM2B spacing/notch ... 1.5
  EXT capm2b < 1.5 ABUT <90 SINGULAR REGION
}

S1D4PA {@Minimum CAPM2B spacing to PAD ... 10.0
  EXT capm2b pad < 10 ABUT <90 SINGULAR REGION
}

S1D4V3 {@Minimum CAPM2B spacing to VIA3 ... 0.5
  EXT capm2b via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1D4V4 {@Minimum CAPM2B spacing to VIA4 ... 0.5
  EXT capm2b via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1D4V4 {@Minimum CAPM2B enclosure of VIA4 ... 0.3
  ENC via4 capm2b < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1M4D4 {@Minimum MET4 enclosure of CAPM2B ... 0.5
  ENC capm2b met4sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M5D4 {@Minimum MET5 enclosure of CAPM2B ... 0.5
  ENC capm2b met5sl < 0.5 ABUT <90 SINGULAR REGION
}

capm2b_s  = (SIZE     capm2b      BY  2.5) NOT capm2b
dmmb_m4   = (capm2b_s AND met4sl) INTERACT capm2b
dmmb_m5   = (capm2b_s AND met5sl) INTERACT capm2b
dmmb_m4v3 = dmmb_m4   AND         via3
dmmb_m4v4 = dmmb_m4   AND         via4
dmmb_m5v4 = dmmb_m5   AND         via4

E8M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC dmmb_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E9M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC dmmb_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E3M5V4 {@Minimum MET5 enclosure of VIA4 ... 0.15
  ENC dmmb_m5v4 met5sl < 0.15 ABUT <90 SINGULAR REGION
}

S9V4 {@Minimum VIA4 spacing on CAPM2B ... 2.0
  EXT (capm2b AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

capm2bcp        = capm2b OR emptlay
Q7V4density     = DENSITY via4 capm2b < 0.01
                  [AREA(via4)/AREA(capm2b)]
                  INSIDE OF LAYER capm2bcp
                  RDB Q7V4density.rdb

Q7V4 {@Recommended minimum ratio of VIA4 area to CAPM2B area ... 1.0%
  COPY Q7V4density
}

#IFDEF MIDMET
B5D4 {@CAPM2B without VIATP is not allowed
  capm2b OUTSIDE viatp
}

m4_d4 = m4trm AND capm2b
mt_d4 = mttrm AND capm2b
B6D4 {@MET4 and METTP must be connected
      @Note: CAPM2B must be enclosed by METTP
  ENC m4_d4 mt_d4 == 0 ABUT == 0 NOT CONNECTED REGION
  capm2b NOT mttrm
}

S1D4VT {@Minimum CAPM2B spacing to VIATP ... 0.5
  EXT capm2b viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1D4VT {@Minimum CAPM2B enclosure of VIATP ... 0.3
  ENC viatp capm2b < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

dmmb_m5vt  = dmmb_m5   AND          viatp
E4M5VT {@Minimum MET5 enclosure of VIATP ... 0.15
  ENC dmmb_m5vt met5sl < 0.15 ABUT <90 SINGULAR REGION
}

S10VT {@Minimum VIATP spacing on CAPM2B ... 2.0
  EXT (capm2b AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

Q9VTdensity     = DENSITY viatp capm2b < 0.01
                  [AREA(viatp)/AREA(capm2b)]
                  INSIDE OF LAYER capm2bcp
                  RDB Q9VTdensity.rdb

Q9VT {@Recommended minimum ratio of VIATP area to CAPM2B area ... 1.0%
  COPY Q9VTdensity
}
#ELSE
B8D4 {@CAPM2B without module METMID is not allowed
  copy capm2b
}
#ENDIF
#ELSE
B7D4 {@CAPM2B without module MET5 is not allowed
  copy capm2b
}
#ENDIF


#IFDEF METAL3
B2DH {@CAPMH2 must be enclosed by MET2 and MET3
  capmh2 NOT m2trm
  capmh2 NOT m3trm
}

B3DH {@CAPMH2 must not be over VIA1 or PAD
  capmh2 AND via1
  capmh2 AND pad
}

B4DH {@CAPMH2 without VIA2 is not allowed
  capmh2 OUTSIDE via2
}

W1DH {@Minimum CAPMH2 width ... 2.0
  INT capmh2 < 2 ABUT <90 SINGULAR REGION
}

W2DH {@Maximum CAPMH2 bounding box size ... 30.0 x 30.0
  RECTANGLE capmh2 > 30 MEASURE EXTENTS
}

S1DH {@Minimum CAPMH2 spacing/notch ... 1.5
  EXT capmh2 < 1.5 ABUT <90 SINGULAR REGION
}

S1DHPA {@Minimum CAPMH2 spacing to PAD ... 10.0
  EXT capmh2 pad < 10 ABUT <90 SINGULAR REGION
}

S1DHV1 {@Minimum CAPMH2 spacing to VIA1 ... 0.5
  EXT capmh2 via1 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1DHV2 {@Minimum CAPMH2 spacing to VIA2 ... 0.5
  EXT capmh2 via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1DHV2 {@Minimum CAPMH2 enclosure of VIA2 ... 0.3
  ENC via2 capmh2 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1M2DH {@Minimum MET2 enclosure of CAPMH2 ... 0.5
  ENC capmh2 met2sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M3DH {@Minimum MET3 enclosure of CAPMH2 ... 0.5
  ENC capmh2 met3sl < 0.5 ABUT <90 SINGULAR REGION
}

S7V2 {@Minimum VIA2 spacing on CAPMH2 ... 2.0
  EXT (capmh2 AND via2) < 2.0 ABUT <90 SINGULAR REGION
}

capmh2cp        = capmh2 OR emptlay
Q5V2density     = DENSITY via2 capmh2 < 0.01
                  [AREA(via2)/AREA(capmh2)]
                  INSIDE OF LAYER capmh2cp
                  RDB Q5V2density.rdb

Q5V2 {@Recommended minimum ratio of VIA2 area to CAPMH2 area ... 1.0%
  COPY Q5V2density
}

#IFDEF METAL4
B7DH {@CAPMH2 without VIA3 is not allowed
  capmh2 OUTSIDE via3
}

m2_dmh = m2trm AND capmh2
m4_dmh = m4trm AND capmh2
B8DH {@MET2 and MET4 must be connected
      @Note: CAPMH2 must be enclosed by MET4
  ENC m2_dmh m4_dmh == 0 ABUT == 0 NOT CONNECTED REGION
  capmh2 NOT m4trm
}

S1DHV3 {@Minimum CAPMH2 spacing to VIA3 ... 0.5
  EXT capmh2 via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1DHV3 {@Minimum CAPMH2 enclosure of VIA3 ... 0.3
  ENC via3 capmh2 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

S7V3 {@Minimum VIA3 spacing on CAPMH2 ... 2.0
  EXT (capmh2 AND via3) < 2.0 ABUT <90 SINGULAR REGION
}

Q5V3density     = DENSITY via3 capmh2 < 0.01
                  [AREA(via3)/AREA(capmh2)]
                  INSIDE OF LAYER capmh2cp
                  RDB Q5V3density.rdb

Q5V3 {@Recommended minimum ratio of VIA3 area to CAPMH2 area ... 1.0%
  COPY Q5V3density
}

#ELSE
#IFDEF MIDMET
B5DH {@CAPMH2 without VIATP is not allowed
  capmh2 OUTSIDE viatp
}

m2_dmh = m2trm AND capmh2
mt_dmh = mttrm AND capmh2
B6DH {@MET2 and METTP must be connected
      @Note: CAPMH2 must be enclosed by METTP
  ENC m2_dmh mt_dmh == 0 ABUT == 0 NOT CONNECTED REGION
  capmh2 NOT mttrm
}

S1DHVT {@Minimum CAPMH2 spacing to VIATP ... 0.5
  EXT capmh2 viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1DHVT {@Minimum CAPMH2 enclosure of VIATP ... 0.3
  ENC viatp capmh2 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

S7VT {@Minimum VIATP spacing on CAPMH2 ... 2.0
  EXT (capmh2 AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

Q5VTdensity     = DENSITY viatp capmh2 < 0.01
                  [AREA(viatp)/AREA(capmh2)]
                  INSIDE OF LAYER capmh2cp
                  RDB Q5VTdensity.rdb

Q5VT {@Recommended minimum ratio of VIATP area to CAPMH2 area ... 1.0%
  COPY Q5VTdensity
}
#ELSE
B10DH {@CAPMH2 without module MET4 or METMID is not allowed
  copy capmh2
}
#ENDIF
#ENDIF
#ELSE
B9DH {@CAPMH2 without module MET3 is not allowed
  copy capmh2
}
#ENDIF


#IFDEF METAL4
B2K3 {@CAPMH2A must be enclosed by MET3 and MET4
  capmh2a NOT m3trm
  capmh2a NOT m4trm
}

B3K3 {@CAPMH2A must not be over VIA2 or PAD
  capmh2a AND via2
  capmh2a AND pad
}

B4K3 {@CAPMH2A without VIA3 is not allowed
  capmh2a OUTSIDE via3
}

W1K3 {@Minimum CAPMH2A width ... 2.0
  INT capmh2a < 2 ABUT <90 SINGULAR REGION
}

W2K3 {@Maximum CAPMH2A bounding box size ... 30.0 x 30.0
  RECTANGLE capmh2a > 30 MEASURE EXTENTS
}

S1K3 {@Minimum CAPMH2A spacing/notch ... 1.5
  EXT capmh2a < 1.5 ABUT <90 SINGULAR REGION
}

S1K3PA {@Minimum CAPMH2A spacing to PAD ... 10.0
  EXT capmh2a pad < 10 ABUT <90 SINGULAR REGION
}

S1K3V2 {@Minimum CAPMH2A spacing to VIA2 ... 0.5
  EXT capmh2a via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1K3V3 {@Minimum CAPMH2A spacing to VIA3 ... 0.5
  EXT capmh2a via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1K3V3 {@Minimum CAPMH2A enclosure of VIA3 ... 0.3
  ENC via3 capmh2a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1M3K3 {@Minimum MET3 enclosure of CAPMH2A ... 0.5
  ENC capmh2a met3sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M4K3 {@Minimum MET4 enclosure of CAPMH2A ... 0.5
  ENC capmh2a met4sl < 0.5 ABUT <90 SINGULAR REGION
}

capmh2a_s  = (SIZE      capmh2a     BY  2.5) NOT capmh2a
dmmha_m3   = (capmh2a_s AND met3sl) INTERACT capmh2a
dmmha_m4   = (capmh2a_s AND met4sl) INTERACT capmh2a
dmmha_m3v2 = dmmha_m3   AND         via2
dmmha_m3v3 = dmmha_m3   AND         via3
dmmha_m4v3 = dmmha_m4   AND         via3

E8M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.15
  ENC dmmha_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E9M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.15
  ENC dmmha_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E5M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC dmmha_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S10V3 {@Minimum VIA3 spacing on CAPMH2A ... 2.0
  EXT (capmh2a AND via3) < 2.0 ABUT <90 SINGULAR REGION
}

capmh2acp       = capmh2a OR emptlay
Q8V3density     = DENSITY via3 capmh2a < 0.01
                  [AREA(via3)/AREA(capmh2a)]
                  INSIDE OF LAYER capmh2acp
                  RDB Q8V3density.rdb

Q8V3 {@Recommended minimum ratio of VIA3 area to CAPMH2A area ... 1.0%
  COPY Q8V3density
}

#IFDEF METAL5
B7K3 {@CAPMH2A without VIA4 is not allowed
  capmh2a OUTSIDE via4
}

m3_k3 = m3trm AND capmh2a
m5_k3 = m5trm AND capmh2a
B8K3 {@MET3 and MET5 must be connected
      @Note: CAPMH2A must be enclosed by MET5
  ENC m3_k3 m5_k3 == 0 ABUT == 0 NOT CONNECTED REGION
  capmh2a NOT m5trm
}

S1K3V4 {@Minimum CAPMH2A spacing to VIA4 ... 0.5
  EXT capmh2a via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1K3V4 {@Minimum CAPMH2A enclosure of VIA4 ... 0.3
  ENC via4 capmh2a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

dmmha_m4v4 = dmmha_m4  AND          via4
E8M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC dmmha_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S8V4 {@Minimum VIA4 spacing on CAPMH2A ... 2.0
  EXT (capmh2a AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

Q6V4density     = DENSITY via4 capmh2a < 0.01
                  [AREA(via4)/AREA(capmh2a)]
                  INSIDE OF LAYER capmh2acp
                  RDB Q6V4density.rdb

Q6V4 {@Recommended minimum ratio of VIA4 area to CAPMH2A area ... 1.0%
  COPY Q6V4density
}

#ELSE
#IFDEF MIDMET
B5K3 {@CAPMH2A without VIATP is not allowed
  capmh2a OUTSIDE viatp
}

m3_k3 = m3trm AND capmh2a
mt_k3 = mttrm AND capmh2a
B6K3 {@MET3 and METTP must be connected
      @Note: CAPMH2A must be enclosed by METTP
  ENC m3_k3 mt_k3 == 0 ABUT == 0 NOT CONNECTED REGION
  capmh2a NOT mttrm
}

S1K3VT {@Minimum CAPMH2A spacing to VIATP ... 0.5
  EXT capmh2a viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1K3VT {@Minimum CAPMH2A enclosure of VIATP ... 0.3
  ENC viatp capmh2a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

dmmha_m4vt = dmmha_m4  AND          viatp
E7M4VT {@Minimum MET4 enclosure of VIATP ... 0.15
  ENC dmmha_m4vt met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S9VT {@Minimum VIATP spacing on CAPMH2A ... 2.0
  EXT (capmh2a AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

Q8VTdensity     = DENSITY viatp capmh2a < 0.01
                  [AREA(viatp)/AREA(capmh2a)]
                  INSIDE OF LAYER capmh2acp
                  RDB Q8VTdensity.rdb

Q8VT {@Recommended minimum ratio of VIATP area to CAPMH2A area ... 1.0%
  COPY Q8VTdensity
}
#ELSE
B10K3 {@CAPMH2A without module MET5 or METMID is not allowed
  copy capmh2a
}
#ENDIF
#ENDIF
#ELSE
B9K3 {@CAPMH2A without module MET4 is not allowed
  copy capmh2a
}
#ENDIF


#IFDEF METAL5
B2K4 {@CAPMH2B must be enclosed by MET4 and MET5
  capmh2b NOT m4trm
  capmh2b NOT m5trm
}

B3K4 {@CAPMH2B must not be over VIA3 or PAD
  capmh2b AND via3
  capmh2b AND pad
}

B4K4 {@CAPMH2B without VIA4 is not allowed
  capmh2b OUTSIDE via4
}

W1K4 {@Minimum CAPMH2B width ... 2.0
  INT capmh2b < 2 ABUT <90 SINGULAR REGION
}

W2K4 {@Maximum CAPMH2B bounding box size ... 30.0 x 30.0
  RECTANGLE capmh2b > 30 MEASURE EXTENTS
}

S1K4 {@Minimum CAPMH2B spacing/notch ... 1.5
  EXT capmh2b < 1.5 ABUT <90 SINGULAR REGION
}

S1K4PA {@Minimum CAPMH2B spacing to PAD ... 10.0
  EXT capmh2b pad < 10 ABUT <90 SINGULAR REGION
}

S1K4V3 {@Minimum CAPMH2B spacing to VIA3 ... 0.5
  EXT capmh2b via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1K4V4 {@Minimum CAPMH2B spacing to VIA4 ... 0.5
  EXT capmh2b via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1K4V4 {@Minimum CAPMH2B enclosure of VIA4 ... 0.3
  ENC via4 capmh2b < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1M4K4 {@Minimum MET4 enclosure of CAPMH2B ... 0.5
  ENC capmh2b met4sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M5K4 {@Minimum MET5 enclosure of CAPMH2B ... 0.5
  ENC capmh2b met5sl < 0.5 ABUT <90 SINGULAR REGION
}

capmh2b_s  = (SIZE      capmh2b     BY  2.5) NOT capmh2b
dmmhb_m4   = (capmh2b_s AND met4sl) INTERACT capmh2b
dmmhb_m5   = (capmh2b_s AND met5sl) INTERACT capmh2b
dmmhb_m4v3 = dmmhb_m4   AND         via3
dmmhb_m4v4 = dmmhb_m4   AND         via4
dmmhb_m5v4 = dmmhb_m5   AND         via4

E9M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC dmmhb_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E10M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC dmmhb_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E4M5V4 {@Minimum MET5 enclosure of VIA4 ... 0.15
  ENC dmmhb_m5v4 met5sl < 0.15 ABUT <90 SINGULAR REGION
}

S10V4 {@Minimum VIA4 spacing on CAPMH2B ... 2.0
  EXT (capmh2b AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

capmh2bcp       = capmh2b OR emptlay
Q8V4density     = DENSITY via4 capmh2b < 0.01
                  [AREA(via4)/AREA(capmh2b)]
                  INSIDE OF LAYER capmh2bcp
                  RDB Q8V4density.rdb

Q8V4 {@Recommended minimum ratio of VIA4 area to CAPMH2B area ... 1.0%
  COPY Q8V4density
}

#IFDEF MIDMET
B5K4 {@CAPMH2B without VIATP is not allowed
  capmh2b OUTSIDE viatp
}

m4_k4 = m4trm AND capmh2b
mt_k4 = mttrm AND capmh2b
B6K4 {@MET4 and METTP must be connected
      @Note: CAPMH2B must be enclosed by METTP
  ENC m4_k4 mt_k4 == 0 ABUT == 0 NOT CONNECTED REGION
  capmh2b NOT mttrm
}

S1K4VT {@Minimum CAPMH2B spacing to VIATP ... 0.5
  EXT capmh2b viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1K4VT {@Minimum CAPMH2B enclosure of VIATP ... 0.3
  ENC viatp capmh2b < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

dmmhb_m5vt = dmmhb_m5  AND          viatp
E5M5VT {@Minimum MET5 enclosure of VIATP ... 0.15
  ENC dmmhb_m5vt met5sl < 0.15 ABUT <90 SINGULAR REGION
}

S11VT {@Minimum VIATP spacing on CAPMH2B ... 2.0
  EXT (capmh2b AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

Q10VTdensity    = DENSITY viatp capmh2b < 0.01
                  [AREA(viatp)/AREA(capmh2b)]
                  INSIDE OF LAYER capmh2bcp
                  RDB Q10VTdensity.rdb

Q10VT {@Recommended minimum ratio of VIATP area to CAPMH2B area ... 1.0%
  COPY Q10VTdensity
}
#ELSE
B8K4 {@CAPMH2B without module METMID is not allowed
  copy capmh2b
}
#ENDIF
#ELSE
B7K4 {@CAPMH2B without module MET5 is not allowed
  copy capmh2b
}
#ENDIF


#IFDEF METAL4
B2TM {@CAPM3 must be enclosed by MET2,MET3 and MET4
  capm3 NOT m2trm
  capm3 NOT m3trm
  capm3 NOT m4trm
}
 
B3TM {@CAPM3 must not be over VIA1 or PAD
  capm3 AND via1
  capm3 AND pad
}

B4TM {@CAPM3 without VIA2 or VIA3 is not allowed
  capm3 OUTSIDE via2
  capm3 OUTSIDE via3
}
 
m2_tm = m2trm AND capm3
m4_tm = m4trm AND capm3
B5TM {@MET2 and MET4 must be connected
  ENC m2_tm m4_tm == 0 ABUT == 0 NOT CONNECTED REGION
}
 
W1TM {@Minimum CAPM3 width ... 2.0
  INT capm3 < 2 ABUT <90 SINGULAR REGION
}
 
W2TM {@Maximum CAPM3 bounding box size ... 30.0 x 30.0
  RECTANGLE capm3 > 30 MEASURE EXTENTS
}
 
S1TM {@Minimum CAPM3 spacing/notch ... 1.5
  EXT capm3 < 1.5 ABUT <90 SINGULAR REGION
}
 
S1TMPA {@Minimum CAPM3 spacing to PAD ... 10.0
  EXT capm3 pad < 10 ABUT <90 SINGULAR REGION
}
 
S1TMV1 {@Minimum CAPM3 spacing to VIA1 ... 0.5
  EXT capm3 via1 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}
 
S1TMV2 {@Minimum CAPM3 spacing to VIA2 ... 0.5
  EXT capm3 via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1TMV3 {@Minimum CAPM3 spacing to VIA3 ... 0.5
  EXT capm3 via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}
 
E1TMV2 {@Minimum CAPM3 enclosure of VIA2 ... 0.3
  ENC via2 capm3 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}
 
E1TMV3 {@Minimum CAPM3 enclosure of VIA3 ... 0.3
  ENC via3 capm3 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}
 
E1M2TM {@Minimum MET2 enclosure of CAPM3 ... 0.5
  ENC capm3 met2sl < 0.5 ABUT <90 SINGULAR REGION
}
 
E1M3TM {@Minimum MET3 enclosure of CAPM3 ... 0.5
  ENC capm3 met3sl < 0.5 ABUT <90 SINGULAR REGION
}
 
E1M4TM {@Minimum MET4 enclosure of CAPM3 ... 0.5
  ENC capm3 met4sl < 0.5 ABUT <90 SINGULAR REGION
}
 
capm3_s  = (SIZE     capm3      BY  2.5) NOT capm3
tmm_m2   = (capm3_s  AND met2sl) INTERACT capm3
tmm_m3   = (capm3_s  AND met3sl) INTERACT capm3
tmm_m4   = (capm3_s  AND met4sl) INTERACT capm3
tmm_m2v1 = tmm_m2   AND          via1
tmm_m2v2 = tmm_m2   AND          via2
tmm_m3v2 = tmm_m3   AND          via2
tmm_m3v3 = tmm_m3   AND          via3
tmm_m4v3 = tmm_m4   AND          via3
capmh3_s  = (SIZE     capmh3      BY  2.5) NOT capmh3
tmmh_m2   = (capmh3_s AND met2sl) INTERACT capmh3
tmmh_m3   = (capmh3_s AND met3sl) INTERACT capmh3
tmmh_m4   = (capmh3_s AND met4sl) INTERACT capmh3
tmmh_m2v1 = tmmh_m2   AND          via1
tmmh_m2v2 = tmmh_m2   AND          via2
tmmh_m3v2 = tmmh_m3   AND          via2
tmmh_m3v3 = tmmh_m3   AND          via3
tmmh_m4v3 = tmmh_m4   AND          via3

E4M2V1 {@Minimum MET2 enclosure of VIA1 ... 0.15
  ENC tmm_m2v1 met2sl < 0.15 ABUT <90 SINGULAR REGION
  ENC tmmh_m2v1 met2sl < 0.15 ABUT <90 SINGULAR REGION
}

E5M2V2 {@Minimum MET2 enclosure of VIA2 ... 0.15
  ENC tmm_m2v2 met2sl < 0.15 ABUT <90 SINGULAR REGION
  ENC tmmh_m2v2 met2sl < 0.15 ABUT <90 SINGULAR REGION
}

E5M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.15
  ENC tmm_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
  ENC tmmh_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E5M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.15
  ENC tmm_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
  ENC tmmh_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E3M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC tmm_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
  ENC tmmh_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}
 
S4V2 {@Minimum VIA2 spacing on CAPM3 ... 2.0
  EXT (capm3 AND via2) < 2.0 ABUT <90 SINGULAR REGION
}

S4V3 {@Minimum VIA3 spacing on CAPM3 ... 2.0
  EXT (capm3 AND via3) < 2.0 ABUT <90 SINGULAR REGION
}
 
capm3cp         = capm3 OR emptlay
Q2V2density     = DENSITY via2 capm3 < 0.01
                  [AREA(via2)/AREA(capm3)]
                  INSIDE OF LAYER capm3cp
                  RDB Q2V2density.rdb

Q2V2 {@Recommended minimum ratio of VIA2 area to CAPM3 area ... 1.0%
  COPY Q2V2density
}

Q2V3density     = DENSITY via3 capm3 < 0.01
                  [AREA(via3)/AREA(capm3)]
                  INSIDE OF LAYER capm3cp
                  RDB Q2V3density.rdb

Q2V3 {@Recommended minimum ratio of VIA3 area to CAPM3 area ... 1.0%
  COPY Q2V3density
}

#IFDEF METAL5
B8TM {@CAPM3 without VIA4 is not allowed
  capm3 OUTSIDE via4
}

m3_tm = m3trm AND capm3
m5_tm = m5trm AND capm3
B9TM {@MET3 and MET5 must be connected
      @Note: CAPM3 must be enclosed by MET5
  ENC m3_tm m5_tm == 0 ABUT == 0 NOT CONNECTED REGION
  capm3 NOT m5trm
}

S1TMV4 {@Minimum CAPM3 spacing to VIA4 ... 0.5
  EXT capm3 via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1TMV4 {@Minimum CAPM3 enclosure of VIA4 ... 0.3
  ENC via4 capm3 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

tmm_m4v4  = tmm_m4   AND          via4
tmmh_m4v4 = tmmh_m4  AND          via4
E4M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC tmm_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
  ENC tmmh_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

S3V4 {@Minimum VIA4 spacing on CAPM3 ... 2.0
  EXT (capm3 AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

Q1V4density     = DENSITY via4 capm3 < 0.01
                  [AREA(via4)/AREA(capm3)]
                  INSIDE OF LAYER capm3cp
                  RDB Q1V4density.rdb

Q1V4 {@Recommended minimum ratio of VIA4 area to CAPM3 area ... 1.0%
  COPY Q1V4density
}

#ELSE
#IFDEF MIDMET
B6TM {@CAPM3 without VIATP is not allowed
  capm3 OUTSIDE viatp
}
 
m3_tm = m3trm AND capm3
mt_tm = mttrm AND capm3
B7TM {@MET3 and METTP must be connected
      @Note: CAPM3 must be enclosed by METTP
  ENC m3_tm mt_tm == 0 ABUT == 0 NOT CONNECTED REGION
  capm3 NOT mttrm
}
 
S1TMVT {@Minimum CAPM3 spacing to VIATP ... 0.5
  EXT capm3 viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}
 
E1TMVT {@Minimum CAPM3 enclosure of VIATP ... 0.3
  ENC viatp capm3 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}
 
tmm_m4vt  = tmm_m4   AND          viatp
tmmh_m4vt = tmmh_m4  AND          viatp
E4M4VT {@Minimum MET4 enclosure of VIATP ... 0.15
  ENC tmm_m4vt met4sl < 0.15 ABUT <90 SINGULAR REGION
  ENC tmmh_m4vt met4sl < 0.15 ABUT <90 SINGULAR REGION
}
 
S6VT {@Minimum VIATP spacing on CAPM3 ... 2.0
  EXT (capm3 AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}
 
Q3VTdensity     = DENSITY viatp capm3 < 0.01
                  [AREA(viatp)/AREA(capm3)]
                  INSIDE OF LAYER capm3cp
                  RDB Q3VTdensity.rdb

Q3VT {@Recommended minimum ratio of VIATP area to CAPM3 area ... 1.0%
  COPY Q3VTdensity
}
#ELSE
B11TM {@CAPM3 without module MET5 or METMID is not allowed
  copy capm3
}
#ENDIF
#ENDIF
#ELSE
B10TM {@CAPM3 without module MET4 is not allowed
  copy capm3
}
#ENDIF


#IFDEF METAL5
B2T3 {@CAPM3A must be enclosed by MET3, MET4 and MET5
  capm3a NOT m3trm
  capm3a NOT m4trm
  capm3a NOT m5trm
}

B3T3 {@CAPM3A must not be over VIA2 or PAD
  capm3a AND via2
  capm3a AND pad
}

B4T3 {@CAPM3A without VIA3 or VIA4 is not allowed
  capm3a OUTSIDE via3
  capm3a OUTSIDE via4
}

m3_t3 = m3trm AND capm3a
m5_t3 = m5trm AND capm3a
B5T3 {@MET3 and MET5 must be connected
  ENC m3_t3 m5_t3 == 0 ABUT == 0 NOT CONNECTED REGION
}

W1T3 {@Minimum CAPM3A width ... 2.0
  INT capm3a < 2 ABUT <90 SINGULAR REGION
}

W2T3 {@Maximum CAPM3A bounding box size ... 30.0 x 30.0
  RECTANGLE capm3a > 30 MEASURE EXTENTS
}

S1T3 {@Minimum CAPM3A spacing/notch ... 1.5
  EXT capm3a < 1.5 ABUT <90 SINGULAR REGION
}

S1T3PA {@Minimum CAPM3A spacing to PAD ... 10.0
  EXT capm3a pad < 10 ABUT <90 SINGULAR REGION
}

S1T3V2 {@Minimum CAPM3A spacing to VIA2 ... 0.5
  EXT capm3a via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1T3V3 {@Minimum CAPM3A spacing to VIA3 ... 0.5
  EXT capm3a via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1T3V4 {@Minimum CAPM3A spacing to VIA4 ... 0.5
  EXT capm3a via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1T3V3 {@Minimum CAPM3A enclosure of VIA3 ... 0.3
  ENC via3 capm3a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1T3V4 {@Minimum CAPM3A enclosure of VIA4 ... 0.3
  ENC via4 capm3a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1M3T3 {@Minimum MET3 enclosure of CAPM3A ... 0.5
  ENC capm3a met3sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M4T3 {@Minimum MET4 enclosure of CAPM3A ... 0.5
  ENC capm3a met4sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M5T3 {@Minimum MET5 enclosure of CAPM3A ... 0.5
  ENC capm3a met5sl < 0.5 ABUT <90 SINGULAR REGION
}

capm3a_s  = (SIZE     capm3a      BY  2.5) NOT capm3a
tmma_m3   = (capm3a_s AND met3sl) INTERACT capm3a
tmma_m4   = (capm3a_s AND met4sl) INTERACT capm3a
tmma_m5   = (capm3a_s AND met5sl) INTERACT capm3a
tmma_m3v2 = tmma_m3   AND          via2
tmma_m3v3 = tmma_m3   AND          via3
tmma_m4v3 = tmma_m4   AND          via3
tmma_m4v4 = tmma_m4   AND          via4
tmma_m5v4 = tmma_m5   AND          via4

E9M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.15
  ENC tmma_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E10M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.15
  ENC tmma_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E10M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC tmma_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E11M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC tmma_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E5M5V4 {@Minimum MET5 enclosure of VIA4 ... 0.15
  ENC tmma_m5v4 met5sl < 0.15 ABUT <90 SINGULAR REGION
}

S11V3 {@Minimum VIA3 spacing on CAPM3A ... 2.0
  EXT (capm3a AND via3) < 2.0 ABUT <90 SINGULAR REGION
}

S11V4 {@Minimum VIA4 spacing on CAPM3A ... 2.0
  EXT (capm3a AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

capm3acp        = capm3a OR emptlay
Q9V3density     = DENSITY via3 capm3a < 0.01
                  [AREA(via3)/AREA(capm3a)]
                  INSIDE OF LAYER capm3acp
                  RDB Q9V3density.rdb

Q9V3 {@Recommended minimum ratio of VIA3 area to CAPM3A area ... 1.0%
  COPY Q9V3density
}

Q9V4density     = DENSITY via4 capm3a < 0.01
                  [AREA(via4)/AREA(capm3a)]
                  INSIDE OF LAYER capm3acp
                  RDB Q9V4density.rdb

Q9V4 {@Recommended minimum ratio of VIA4 area to CAPM3A area ... 1.0%
  COPY Q9V4density
}

#IFDEF MIDMET
B6T3 {@CAPM3A without VIATP is not allowed
  capm3a OUTSIDE viatp
}

m4_t3 = m4trm AND capm3a
mt_t3 = mttrm AND capm3a
B7T3 {@MET4 and METTP must be connected
      @Note: CAPM3A must be enclosed by METTP
  ENC m4_t3 mt_t3 == 0 ABUT == 0 NOT CONNECTED REGION
  capm3a NOT mttrm
}

S1T3VT {@Minimum CAPM3A spacing to VIATP ... 0.5
  EXT capm3a viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1T3VT {@Minimum CAPM3A enclosure of VIATP ... 0.3
  ENC viatp capm3a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

tmma_m5vt  = tmma_m5   AND          viatp
E7M5VT {@Minimum MET5 enclosure of VIATP ... 0.15
  ENC tmma_m5vt met5sl < 0.15 ABUT <90 SINGULAR REGION
}

S12VT {@Minimum VIATP spacing on CAPM3A ... 2.0
  EXT (capm3a AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

Q11VTdensity     = DENSITY viatp capm3a < 0.01
                  [AREA(viatp)/AREA(capm3a)]
                  INSIDE OF LAYER capm3acp
                  RDB Q11VTdensity.rdb

Q11VT {@Recommended minimum ratio of VIATP area to CAPM3A area ... 1.0%
  COPY Q11VTdensity
}
#ELSE
B9T3 {@CAPM3A without module METMID is not allowed
  copy capm3a
}
#ENDIF
#ELSE
B8T3 {@CAPM3A without module MET5 is not allowed
  copy capm3a
}
#ENDIF


#IFDEF METAL4
B2TH {@CAPMH3 must be enclosed by MET2,MET3 and MET4
  capmh3 NOT m2trm
  capmh3 NOT m3trm
  capmh3 NOT m4trm
}

B3TH {@CAPMH3 must not be over VIA1 or PAD
  capmh3 AND via1
  capmh3 AND pad
}

B4TH {@CAPMH3 without VIA2 or VIA3 is not allowed
  capmh3 OUTSIDE via2
  capmh3 OUTSIDE via3
}

m2_tmh = m2trm AND capmh3
m4_tmh = m4trm AND capmh3
B5TH {@MET2 and MET4 must be connected
  ENC m2_tmh m4_tmh == 0 ABUT == 0 NOT CONNECTED REGION
}

W1TH {@Minimum CAPMH3 width ... 2.0
  INT capmh3 < 2 ABUT <90 SINGULAR REGION
}

W2TH {@Maximum CAPMH3 bounding box size ... 30.0 x 30.0
  RECTANGLE capmh3 > 30 MEASURE EXTENTS
}

S1TH {@Minimum CAPMH3 spacing/notch ... 1.5
  EXT capmh3 < 1.5 ABUT <90 SINGULAR REGION
}

S1THPA {@Minimum CAPMH3 spacing to PAD ... 10.0
  EXT capmh3 pad < 10 ABUT <90 SINGULAR REGION
}

S1THV1 {@Minimum CAPMH3 spacing to VIA1 ... 0.5
  EXT capmh3 via1 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1THV2 {@Minimum CAPMH3 spacing to VIA2 ... 0.5
  EXT capmh3 via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1THV3 {@Minimum CAPMH3 spacing to VIA3 ... 0.5
  EXT capmh3 via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1THV2 {@Minimum CAPMH3 enclosure of VIA2 ... 0.3
  ENC via2 capmh3 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1THV3 {@Minimum CAPMH3 enclosure of VIA3 ... 0.3
  ENC via3 capmh3 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1M2TH {@Minimum MET2 enclosure of CAPMH3 ... 0.5
  ENC capmh3 met2sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M3TH {@Minimum MET3 enclosure of CAPMH3 ... 0.5
  ENC capmh3 met3sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M4TH {@Minimum MET4 enclosure of CAPMH3 ... 0.5
  ENC capmh3 met4sl < 0.5 ABUT <90 SINGULAR REGION
}

S8V2 {@Minimum VIA2 spacing on CAPMH3 ... 2.0
  EXT (capmh3 AND via2) < 2.0 ABUT <90 SINGULAR REGION
}

S8V3 {@Minimum VIA3 spacing on CAPMH3 ... 2.0
  EXT (capmh3 AND via3) < 2.0 ABUT <90 SINGULAR REGION
}

capmh3cp        = capmh3 OR emptlay
Q6V2density     = DENSITY via2 capmh3 < 0.01
                  [AREA(via2)/AREA(capmh3)]
                  INSIDE OF LAYER capmh3cp
                  RDB Q6V2density.rdb

Q6V2 {@Recommended minimum ratio of VIA2 area to CAPMH3 area ... 1.0%
  COPY Q6V2density
}

Q6V3density     = DENSITY via3 capmh3 < 0.01
                  [AREA(via3)/AREA(capmh3)]
                  INSIDE OF LAYER capmh3cp
                  RDB Q6V3density.rdb

Q6V3 {@Recommended minimum ratio of VIA3 area to CAPMH3 area ... 1.0%
  COPY Q6V3density
}

#IFDEF METAL5
B8TH {@CAPMH3 without VIA4 is not allowed
  capmh3 OUTSIDE via4
}

m3_tmh = m3trm AND capmh3
m5_tmh = m5trm AND capmh3
B9TH {@MET3 and MET5 must be connected
      @Note: CAPMH3 must be enclosed by MET5
  ENC m3_tmh m5_tmh == 0 ABUT == 0 NOT CONNECTED REGION
  capmh3 NOT m5trm
}

S1THV4 {@Minimum CAPMH3 spacing to VIA4 ... 0.5
  EXT capmh3 via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1THV4 {@Minimum CAPMH3 enclosure of VIA4 ... 0.3
  ENC via4 capmh3 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

S4V4 {@Minimum VIA4 spacing on CAPMH3 ... 2.0
  EXT (capmh3 AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

Q2V4density     = DENSITY via4 capmh3 < 0.01
                  [AREA(via4)/AREA(capmh3)]
                  INSIDE OF LAYER capmh3cp
                  RDB Q2V4density.rdb

Q2V4 {@Recommended minimum ratio of VIA4 area to CAPMH3 area ... 1.0%
  COPY Q2V4density
}

#ELSE
#IFDEF MIDMET
B6TH {@CAPMH3 without VIATP is not allowed
  capmh3 OUTSIDE viatp
}

m3_tmh = m3trm AND capmh3
mt_tmh = mttrm AND capmh3
B7TH {@MET3 and METTP must be connected
      @Note: CAPMH3 must be enclosed by METTP
  ENC m3_tmh mt_tmh == 0 ABUT == 0 NOT CONNECTED REGION
  capmh3 NOT mttrm
}

S1THVT {@Minimum CAPMH3 spacing to VIATP ... 0.5
  EXT capmh3 viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1THVT {@Minimum CAPMH3 enclosure of VIATP ... 0.3
  ENC viatp capmh3 < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

S8VT {@Minimum VIATP spacing on CAPMH3 ... 2.0
  EXT (capmh3 AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

Q6VTdensity     = DENSITY viatp capmh3 < 0.01
                  [AREA(viatp)/AREA(capmh3)]
                  INSIDE OF LAYER capmh3cp
                  RDB Q6VTdensity.rdb

Q6VT {@Recommended minimum ratio of VIATP area to CAPMH3 area ... 1.0%
  COPY Q6VTdensity
}
#ELSE
B11TH {@CAPMH3 without module MET5 or METMID is not allowed
  copy capmh3
}
#ENDIF
#ENDIF
#ELSE
B10TH {@CAPMH3 without module MET4 is not allowed
  copy capmh3
}
#ENDIF


#IFDEF METAL5
B2J3 {@CAPMH3A must be enclosed by MET3, MET4 and MET5
  capmh3a NOT m3trm
  capmh3a NOT m4trm
  capmh3a NOT m5trm
}

B3J3 {@CAPMH3A must not be over VIA2 or PAD
  capmh3a AND via2
  capmh3a AND pad
}

B4J3 {@CAPMH3A without VIA3 or VIA4 is not allowed
  capmh3a OUTSIDE via3
  capmh3a OUTSIDE via4
}

m3_j3 = m3trm AND capmh3a
m5_j3 = m5trm AND capmh3a
B5J3 {@MET3 and MET5 must be connected
  ENC m3_j3 m5_j3 == 0 ABUT == 0 NOT CONNECTED REGION
}

W1J3 {@Minimum CAPMH3A width ... 2.0
  INT capmh3a < 2 ABUT <90 SINGULAR REGION
}

W2J3 {@Maximum CAPMH3A bounding box size ... 30.0 x 30.0
  RECTANGLE capmh3a > 30 MEASURE EXTENTS
}

S1J3 {@Minimum CAPMH3A spacing/notch ... 1.5
  EXT capmh3a < 1.5 ABUT <90 SINGULAR REGION
}

S1J3PA {@Minimum CAPMH3A spacing to PAD ... 10.0
  EXT capmh3a pad < 10 ABUT <90 SINGULAR REGION
}

S1J3V2 {@Minimum CAPMH3A spacing to VIA2 ... 0.5
  EXT capmh3a via2 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1J3V3 {@Minimum CAPMH3A spacing to VIA3 ... 0.5
  EXT capmh3a via3 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

S1J3V4 {@Minimum CAPMH3A spacing to VIA4 ... 0.5
  EXT capmh3a via4 < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1J3V3 {@Minimum CAPMH3A enclosure of VIA3 ... 0.3
  ENC via3 capmh3a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1J3V4 {@Minimum CAPMH3A enclosure of VIA4 ... 0.3
  ENC via4 capmh3a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

E1M3J3 {@Minimum MET3 enclosure of CAPMH3A ... 0.5
  ENC capmh3a met3sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M4J3 {@Minimum MET4 enclosure of CAPMH3A ... 0.5
  ENC capmh3a met4sl < 0.5 ABUT <90 SINGULAR REGION
}

E1M5J3 {@Minimum MET5 enclosure of CAPMH3A ... 0.5
  ENC capmh3a met5sl < 0.5 ABUT <90 SINGULAR REGION
}

capmh3a_s  = (SIZE      capmh3a     BY  2.5) NOT capmh3a
tmmha_m3   = (capmh3a_s AND met3sl) INTERACT capmh3a
tmmha_m4   = (capmh3a_s AND met4sl) INTERACT capmh3a
tmmha_m5   = (capmh3a_s AND met5sl) INTERACT capmh3a
tmmha_m3v2 = tmmha_m3   AND          via2
tmmha_m3v3 = tmmha_m3   AND          via3
tmmha_m4v3 = tmmha_m4   AND          via3
tmmha_m4v4 = tmmha_m4   AND          via4
tmmha_m5v4 = tmmha_m5   AND          via4

E10M3V2 {@Minimum MET3 enclosure of VIA2 ... 0.15
  ENC tmmha_m3v2 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E11M3V3 {@Minimum MET3 enclosure of VIA3 ... 0.15
  ENC tmmha_m3v3 met3sl < 0.15 ABUT <90 SINGULAR REGION
}

E11M4V3 {@Minimum MET4 enclosure of VIA3 ... 0.15
  ENC tmmha_m4v3 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E12M4V4 {@Minimum MET4 enclosure of VIA4 ... 0.15
  ENC tmmha_m4v4 met4sl < 0.15 ABUT <90 SINGULAR REGION
}

E6M5V4 {@Minimum MET5 enclosure of VIA4 ... 0.15
  ENC tmmha_m5v4 met5sl < 0.15 ABUT <90 SINGULAR REGION
}

S12V3 {@Minimum VIA3 spacing on CAPMH3A ... 2.0
  EXT (capmh3a AND via3) < 2.0 ABUT <90 SINGULAR REGION
}

S12V4 {@Minimum VIA4 spacing on CAPMH3A ... 2.0
  EXT (capmh3a AND via4) < 2.0 ABUT <90 SINGULAR REGION
}

capmh3acp       = capmh3a OR emptlay
Q10V3density    = DENSITY via3 capmh3a < 0.01
                  [AREA(via3)/AREA(capmh3a)]
                  INSIDE OF LAYER capmh3acp
                  RDB Q10V3density.rdb

Q10V3 {@Recommended minimum ratio of VIA3 area to CAPMH3A area ... 1.0%
  COPY Q10V3density
}

Q10V4density    = DENSITY via4 capmh3a < 0.01
                  [AREA(via4)/AREA(capmh3a)]
                  INSIDE OF LAYER capmh3acp
                  RDB Q10V4density.rdb

Q10V4 {@Recommended minimum ratio of VIA4 area to CAPMH3A area ... 1.0%
  COPY Q10V4density
}

#IFDEF MIDMET
B6J3 {@CAPMH3A without VIATP is not allowed
  capmh3a OUTSIDE viatp
}

m4_j3 = m4trm AND capmh3a
mt_j3 = mttrm AND capmh3a
B7J3 {@MET4 and METTP must be connected
      @Note: CAPMH3A must be enclosed by METTP
  ENC m4_j3 mt_j3 == 0 ABUT == 0 NOT CONNECTED REGION
  capmh3a NOT mttrm
}

S1J3VT {@Minimum CAPMH3A spacing to VIATP ... 0.5
  EXT capmh3a viatp < 0.5 ABUT <90 OVERLAP SINGULAR REGION
}

E1J3VT {@Minimum CAPMH3A enclosure of VIATP ... 0.3
  ENC viatp capmh3a < 0.3 ABUT <90 OVERLAP SINGULAR REGION
}

tmmha_m5vt  = tmmha_m5   AND          viatp
E8M5VT {@Minimum MET5 enclosure of VIATP ... 0.15
  ENC tmmha_m5vt met5sl < 0.15 ABUT <90 SINGULAR REGION
}

S13VT {@Minimum VIATP spacing on CAPMH3A ... 2.0
  EXT (capmh3a AND viatp) < 2.0 ABUT <90 SINGULAR REGION
}

Q12VTdensity     = DENSITY viatp capmh3a < 0.01
                  [AREA(viatp)/AREA(capmh3a)]
                  INSIDE OF LAYER capmh3acp
                  RDB Q12VTdensity.rdb

Q12VT {@Recommended minimum ratio of VIATP area to CAPMH3A area ... 1.0%
  COPY Q12VTdensity
}
#ELSE
B9J3 {@CAPMH3A without module METMID is not allowed
  copy capmh3a
}
#ENDIF
#ELSE
B8J3 {@CAPMH3A without module MET5 is not allowed
  copy capmh3a
}
#ENDIF


W1IB {@Minimum NOPIM width ... 60.0
  INT nopim < 60 ABUT <90 SINGULAR REGION
}

S1IB {@Minimum NOPIM spacing/notch ... 20.0
  EXT nopim < 20 ABUT <90 SINGULAR REGION
}

S1IBPA {@Minimum NOPIM spacing to PAD ... 40.0
  EXT nopim pad < 40 ABUT >0 <90 SINGULAR REGION
}


pad_u    = pad      WITH TEXT "USERPAD"   idptxt
pad_p    = pad      WITH TEXT "PROBEPAD"  idptxt
pad_c    = pad      WITH TEXT "CUPAD"  idptxt
pad_b    = pad      OUTSIDE      ((pad_u OR pad_p) OR pad_c)

W1PA {@Minimum PAD width ... 15.0
  INT pad < 15 ABUT <90 SINGULAR REGION
}

S1PA {@Minimum PAD spacing/notch ... 7.0
  EXT pad < 7 ABUT <90 SINGULAR REGION
}


#IFDEF THKMET
CONNECT  pad_b   mltrm
 
pad_s    = SIZE     pad_b      BY  2.0
padvia1  = pad_s    AND          via1
padvial  = pad_s    AND          viatpl
 
B4PA {@PAD without METTPL is not allowed
  pad NOT mettpl
}
 
E1MLPA {@Minimum METTPL enclosure of PAD ... 2.0
  ENC pad mettpl < 2 ABUT <90 SINGULAR REGION
}
 
E2MLVL {@Minimum METTPL enclosure of VIATPL ... 3.0
  ENC padvial mettpl < 3 ABUT <90 SINGULAR REGION
}

S1PAML {@Minimum PAD spacing to METTPL (different net) ... 5.0
  (EXT pad_b mettpl < 5 ABUT <90 SINGULAR MEASURE ALL REGION) NOT
    (EXT pad_b mltrm < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION)
}      
 
R1VLPAdensity   = DENSITY viatpl pad_b < 0.05
                  [AREA(viatpl)/AREA(pad_b)]
                  INSIDE OF LAYER pad_bcp
                  RDB R1VLPAdensity.rdb

R1VLPA {@Minimum ratio of VIATPL (in pad) area to PAD area ... 5%
  COPY R1VLPAdensity
}

#IFDEF MIDMET
padviat  = pad_s    AND          viatp
E2MTVL {@Minimum METTP enclosure of VIATPL ... 3.0
  ENC padvial mettsl < 3 ABUT <90 SINGULAR REGION
}

E1MTPA {@Minimum METTP enclosure of PAD ... 2.0
  ENC pad_b mettsl < 2 ABUT <90 SINGULAR REGION
  pad_b NOT mettsl
}
#ENDIF
 
#ELSE
#IFDEF MIDMET
CONNECT  pad_b   mttrm 

pad_s    = SIZE     pad_b      BY  2.0
padvia1  = pad_s    AND          via1
padviat  = pad_s    AND          viatp


B1PA {@PAD without METTP is not allowed
  pad NOT mettsl
}

E2MTPA {@Minimum METTP enclosure of PAD ... 2.0
  ENC pad mettsl < 2 ABUT <90 SINGULAR REGION
}

#ELSE
#DEFINE THINTOPMETAL
B16PA {@Bond Pad is not available
  copy pad_b
}

B17PA {@Circuit-Under-Pad Bond Pad is not available
  copy pad_c
}
#IFDEF METAL5
B9PA {@PAD without MET5 is not allowed
  pad NOT met5sl
}

E2M5PA {@Minimum MET5 enclosure of PAD ... 2.0
  ENC pad met5sl < 2 ABUT <90 SINGULAR REGION
}

#ELSE
#IFDEF METAL4
B7PA {@PAD without MET4 is not allowed
  pad NOT met4sl
}

E2M4PA {@Minimum MET4 enclosure of PAD ... 2.0
  ENC pad met4sl < 2 ABUT <90 SINGULAR REGION
}

#ELSE
#IFDEF METAL3
B5PA {@PAD without MET3 is not allowed
  pad NOT met3sl
}

E2M3PA {@Minimum MET3 enclosure of PAD ... 2.0
  ENC pad met3sl < 2 ABUT <90 SINGULAR REGION
}

#ELSE
B11PA {@PAD without MET2 is not allowed
  pad NOT met2sl
}

E2M2PA {@Minimum MET2 enclosure of PAD ... 2.0
  ENC pad met2sl < 2 ABUT <90 SINGULAR REGION
}

#ENDIF
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFNDEF THINTOPMETAL
B2PA {@PAD overlap of DIFF or POLY1 is not allowed
  pad_b AND diff_dg
  pad_b AND poly_dg
}

Q1PA {@Minimum recommended bond PAD width ... 53.0
  INT pad_b < 53 ABUT <90 SINGULAR REGION
}

S1PADF {@Minimum PAD spacing to DIFF ... 5.0
  EXT pad_b diff_dg < 5 ABUT <90 SINGULAR REGION
}

S1PAP1 {@Minimum PAD spacing to POLY1 ... 5.0
  EXT pad_b poly_dg < 5 ABUT <90 SINGULAR REGION
}

S1PAM1 {@Minimum PAD spacing to MET1 (different net) ... 5.0
  (EXT pad_b met1sl < 5 ABUT <90 SINGULAR MEASURE ALL REGION) NOT
    ((EXT pad_b m1trm < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION) OR
    (EXT pad_b csf_m1 < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION))
}

S1PAM2 {@Minimum PAD spacing to MET2 (different net) ... 5.0
  (EXT pad_b met2sl < 5 ABUT <90 SINGULAR MEASURE ALL REGION) NOT
    ((EXT pad_b m2trm < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION) OR
    (EXT pad_b csf_m2 < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION))
}

E1M1PA {@Minimum MET1 enclosure of PAD ... 2.0
  ENC pad_b met1sl < 2 ABUT <90 SINGULAR REGION
  pad_b NOT met1sl
}

E1M2PA {@Minimum MET2 enclosure of PAD ... 2.0
  ENC pad_b met2sl < 2 ABUT <90 SINGULAR REGION
  pad_b NOT met2sl
}

S2V1 {@Minimum VIA1 spacing ... 0.45
  EXT padvia1 < 0.45 ABUT <90 SINGULAR REGION
}

E3M1V1 {@Minimum MET1 and MET2 enclosure of VIA1 ... 3.0
  ENC padvia1 met1sl < 3 ABUT <90 SINGULAR REGION
  ENC padvia1 met2sl < 3 ABUT <90 SINGULAR REGION
}

pad_bcp         = pad_b OR emptlay
R1V1PAdensity   = DENSITY via1 pad_b < 0.05
                  [AREA(via1)/AREA(pad_b)]
                  INSIDE OF LAYER pad_bcp
                  RDB R1V1PAdensity.rdb

R1V1PA {@Minimum ratio of VIA1 (in pad) area to PAD area ... 5%
  COPY R1V1PAdensity
}

Q3PA {@Minimum recommended PAD width ... 66.0
  INT pad_c < 66 ABUT <90 SINGULAR REGION
}

#IFDEF METAL3
S1PAM3 {@Minimum PAD spacing to MET3 (different net) ... 5.0
  (EXT pad_b met3sl < 5 ABUT <90 SINGULAR MEASURE ALL REGION) NOT
    ((EXT pad_b m3trm < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION) OR
    (EXT pad_b csf_m3 < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION))
}

E1M3PA {@Minimum MET3 enclosure of PAD ... 2.0
  ENC pad_b met3sl < 2 ABUT <90 SINGULAR REGION
  pad_b NOT met3sl
}

padvia2  = pad_s    AND          via2
S2V2 {@Minimum VIA2 spacing ... 0.45
  EXT padvia2 < 0.45 ABUT <90 SINGULAR REGION
}

S1V2V1 {@Minimum VIA2 spacing to VIA1 ... 0.13
        @Note: VIA2 stacking over VIA1 is not allowed
  EXT padvia2 padvia1 < 0.13 ABUT <90 SINGULAR REGION
  padvia2 AND padvia1
}

E3M2V2 {@Minimum MET2 and MET3 enclosure of VIA2 ... 3.0
  ENC padvia2 met2sl < 3 ABUT <90 SINGULAR REGION
  ENC padvia2 met3sl < 3 ABUT <90 SINGULAR REGION
}

R1V2PAdensity   = DENSITY via2 pad_b < 0.05
                  [AREA(via2)/AREA(pad_b)]
                  INSIDE OF LAYER pad_bcp
                  RDB R1V2PAdensity.rdb

R1V2PA {@Minimum ratio of VIA2 (in pad) area to PAD area ... 5%
  COPY R1V2PAdensity
}
#ENDIF


#IFDEF METAL4
S1PAM4 {@Minimum PAD spacing to MET4 (different net) ... 5.0
  (EXT pad_b met4sl < 5 ABUT <90 SINGULAR MEASURE ALL REGION) NOT
    ((EXT pad_b m4trm < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION) OR
    (EXT pad_b csf_m4 < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION))
}

E1M4PA {@Minimum MET4 enclosure of PAD ... 2.0
  ENC pad_b met4sl < 2 ABUT <90 SINGULAR REGION
  pad_b NOT met4sl
}

padvia3  = pad_s    AND          via3
S2V3 {@Minimum VIA3 spacing ... 0.45
  EXT padvia3 < 0.45 ABUT <90 SINGULAR REGION
}

S1V3V2 {@Minimum VIA3 spacing to VIA2 ... 0.13
        @Note: VIA3 stacking over VIA2 is not allowed
  EXT padvia3 padvia2 < 0.13 ABUT <90 SINGULAR REGION
  padvia3 AND padvia2
}

E3M3V3 {@Minimum MET3 and MET4 enclosure of VIA3 ... 3.0
  ENC padvia3 met3sl < 3 ABUT <90 SINGULAR REGION
  ENC padvia3 met4sl < 3 ABUT <90 SINGULAR REGION
}

R1V3PAdensity   = DENSITY via3 pad_b < 0.05
                  [AREA(via3)/AREA(pad_b)]
                  INSIDE OF LAYER pad_bcp
                  RDB R1V3PAdensity.rdb

R1V3PA {@Minimum ratio of VIA3 (in pad) area to PAD area ... 5%
  COPY R1V3PAdensity
}
#ENDIF


#IFDEF METAL5
S1PAM5 {@Minimum PAD spacing to MET5 (different net) ... 5.0
  (EXT pad_b met5sl < 5 ABUT <90 SINGULAR MEASURE ALL REGION) NOT
    ((EXT pad_b m5trm < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION) OR
    (EXT pad_b csf_m5 < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION))
}

E1M5PA {@Minimum MET5 enclosure of PAD ... 2.0
  ENC pad_b met5sl < 2 ABUT <90 SINGULAR REGION
  pad_b NOT met5sl
}

padvia4  = pad_s    AND          via4
S2V4 {@Minimum VIA4 spacing ... 0.45
  EXT padvia4 < 0.45 ABUT <90 SINGULAR REGION
}

S1V4V3 {@Minimum VIA4 spacing to VIA3 ... 0.13
        @Note: VIA4 stacking over VIA3 is not allowed
  EXT padvia4 padvia3 < 0.13 ABUT <90 SINGULAR REGION
  padvia4 AND padvia3
}

E3M4V4 {@Minimum MET4 and MET5 enclosure of VIA4 ... 3.0
  ENC padvia4 met4sl < 3 ABUT <90 SINGULAR REGION
  ENC padvia4 met5sl < 3 ABUT <90 SINGULAR REGION
}

R1V4PAdensity   = DENSITY via4 pad_b < 0.05
                  [AREA(via4)/AREA(pad_b)]
                  INSIDE OF LAYER pad_bcp
                  RDB R1V4PAdensity.rdb

R1V4PA {@Minimum ratio of VIA4 (in pad) area to PAD area ... 5%
  COPY R1V4PAdensity
}
#ENDIF


#IFDEF MIDMET
S1PAMT {@Minimum PAD spacing to METTP (different net) ... 5.0
  (EXT pad_b mettsl < 5 ABUT <90 SINGULAR MEASURE ALL REGION) NOT
    ((EXT pad_b mttrm < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION) OR
    (EXT pad_b csf_mt < 5 ABUT <90 SINGULAR MEASURE ALL CONNECTED REGION))
}

E2MTVT {@Minimum METTP enclosure of VIATP ... 3.0
  ENC padviat mettsl < 3 ABUT <90 SINGULAR REGION
}

R1VTPAdensity   = DENSITY viatp pad_b < 0.05
                  [AREA(viatp)/AREA(pad_b)]
                  INSIDE OF LAYER pad_bcp
                  RDB R1VTPAdensity.rdb

R1VTPA {@Minimum ratio of VIATP (in pad) area to PAD area ... 5%
  COPY R1VTPAdensity
}

#IFDEF METAL5
S1VTV4 {@Minimum VIATP spacing to VIA4 ... 0.06
        @Note: VIATP stacking over VIA4 is not allowed
  EXT padviat padvia4 < 0.06 ABUT <90 SINGULAR REGION
  padviat AND padvia4
}

E3M5VT {@Minimum MET5 enclosure of VIATP ... 3.0
  ENC padviat met5sl < 3 ABUT <90 SINGULAR REGION
}

#ELSE
#IFDEF METAL4
S1VTV3 {@Minimum VIATP spacing to VIA3 ... 0.06
        @Note: VIATP stacking over VIA3 is not allowed
  EXT padviat padvia3 < 0.06 ABUT <90 SINGULAR REGION
  padviat AND padvia3
}

E3M4VT {@Minimum MET4 enclosure of VIATP ... 3.0
  ENC padviat met4sl < 3 ABUT <90 SINGULAR REGION
}

#ELSE
#IFDEF METAL3
S1VTV2 {@Minimum VIATP spacing to VIA2 ... 0.06
        @Note: VIATP stacking over VIA2 is not allowed
  EXT padviat padvia2 < 0.06 ABUT <90 SINGULAR REGION
  padviat AND padvia2
}

E3M3VT {@Minimum MET3 enclosure of VIATP ... 3.0
  ENC padviat met3sl < 3 ABUT <90 SINGULAR REGION
}
#ELSE
S1VTV1 {@Minimum VIATP spacing to VIA1 ... 0.06
        @Note: VIATP stacking over VIA1 is not allowed
  EXT padviat padvia1 < 0.06 ABUT <90 SINGULAR REGION
  padviat AND padvia1
}

E3M2VT {@Minimum MET2 enclosure of VIATP ... 3.0
  ENC padviat met2sl < 3 ABUT <90 SINGULAR REGION
}
#ENDIF
#ENDIF
#ENDIF
#ENDIF


#IFDEF THKMET
#IFNDEF MIDMET
#IFDEF METAL5
S1VLV4 {@Minimum VIATPL spacing to VIA4 ... 0.06
        @Note: VIATPL stacking over VIA4 is not allowed
  EXT padvial padvia4 < 0.06 ABUT <90 SINGULAR REGION
  padvial AND padvia4
}

E3M5VL {@Minimum MET5 enclosure of VIATPL ... 3.0
  ENC padvial met5sl < 3 ABUT <90 SINGULAR REGION
}
#ELSE
#IFDEF METAL4
S1VLV3 {@Minimum VIATPL spacing to VIA3 ... 0.06
        @Note: VIATPL stacking over VIA3 is not allowed
  EXT padvial padvia3 < 0.06 ABUT <90 SINGULAR REGION
  padvial AND padvia3
}

E3M4VL {@Minimum MET4 enclosure of VIATPL ... 3.0
  ENC padvial met4sl < 3 ABUT <90 SINGULAR REGION
}
#ELSE
#IFDEF METAL3
S1VLV2 {@Minimum VIATPL spacing to VIA2 ... 0.06
        @Note: VIATPL stacking over VIA2 is not allowed
  EXT padvial padvia2 < 0.06 ABUT <90 SINGULAR REGION
  padvial AND padvia2
}

E3M3VL {@Minimum MET3 enclosure of VIATPL ... 3.0
  ENC padvial met3sl < 3 ABUT <90 SINGULAR REGION
}
#ELSE
S1VLV1 {@Minimum VIATPL spacing to VIA1 ... 0.06
        @Note: VIATPL stacking over VIA1 is not allowed
  EXT padvial padvia1 < 0.06 ABUT <90 SINGULAR REGION
  padvial AND padvia1
}

E3M2VL {@Minimum MET2 enclosure of VIATPL ... 3.0
  ENC padvial met2sl < 3 ABUT <90 SINGULAR REGION
}
#ENDIF
#ENDIF
#ENDIF
#ENDIF
#ENDIF


#IFNDEF THKMET
#IFDEF MIDMET
pad_cs   = SIZE     pad_c      BY  2.0
padviatc = pad_cs   AND          viatp
E6MTVT {@Minimum METTP enclosure of VIATP ... 3.0
  ENC padviatc mettsl < 3 ABUT <90 SINGULAR REGION
}

R2VTPAdensity   = DENSITY viatp pad_c < 0.05
                  [AREA(viatp)/AREA(pad_c)]
                  INSIDE OF LAYER pad_bcp
                  RDB R2VTPAdensity.rdb

R2VTPA {@Minimum ratio of VIATP (in pad) area to PAD area ... 5%
  COPY R2VTPAdensity
}
#IFDEF METAL5
E3M5PA {@Minimum MET5 enclosure of PAD ... 2.0
  ENC pad_c met5sl < 2 ABUT <90 SINGULAR REGION
  pad_c NOT met5sl
}

E6M5VT {@Minimum MET5 enclosure of VIATP ... 3.0
  ENC padviatc met5sl < 3 ABUT <90 SINGULAR REGION
}
#ELSE
#IFDEF METAL4
E3M4PA {@Minimum MET4 enclosure of PAD ... 2.0
  ENC pad_c met4sl < 2 ABUT <90 SINGULAR REGION
  pad_c NOT met4sl
}

E6M4VT {@Minimum MET4 enclosure of VIATP ... 3.0
  ENC padviatc met4sl < 3 ABUT <90 SINGULAR REGION
}
#ELSE
#IFDEF METAL3
E3M3PA {@Minimum MET3 enclosure of PAD ... 2.0
  ENC pad_c met3sl < 2 ABUT <90 SINGULAR REGION
  pad_c NOT met3sl
}

E6M3VT {@Minimum MET3 enclosure of VIATP ... 3.0
  ENC padviatc met3sl < 3 ABUT <90 SINGULAR REGION
}
#ELSE
E3M2PA {@Minimum MET2 enclosure of PAD ... 2.0
  ENC pad_c met2sl < 2 ABUT <90 SINGULAR REGION
  pad_c NOT met2sl
}

E6M2VT {@Minimum MET2 enclosure of VIATP ... 3.0
  ENC padviatc met2sl < 3 ABUT <90 SINGULAR REGION
}

B17PA {@Circuit-Under-Pad Bond Pad is not available
  copy pad_c
}
#ENDIF
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#ENDIF

#IFDEF THKMET
B15PA {@Probe PAD with VIATPL is not allowed
  pad_p AND viatpl
}

S1PAVL {@Minimum PAD spacing to VIATPL ... 2.0
  EXT pad_p viatpl < 2.0 ABUT <90 SINGULAR REGION
}
#ELSE
#IFDEF MIDMET
B3PA {@Probe PAD with VIATP is not allowed
  pad_p AND viatp
}

S1PAVT {@Minimum PAD spacing to VIATP ... 2.0
  EXT pad_p viatp < 2.0 ABUT <90 SINGULAR REGION
}
#ELSE
#IFDEF METAL5
B10PA {@Probe PAD with VIA4 is not allowed
  pad_p AND via4
}

S1PAV4 {@Minimum PAD spacing to VIA4 ... 2.0
  EXT pad_p via4 < 2.0 ABUT <90 SINGULAR REGION
}
#ELSE
#IFDEF METAL4
B8PA {@Probe PAD with VIA3 is not allowed
  pad_p AND via3
}

S1PAV3 {@Minimum PAD spacing to VIA3 ... 2.0
  EXT pad_p via3 < 2.0 ABUT <90 SINGULAR REGION
}
#ELSE
#IFDEF METAL3
B6PA {@Probe PAD with VIA2 is not allowed
  pad_p AND via2
}

S1PAV2 {@Minimum PAD spacing to VIA2 ... 2.0
  EXT pad_p via2 < 2.0 ABUT <90 SINGULAR REGION
}
#ELSE
B12PA {@Probe PAD with VIA1 is not allowed
  pad_p AND via1
}

S1PAV1 {@Minimum PAD spacing to VIA1 ... 2.0
  EXT pad_p via1 < 2.0 ABUT <90 SINGULAR REGION
}
#ENDIF
#ENDIF
#ENDIF
#ENDIF
#ENDIF


BDLOCK {@Any structure over LOCKED (ALL) or LOCKED (boundary) is not allowed
  locked AND alwell
  locked AND pwblk
  locked AND diff
  locked AND poly1
  locked AND mvdg
  locked AND lvt
  locked AND sblk
  locked AND nimp
  locked AND pimp
  locked AND depl
  locked AND sci
  locked AND met1
  locked AND met2
  locked AND hres
  locked AND mres
  locked AND blkall
  locked AND blk_p1
  locked AND blk_m1
  locked AND blk_m2
#IFDEF METAL3
  locked AND met3
  locked AND blk_m3
#ENDIF
#IFDEF METAL4
  locked AND met4
  locked AND blk_m4
#ENDIF
#IFDEF METAL5
  locked AND met5
  locked AND blk_m5
#ENDIF
#IFDEF MIDMET
  locked AND mettp
  locked AND blk_mtp
#ENDIF
#IFDEF THKMET
  locked AND mettpl
  locked AND blk_mtpl
#ENDIF
  locked AND nopim
}


B1LOCK {@Any structure over LOCKED (LOCKED1) or LOCKED1 (boundary) is not allowed
  locked1 AND alwell
  locked1 AND pwblk
  locked1 AND diff
  locked1 AND poly1
  locked1 AND mvdg
  locked1 AND lvt
  locked1 AND sblk
  locked1 AND nimp
  locked1 AND pimp
  locked1 AND depl
  locked1 AND sci
  locked1 AND met1
  locked1 AND met2
  locked1 AND hres
  locked1 AND mres
  locked1 AND blkall
  locked1 AND blk_p1
  locked1 AND blk_m1
  locked1 AND blk_m2
#IFDEF METAL3
  locked1 AND met3
  locked1 AND blk_m3
#ENDIF
#IFDEF METAL4
  locked1 AND met4
  locked1 AND blk_m4
  #IFDEF THKMET
  #IFNDEF METAL5
  #IFNDEF MIDMET
  locked1 AND mettpl
  #ENDIF
  #ENDIF
  #ENDIF
  #ELSE
  #IFDEF THKMET
  locked1 AND mettpl
  #ENDIF
#ENDIF
#IFDEF METAL5
  locked1 AND met5
  locked1 AND blk_m5
  #ELSE
  #IFDEF MIDMET
  locked1 AND mettp
  #ENDIF
#ENDIF
#IFDEF MIDMET
  locked1 AND blk_mtp
#ENDIF
#IFDEF THKMET
  locked1 AND blk_mtpl
#ENDIF
  locked1 AND nopim
}


B2LOCK {@Any structure over LOCKED (LOCKED2) or LOCKED2 (boundary) is not allowed
  locked2 AND alwell
  locked2 AND pwblk
  locked2 AND diff
  locked2 AND poly1
  locked2 AND mvdg
  locked2 AND lvt
  locked2 AND sblk
  locked2 AND nimp
  locked2 AND pimp
  locked2 AND depl
  locked2 AND sci
  locked2 AND met1
  locked2 AND met2
  locked2 AND hres
  locked2 AND mres
  locked2 AND blkall
  locked2 AND blk_p1
  locked2 AND blk_m1
  locked2 AND blk_m2
#IFDEF METAL3
  locked2 AND met3
  locked2 AND blk_m3
  #IFDEF THKMET
  #IFNDEF METAL4
  #IFNDEF MIDMET
  locked2 AND mettpl
  #ENDIF
  #ENDIF
  #ENDIF
  #ELSE
  #IFDEF THKMET
  locked2 AND mettpl
  #ENDIF
#ENDIF
#IFDEF METAL4
  locked2 AND met4
  locked2 AND blk_m4
  #ELSE
  #IFDEF MIDMET
  locked2 AND mettp
  #ENDIF
#ENDIF
#IFDEF METAL5
  locked2 AND blk_m5
#ENDIF
#IFDEF MIDMET
  locked2 AND blk_mtp
#ENDIF
#IFDEF THKMET
  locked2 AND blk_mtpl
#ENDIF
  locked2 AND nopim
}


B3LOCK {@Any structure over LOCKED3 (boundary) is not allowed
  locked3 AND alwell
  locked3 AND pwblk
  locked3 AND diff
  locked3 AND poly1
  locked3 AND mvdg
  locked3 AND lvt
  locked3 AND sblk
  locked3 AND nimp
  locked3 AND pimp
  locked3 AND depl
  locked3 AND sci
  locked3 AND met1
  locked3 AND met2
  locked3 AND hres
  locked3 AND mres
  locked3 AND blkall
  locked3 AND blk_p1
  locked3 AND blk_m1
  locked3 AND blk_m2
#IFDEF METAL3
  locked3 AND met3
  locked3 AND blk_m3
  #ELSE
  #IFDEF MIDMET
  locked3 AND mettp
  #ELSE
  #IFDEF THKMET
  locked3 AND mettpl
  #ENDIF
  #ENDIF
#ENDIF
#IFDEF METAL4
  locked3 AND blk_m4
#ENDIF
#IFDEF METAL5
  locked3 AND blk_m5
#ENDIF
#IFDEF MIDMET
  locked3 AND blk_mtp
#ENDIF
#IFDEF THKMET
  locked3 AND blk_mtpl
#ENDIF
  locked3 AND nopim
}


B4LOCK {@Any structure over LOCKED4 (boundary) is not allowed
  locked4 AND alwell
  locked4 AND pwblk
  locked4 AND diff
  locked4 AND poly1
  locked4 AND mvdg
  locked4 AND lvt
  locked4 AND sblk
  locked4 AND nimp
  locked4 AND pimp
  locked4 AND depl
  locked4 AND sci
  locked4 AND met1
  locked4 AND met2
  locked4 AND hres
  locked4 AND mres
  locked4 AND blkall
  locked4 AND blk_p1
  locked4 AND blk_m1
  locked4 AND blk_m2
#IFDEF METAL3
  locked4 AND blk_m3
#ENDIF
#IFDEF METAL4
  locked4 AND blk_m4
#ENDIF
#IFDEF METAL5
  locked4 AND blk_m5
#ENDIF
#IFDEF MIDMET
  locked4 AND blk_mtp
#ENDIF
#IFDEF THKMET
  locked4 AND blk_mtpl
#ENDIF
  locked4 AND nopim
}


BDDF {@Not allowed to be used by customers
  COPY noblkdf
}

BDP1 {@Not allowed to be used by customers
  COPY noblkp1
}

BDXF {@Not allowed to be used by customers
  COPY xflay
}


BDSC {@Not allowed to be used by customers
  COPY sci
}

BDPS {@Not allowed to be used by customers
  COPY pws
}

BDWN {@Not allowed to be used by customers
  COPY dnw_nvm
}


//------------------------------------------------------------
//      HV Label Checks
//------------------------------------------------------------

#IFNDEF XFAB_MT
p1trm_dg    = p1trm AND poly_dg
p1_vlbl100  = p1_vlbl AND tp1_100
p1_vlbl60   = p1_vlbl AND tp1_60
p1_vlbl25   = p1_vlbl AND tp1_25
p1_vlblm100 = p1_vlbl AND tp1_m100
p1_vlblm60  = p1_vlbl AND tp1_m60
p1_vlblm25  = p1_vlbl AND tp1_m25
m1trm_dg    = m1trm AND met1_dg
m1_vlbl100  = m1_vlbl AND tm1_100
m1_vlbl60   = m1_vlbl AND tm1_60
m1_vlbl25   = m1_vlbl AND tm1_25
m1_vlblm100 = m1_vlbl AND tm1_m100
m1_vlblm60  = m1_vlbl AND tm1_m60
m1_vlblm25  = m1_vlbl AND tm1_m25
m2trm_dg    = m2trm AND met2_dg
m2_vlbl100  = m2_vlbl AND tm2_100
m2_vlbl60   = m2_vlbl AND tm2_60
m2_vlbl25   = m2_vlbl AND tm2_25
m2_vlblm100 = m2_vlbl AND tm2_m100
m2_vlblm60  = m2_vlbl AND tm2_m60
m2_vlblm25  = m2_vlbl AND tm2_m25
#IFDEF METAL3
m3trm_dg    = m3trm AND met3_dg
m3_vlbl100  = m3_vlbl AND tm3_100
m3_vlbl60   = m3_vlbl AND tm3_60
m3_vlbl25   = m3_vlbl AND tm3_25
m3_vlblm100 = m3_vlbl AND tm3_m100
m3_vlblm60  = m3_vlbl AND tm3_m60
m3_vlblm25  = m3_vlbl AND tm3_m25
#ENDIF
#IFDEF METAL4
m4trm_dg    = m4trm AND met4_dg
m4_vlbl100  = m4_vlbl AND tm4_100
m4_vlbl60   = m4_vlbl AND tm4_60
m4_vlbl25   = m4_vlbl AND tm4_25
m4_vlblm100 = m4_vlbl AND tm4_m100
m4_vlblm60  = m4_vlbl AND tm4_m60
m4_vlblm25  = m4_vlbl AND tm4_m25
#ENDIF
#IFDEF METAL5
m5trm_dg    = m5trm AND met5_dg
m5_vlbl100  = m5_vlbl AND tm5_100
m5_vlbl60   = m5_vlbl AND tm5_60
m5_vlbl25   = m5_vlbl AND tm5_25
m5_vlblm100 = m5_vlbl AND tm5_m100
m5_vlblm60  = m5_vlbl AND tm5_m60
m5_vlblm25  = m5_vlbl AND tm5_m25
#ENDIF
#IFDEF MIDMET
mttrm_dg    = mttrm AND mettp_dg
mt_vlbl100  = mt_vlbl AND tmt_100
mt_vlbl60   = mt_vlbl AND tmt_60
mt_vlbl25   = mt_vlbl AND tmt_25
mt_vlblm100 = mt_vlbl AND tmt_m100
mt_vlblm60  = mt_vlbl AND tmt_m60
mt_vlblm25  = mt_vlbl AND tmt_m25
#ENDIF
#IFDEF THKMET
mltrm_dg    = mltrm AND mettpl_dg
ml_vlbl100  = ml_vlbl AND tml_100
ml_vlbl60   = ml_vlbl AND tml_60
ml_vlbl25   = ml_vlbl AND tml_25
ml_vlblm100 = ml_vlbl AND tml_m100
ml_vlblm60  = ml_vlbl AND tml_m60
ml_vlblm25  = ml_vlbl AND tml_m25
#ENDIF

pol1_v100_p  = (NET AREA RATIO p1trm_dg p1_vlbl100 != 0) OR (NET AREA RATIO csf_p1 p1_vlbl100 != 0)
pol1_v60_p   = (NET AREA RATIO p1trm_dg p1_vlbl60 != 0) OR (NET AREA RATIO csf_p1 p1_vlbl60 != 0)
pol1_v25_p   = (NET AREA RATIO p1trm_dg p1_vlbl25 != 0) OR (NET AREA RATIO csf_p1 p1_vlbl25 != 0)
pol1_vm100_p = (NET AREA RATIO p1trm_dg p1_vlblm100 != 0) OR (NET AREA RATIO csf_p1 p1_vlblm100 != 0)
pol1_vm60_p  = (NET AREA RATIO p1trm_dg p1_vlblm60 != 0) OR (NET AREA RATIO csf_p1 p1_vlblm60 != 0)
pol1_vm25_p  = (NET AREA RATIO p1trm_dg p1_vlblm25 != 0) OR (NET AREA RATIO csf_p1 p1_vlblm25 != 0)

pol1_v100_1  = (NET AREA RATIO p1trm_dg m1_vlbl100 != 0) OR (NET AREA RATIO csf_p1 m1_vlbl100 != 0)
pol1_v60_1   = (NET AREA RATIO p1trm_dg m1_vlbl60 != 0) OR (NET AREA RATIO csf_p1 m1_vlbl60 != 0)
pol1_v25_1   = (NET AREA RATIO p1trm_dg m1_vlbl25 != 0) OR (NET AREA RATIO csf_p1 m1_vlbl25 != 0)
pol1_vm100_1 = (NET AREA RATIO p1trm_dg m1_vlblm100 != 0) OR (NET AREA RATIO csf_p1 m1_vlblm100 != 0)
pol1_vm60_1  = (NET AREA RATIO p1trm_dg m1_vlblm60 != 0) OR (NET AREA RATIO csf_p1 m1_vlblm60 != 0)
pol1_vm25_1  = (NET AREA RATIO p1trm_dg m1_vlblm25 != 0) OR (NET AREA RATIO csf_p1 m1_vlblm25 != 0)

pol1_v100_2  = (NET AREA RATIO p1trm_dg m2_vlbl100 != 0) OR (NET AREA RATIO csf_p1 m2_vlbl100 != 0)
pol1_v60_2   = (NET AREA RATIO p1trm_dg m2_vlbl60 != 0) OR (NET AREA RATIO csf_p1 m2_vlbl60 != 0)
pol1_v25_2   = (NET AREA RATIO p1trm_dg m2_vlbl25 != 0) OR (NET AREA RATIO csf_p1 m2_vlbl25 != 0)
pol1_vm100_2 = (NET AREA RATIO p1trm_dg m2_vlblm100 != 0) OR (NET AREA RATIO csf_p1 m2_vlblm100 != 0)
pol1_vm60_2  = (NET AREA RATIO p1trm_dg m2_vlblm60 != 0) OR (NET AREA RATIO csf_p1 m2_vlblm60 != 0)
pol1_vm25_2  = (NET AREA RATIO p1trm_dg m2_vlblm25 != 0) OR (NET AREA RATIO csf_p1 m2_vlblm25 != 0)

#IFDEF METAL3
pol1_v100_3  = (NET AREA RATIO p1trm_dg m3_vlbl100 != 0) OR (NET AREA RATIO csf_p1 m3_vlbl100 != 0)
pol1_v60_3   = (NET AREA RATIO p1trm_dg m3_vlbl60 != 0) OR (NET AREA RATIO csf_p1 m3_vlbl60 != 0)
pol1_v25_3   = (NET AREA RATIO p1trm_dg m3_vlbl25 != 0) OR (NET AREA RATIO csf_p1 m3_vlbl25 != 0)
pol1_vm100_3 = (NET AREA RATIO p1trm_dg m3_vlblm100 != 0) OR (NET AREA RATIO csf_p1 m3_vlblm100 != 0)
pol1_vm60_3  = (NET AREA RATIO p1trm_dg m3_vlblm60 != 0) OR (NET AREA RATIO csf_p1 m3_vlblm60 != 0)
pol1_vm25_3  = (NET AREA RATIO p1trm_dg m3_vlblm25 != 0) OR (NET AREA RATIO csf_p1 m3_vlblm25 != 0)
#ENDIF
#IFDEF METAL4
pol1_v100_4  = (NET AREA RATIO p1trm_dg m4_vlbl100 != 0) OR (NET AREA RATIO csf_p1 m4_vlbl100 != 0)
pol1_v60_4   = (NET AREA RATIO p1trm_dg m4_vlbl60 != 0) OR (NET AREA RATIO csf_p1 m4_vlbl60 != 0)
pol1_v25_4   = (NET AREA RATIO p1trm_dg m4_vlbl25 != 0) OR (NET AREA RATIO csf_p1 m4_vlbl25 != 0)
pol1_vm100_4 = (NET AREA RATIO p1trm_dg m4_vlblm100 != 0) OR (NET AREA RATIO csf_p1 m4_vlblm100 != 0)
pol1_vm60_4  = (NET AREA RATIO p1trm_dg m4_vlblm60 != 0) OR (NET AREA RATIO csf_p1 m4_vlblm60 != 0)
pol1_vm25_4  = (NET AREA RATIO p1trm_dg m4_vlblm25 != 0) OR (NET AREA RATIO csf_p1 m4_vlblm25 != 0)
#ENDIF
#IFDEF METAL5
pol1_v100_5  = (NET AREA RATIO p1trm_dg m5_vlbl100 != 0) OR (NET AREA RATIO csf_p1 m5_vlbl100 != 0)
pol1_v60_5   = (NET AREA RATIO p1trm_dg m5_vlbl60 != 0) OR (NET AREA RATIO csf_p1 m5_vlbl60 != 0)
pol1_v25_5   = (NET AREA RATIO p1trm_dg m5_vlbl25 != 0) OR (NET AREA RATIO csf_p1 m5_vlbl25 != 0)
pol1_vm100_5 = (NET AREA RATIO p1trm_dg m5_vlblm100 != 0) OR (NET AREA RATIO csf_p1 m5_vlblm100 != 0)
pol1_vm60_5  = (NET AREA RATIO p1trm_dg m5_vlblm60 != 0) OR (NET AREA RATIO csf_p1 m5_vlblm60 != 0)
pol1_vm25_5  = (NET AREA RATIO p1trm_dg m5_vlblm25 != 0) OR (NET AREA RATIO csf_p1 m5_vlblm25 != 0)
#ENDIF
#IFDEF MIDMET
pol1_v100_t  = (NET AREA RATIO p1trm_dg mt_vlbl100 != 0) OR (NET AREA RATIO csf_p1 mt_vlbl100 != 0)
pol1_v60_t   = (NET AREA RATIO p1trm_dg mt_vlbl60 != 0) OR (NET AREA RATIO csf_p1 mt_vlbl60 != 0)
pol1_v25_t   = (NET AREA RATIO p1trm_dg mt_vlbl25 != 0) OR (NET AREA RATIO csf_p1 mt_vlbl25 != 0)
pol1_vm100_t = (NET AREA RATIO p1trm_dg mt_vlblm100 != 0) OR (NET AREA RATIO csf_p1 mt_vlblm100 != 0)
pol1_vm60_t  = (NET AREA RATIO p1trm_dg mt_vlblm60 != 0) OR (NET AREA RATIO csf_p1 mt_vlblm60 != 0)
pol1_vm25_t  = (NET AREA RATIO p1trm_dg mt_vlblm25 != 0) OR (NET AREA RATIO csf_p1 mt_vlblm25 != 0)
#ENDIF
#IFDEF THKMET
pol1_v100_l  = (NET AREA RATIO p1trm_dg ml_vlbl100 != 0) OR (NET AREA RATIO csf_p1 ml_vlbl100 != 0)
pol1_v60_l   = (NET AREA RATIO p1trm_dg ml_vlbl60 != 0) OR (NET AREA RATIO csf_p1 ml_vlbl60 != 0)
pol1_v25_l   = (NET AREA RATIO p1trm_dg ml_vlbl25 != 0) OR (NET AREA RATIO csf_p1 ml_vlbl25 != 0)
pol1_vm100_l = (NET AREA RATIO p1trm_dg ml_vlblm100 != 0) OR (NET AREA RATIO csf_p1 ml_vlblm100 != 0)
pol1_vm60_l  = (NET AREA RATIO p1trm_dg ml_vlblm60 != 0) OR (NET AREA RATIO csf_p1 ml_vlblm60 != 0)
pol1_vm25_l  = (NET AREA RATIO p1trm_dg ml_vlblm25 != 0) OR (NET AREA RATIO csf_p1 ml_vlblm25 != 0)
#ENDIF

pol1_v1000   = pol1_v100_p OR (pol1_v100_1 OR pol1_v100_2)
pol1_v600    = pol1_v60_p OR (pol1_v60_1 OR pol1_v60_2)
pol1_v250    = pol1_v25_p OR (pol1_v25_1 OR pol1_v25_2)
pol1_vm1000  = pol1_vm100_p OR (pol1_vm100_1 OR pol1_vm100_2)
pol1_vm600   = pol1_vm60_p OR (pol1_vm60_1 OR pol1_vm60_2)
pol1_vm250   = pol1_vm25_p OR (pol1_vm25_1 OR pol1_vm25_2)
#IFDEF METAL3
pol1_v1003   = pol1_v1000 OR pol1_v100_3
pol1_v603    = pol1_v600 OR pol1_v60_3
pol1_v253    = pol1_v250 OR pol1_v25_3
pol1_vm1003  = pol1_vm1000 OR pol1_vm100_3
pol1_vm603   = pol1_vm600 OR pol1_vm60_3
pol1_vm253   = pol1_vm250 OR pol1_vm25_3
#ELSE
pol1_v1003   = pol1_v1000 OR emptlay
pol1_v603    = pol1_v600 OR emptlay
pol1_v253    = pol1_v250 OR emptlay
pol1_vm1003  = pol1_vm1000 OR emptlay
pol1_vm603   = pol1_vm600 OR emptlay
pol1_vm253   = pol1_vm250 OR emptlay
#ENDIF
#IFDEF METAL4
pol1_v1004   = pol1_v1003 OR pol1_v100_4
pol1_v604    = pol1_v603 OR pol1_v60_4
pol1_v254    = pol1_v253 OR pol1_v25_4
pol1_vm1004  = pol1_vm1003 OR pol1_vm100_4
pol1_vm604   = pol1_vm603 OR pol1_vm60_4
pol1_vm254   = pol1_vm253 OR pol1_vm25_4
#ELSE
pol1_v1004   = pol1_v1003 OR emptlay
pol1_v604    = pol1_v603 OR emptlay
pol1_v254    = pol1_v253 OR emptlay
pol1_vm1004  = pol1_vm1003 OR emptlay
pol1_vm604   = pol1_vm603 OR emptlay
pol1_vm254   = pol1_vm253 OR emptlay
#ENDIF
#IFDEF METAL5
pol1_v1005   = pol1_v1004 OR pol1_v100_5
pol1_v605    = pol1_v604 OR pol1_v60_5
pol1_v255    = pol1_v254 OR pol1_v25_5
pol1_vm1005  = pol1_vm1004 OR pol1_vm100_5
pol1_vm605   = pol1_vm604 OR pol1_vm60_5
pol1_vm255   = pol1_vm254 OR pol1_vm25_5
#ELSE
pol1_v1005   = pol1_v1004 OR emptlay
pol1_v605    = pol1_v604 OR emptlay
pol1_v255    = pol1_v254 OR emptlay
pol1_vm1005  = pol1_vm1004 OR emptlay
pol1_vm605   = pol1_vm604 OR emptlay
pol1_vm255   = pol1_vm254 OR emptlay
#ENDIF
#IFDEF MIDMET
pol1_v100t   = pol1_v1005 OR pol1_v100_t
pol1_v60t    = pol1_v605 OR pol1_v60_t
pol1_v25t    = pol1_v255 OR pol1_v25_t
pol1_vm100t  = pol1_vm1005 OR pol1_vm100_t
pol1_vm60t   = pol1_vm605 OR pol1_vm60_t
pol1_vm25t   = pol1_vm255 OR pol1_vm25_t
#ELSE
pol1_v100t   = pol1_v1005 OR emptlay
pol1_v60t    = pol1_v605 OR emptlay
pol1_v25t    = pol1_v255 OR emptlay
pol1_vm100t  = pol1_vm1005 OR emptlay
pol1_vm60t   = pol1_vm605 OR emptlay
pol1_vm25t   = pol1_vm255 OR emptlay
#ENDIF
#IFDEF THKMET
pol1_v100l   = pol1_v100t OR pol1_v100_l
pol1_v60l    = pol1_v60t OR pol1_v60_l
pol1_v25l    = pol1_v25t OR pol1_v25_l
pol1_vm100l  = pol1_vm100t OR pol1_vm100_l
pol1_vm60l   = pol1_vm60t OR pol1_vm60_l
pol1_vm25l   = pol1_vm25t OR pol1_vm25_l
#ELSE
pol1_v100l   = pol1_v100t OR emptlay
pol1_v60l    = pol1_v60t OR emptlay
pol1_v25l    = pol1_v25t OR emptlay
pol1_vm100l  = pol1_vm100t OR emptlay
pol1_vm60l   = pol1_vm60t OR emptlay
pol1_vm25l   = pol1_vm25t OR emptlay
#ENDIF

poly1res     = (poly1re2 OR rpp1s) OR pfuse

pol1_v100r   = pol1_v100l OR (poly1res INTERACT pol1_v100l)
pol1_v60r    = pol1_v60l OR (poly1res INTERACT pol1_v60l)
pol1_v25r    = pol1_v25l OR (poly1res INTERACT pol1_v25l)
pol1_vm100r  = pol1_vm100l OR (poly1res INTERACT pol1_vm100l)
pol1_vm60r   = pol1_vm60l OR (poly1res INTERACT pol1_vm60l)
pol1_vm25r   = pol1_vm25l OR (poly1res INTERACT pol1_vm25l)

pol1_vg      = (pol1_v25l OR pol1_v60l) OR pol1_v100l
pol1_vmg     = (pol1_vm25l OR pol1_vm60l) OR pol1_vm100l
pol1_val     = pol1_vg OR pol1_vmg

pol1_vgr     = (pol1_v25r OR pol1_v60r) OR pol1_v100r
pol1_vmgr    = (pol1_vm25r OR pol1_vm60r) OR pol1_vm100r
pol1_valr    = pol1_vgr OR pol1_vmgr

pol1_vn0     = poly_dg NOT pol1_valr
pol1_vn0r    = pol1_vn0 OR (poly1res INTERACT pol1_vn0)

pol1_vn1r    = pol1_vn0r OR pol1_v25r
pol1_vn2r    = pol1_vn0r OR pol1_vm25r

S3P1 {@Minimum POLY1 spacing ... 0.5
  x1 = EXT pol1_v100r pol1_v60r < 0.5 ABUT <90 SINGULAR REGION
  x2 = EXT pol1_v60r pol1_vn1r < 0.5 ABUT <90 SINGULAR REGION
  x3 = EXT pol1_vn1r pol1_vm25r < 0.5 ABUT <90 SINGULAR REGION
  x4 = EXT pol1_vn2r pol1_vm60r < 0.5 ABUT <90 SINGULAR REGION
  x5 = EXT pol1_vm60r pol1_vm100r < 0.5 ABUT <90 SINGULAR REGION
  xn = EXT p1trm_dg < 0.5 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR x5)
  x NOT xn
}

S4P1 {@Minimum POLY1 spacing ... 0.8
  x1 = EXT pol1_v100r pol1_vn1r < 0.8 ABUT <90 SINGULAR REGION
  x2 = EXT pol1_v100r pol1_vmgr < 0.8 ABUT <90 SINGULAR REGION
  x3 = EXT pol1_v60r pol1_vmgr < 0.8 ABUT <90 SINGULAR REGION
  x4 = EXT pol1_vn1r pol1_vm60r < 0.8 ABUT <90 SINGULAR REGION
  x5 = EXT pol1_vn1r pol1_vm100r < 0.8 ABUT <90 SINGULAR REGION
  x6 = EXT pol1_vm25r pol1_vm100r < 0.8 ABUT <90 SINGULAR REGION
  xn = EXT p1trm_dg < 0.8 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR (x5 OR x6))
  x NOT xn
}

Q1P1 {@Resistor terminal net without VLABEL
  pol1res_v = poly1res INTERACT pol1_val == 1
  OUTSIDE EDGE (COIN EDGE pol1res_v p1trm_dg) pol1_val
}


diff_v100_p  = (NET AREA RATIO pdiff p1_vlbl100 != 0) OR (NET AREA RATIO ndiff p1_vlbl100 != 0)
diff_v60_p   = (NET AREA RATIO pdiff p1_vlbl60 != 0) OR (NET AREA RATIO ndiff p1_vlbl60 != 0)
diff_v25_p   = (NET AREA RATIO pdiff p1_vlbl25 != 0) OR (NET AREA RATIO ndiff p1_vlbl25 != 0)
diff_vm100_p = (NET AREA RATIO pdiff p1_vlblm100 != 0) OR (NET AREA RATIO ndiff p1_vlblm100 != 0)
diff_vm60_p  = (NET AREA RATIO pdiff p1_vlblm60 != 0) OR (NET AREA RATIO ndiff p1_vlblm60 != 0)
diff_vm25_p  = (NET AREA RATIO pdiff p1_vlblm25 != 0) OR (NET AREA RATIO ndiff p1_vlblm25 != 0)

diff_v100_1  = (NET AREA RATIO pdiff m1_vlbl100 != 0) OR (NET AREA RATIO ndiff m1_vlbl100 != 0)
diff_v60_1   = (NET AREA RATIO pdiff m1_vlbl60 != 0) OR (NET AREA RATIO ndiff m1_vlbl60 != 0)
diff_v25_1   = (NET AREA RATIO pdiff m1_vlbl25 != 0) OR (NET AREA RATIO ndiff m1_vlbl25 != 0)
diff_vm100_1 = (NET AREA RATIO pdiff m1_vlblm100 != 0) OR (NET AREA RATIO ndiff m1_vlblm100 != 0)
diff_vm60_1  = (NET AREA RATIO pdiff m1_vlblm60 != 0) OR (NET AREA RATIO ndiff m1_vlblm60 != 0)
diff_vm25_1  = (NET AREA RATIO pdiff m1_vlblm25 != 0) OR (NET AREA RATIO ndiff m1_vlblm25 != 0)

diff_v100_2  = (NET AREA RATIO pdiff m2_vlbl100 != 0) OR (NET AREA RATIO ndiff m2_vlbl100 != 0)
diff_v60_2   = (NET AREA RATIO pdiff m2_vlbl60 != 0) OR (NET AREA RATIO ndiff m2_vlbl60 != 0)
diff_v25_2   = (NET AREA RATIO pdiff m2_vlbl25 != 0) OR (NET AREA RATIO ndiff m2_vlbl25 != 0)
diff_vm100_2 = (NET AREA RATIO pdiff m2_vlblm100 != 0) OR (NET AREA RATIO ndiff m2_vlblm100 != 0)
diff_vm60_2  = (NET AREA RATIO pdiff m2_vlblm60 != 0) OR (NET AREA RATIO ndiff m2_vlblm60 != 0)
diff_vm25_2  = (NET AREA RATIO pdiff m2_vlblm25 != 0) OR (NET AREA RATIO ndiff m2_vlblm25 != 0)

#IFDEF METAL3
diff_v100_3  = (NET AREA RATIO pdiff m3_vlbl100 != 0) OR (NET AREA RATIO ndiff m3_vlbl100 != 0)
diff_v60_3   = (NET AREA RATIO pdiff m3_vlbl60 != 0) OR (NET AREA RATIO ndiff m3_vlbl60 != 0)
diff_v25_3   = (NET AREA RATIO pdiff m3_vlbl25 != 0) OR (NET AREA RATIO ndiff m3_vlbl25 != 0)
diff_vm100_3 = (NET AREA RATIO pdiff m3_vlblm100 != 0) OR (NET AREA RATIO ndiff m3_vlblm100 != 0)
diff_vm60_3  = (NET AREA RATIO pdiff m3_vlblm60 != 0) OR (NET AREA RATIO ndiff m3_vlblm60 != 0)
diff_vm25_3  = (NET AREA RATIO pdiff m3_vlblm25 != 0) OR (NET AREA RATIO ndiff m3_vlblm25 != 0)
#ENDIF
#IFDEF METAL4
diff_v100_4  = (NET AREA RATIO pdiff m4_vlbl100 != 0) OR (NET AREA RATIO ndiff m4_vlbl100 != 0)
diff_v60_4   = (NET AREA RATIO pdiff m4_vlbl60 != 0) OR (NET AREA RATIO ndiff m4_vlbl60 != 0)
diff_v25_4   = (NET AREA RATIO pdiff m4_vlbl25 != 0) OR (NET AREA RATIO ndiff m4_vlbl25 != 0)
diff_vm100_4 = (NET AREA RATIO pdiff m4_vlblm100 != 0) OR (NET AREA RATIO ndiff m4_vlblm100 != 0)
diff_vm60_4  = (NET AREA RATIO pdiff m4_vlblm60 != 0) OR (NET AREA RATIO ndiff m4_vlblm60 != 0)
diff_vm25_4  = (NET AREA RATIO pdiff m4_vlblm25 != 0) OR (NET AREA RATIO ndiff m4_vlblm25 != 0)
#ENDIF
#IFDEF METAL5
diff_v100_5  = (NET AREA RATIO pdiff m5_vlbl100 != 0) OR (NET AREA RATIO ndiff m5_vlbl100 != 0)
diff_v60_5   = (NET AREA RATIO pdiff m5_vlbl60 != 0) OR (NET AREA RATIO ndiff m5_vlbl60 != 0)
diff_v25_5   = (NET AREA RATIO pdiff m5_vlbl25 != 0) OR (NET AREA RATIO ndiff m5_vlbl25 != 0)
diff_vm100_5 = (NET AREA RATIO pdiff m5_vlblm100 != 0) OR (NET AREA RATIO ndiff m5_vlblm100 != 0)
diff_vm60_5  = (NET AREA RATIO pdiff m5_vlblm60 != 0) OR (NET AREA RATIO ndiff m5_vlblm60 != 0)
diff_vm25_5  = (NET AREA RATIO pdiff m5_vlblm25 != 0) OR (NET AREA RATIO ndiff m5_vlblm25 != 0)
#ENDIF
#IFDEF MIDMET
diff_v100_t  = (NET AREA RATIO pdiff mt_vlbl100 != 0) OR (NET AREA RATIO ndiff mt_vlbl100 != 0)
diff_v60_t   = (NET AREA RATIO pdiff mt_vlbl60 != 0) OR (NET AREA RATIO ndiff mt_vlbl60 != 0)
diff_v25_t   = (NET AREA RATIO pdiff mt_vlbl25 != 0) OR (NET AREA RATIO ndiff mt_vlbl25 != 0)
diff_vm100_t = (NET AREA RATIO pdiff mt_vlblm100 != 0) OR (NET AREA RATIO ndiff mt_vlblm100 != 0)
diff_vm60_t  = (NET AREA RATIO pdiff mt_vlblm60 != 0) OR (NET AREA RATIO ndiff mt_vlblm60 != 0)
diff_vm25_t  = (NET AREA RATIO pdiff mt_vlblm25 != 0) OR (NET AREA RATIO ndiff mt_vlblm25 != 0)
#ENDIF
#IFDEF THKMET
diff_v100_l  = (NET AREA RATIO pdiff ml_vlbl100 != 0) OR (NET AREA RATIO ndiff ml_vlbl100 != 0)
diff_v60_l   = (NET AREA RATIO pdiff ml_vlbl60 != 0) OR (NET AREA RATIO ndiff ml_vlbl60 != 0)
diff_v25_l   = (NET AREA RATIO pdiff ml_vlbl25 != 0) OR (NET AREA RATIO ndiff ml_vlbl25 != 0)
diff_vm100_l = (NET AREA RATIO pdiff ml_vlblm100 != 0) OR (NET AREA RATIO ndiff ml_vlblm100 != 0)
diff_vm60_l  = (NET AREA RATIO pdiff ml_vlblm60 != 0) OR (NET AREA RATIO ndiff ml_vlblm60 != 0)
diff_vm25_l  = (NET AREA RATIO pdiff ml_vlblm25 != 0) OR (NET AREA RATIO ndiff ml_vlblm25 != 0)
#ENDIF

diff_v1000   = diff_v100_p OR (diff_v100_1 OR diff_v100_2)
diff_v600    = diff_v60_p OR (diff_v60_1 OR diff_v60_2)
diff_v250    = diff_v25_p OR (diff_v25_1 OR diff_v25_2)
diff_vm1000  = diff_vm100_p OR (diff_vm100_1 OR diff_vm100_2)
diff_vm600   = diff_vm60_p OR (diff_vm60_1 OR diff_vm60_2)
diff_vm250   = diff_vm25_p OR (diff_vm25_1 OR diff_vm25_2)
#IFDEF METAL3
diff_v1003   = diff_v1000 OR diff_v100_3
diff_v603    = diff_v600 OR diff_v60_3
diff_v253    = diff_v250 OR diff_v25_3
diff_vm1003  = diff_vm1000 OR diff_vm100_3
diff_vm603   = diff_vm600 OR diff_vm60_3
diff_vm253   = diff_vm250 OR diff_vm25_3
#ELSE
diff_v1003   = diff_v1000 OR emptlay
diff_v603    = diff_v600 OR emptlay
diff_v253    = diff_v250 OR emptlay
diff_vm1003  = diff_vm1000 OR emptlay
diff_vm603   = diff_vm600 OR emptlay
diff_vm253   = diff_vm250 OR emptlay
#ENDIF
#IFDEF METAL4
diff_v1004   = diff_v1003 OR diff_v100_4
diff_v604    = diff_v603 OR diff_v60_4
diff_v254    = diff_v253 OR diff_v25_4
diff_vm1004  = diff_vm1003 OR diff_vm100_4
diff_vm604   = diff_vm603 OR diff_vm60_4
diff_vm254   = diff_vm253 OR diff_vm25_4
#ELSE
diff_v1004   = diff_v1003 OR emptlay
diff_v604    = diff_v603 OR emptlay
diff_v254    = diff_v253 OR emptlay
diff_vm1004  = diff_vm1003 OR emptlay
diff_vm604   = diff_vm603 OR emptlay
diff_vm254   = diff_vm253 OR emptlay
#ENDIF
#IFDEF METAL5
diff_v1005   = diff_v1004 OR diff_v100_5
diff_v605    = diff_v604 OR diff_v60_5
diff_v255    = diff_v254 OR diff_v25_5
diff_vm1005  = diff_vm1004 OR diff_vm100_5
diff_vm605   = diff_vm604 OR diff_vm60_5
diff_vm255   = diff_vm254 OR diff_vm25_5
#ELSE
diff_v1005   = diff_v1004 OR emptlay
diff_v605    = diff_v604 OR emptlay
diff_v255    = diff_v254 OR emptlay
diff_vm1005  = diff_vm1004 OR emptlay
diff_vm605   = diff_vm604 OR emptlay
diff_vm255   = diff_vm254 OR emptlay
#ENDIF
#IFDEF MIDMET
diff_v100t   = diff_v1005 OR diff_v100_t
diff_v60t    = diff_v605 OR diff_v60_t
diff_v25t    = diff_v255 OR diff_v25_t
diff_vm100t  = diff_vm1005 OR diff_vm100_t
diff_vm60t   = diff_vm605 OR diff_vm60_t
diff_vm25t   = diff_vm255 OR diff_vm25_t
#ELSE
diff_v100t   = diff_v1005 OR emptlay
diff_v60t    = diff_v605 OR emptlay
diff_v25t    = diff_v255 OR emptlay
diff_vm100t  = diff_vm1005 OR emptlay
diff_vm60t   = diff_vm605 OR emptlay
diff_vm25t   = diff_vm255 OR emptlay
#ENDIF
#IFDEF THKMET
diff_v100l   = diff_v100t OR diff_v100_l
diff_v60l    = diff_v60t OR diff_v60_l
diff_v25l    = diff_v25t OR diff_v25_l
diff_vm100l  = diff_vm100t OR diff_vm100_l
diff_vm60l   = diff_vm60t OR diff_vm60_l
diff_vm25l   = diff_vm25t OR diff_vm25_l
#ELSE
diff_v100l   = diff_v100t OR emptlay
diff_v60l    = diff_v60t OR emptlay
diff_v25l    = diff_v25t OR emptlay
diff_vm100l  = diff_vm100t OR emptlay
diff_vm60l   = diff_vm60t OR emptlay
diff_vm25l   = diff_vm25t OR emptlay
#ENDIF

diff_res     = rdp_a OR rdn_a

diff_v100r   = diff_v100l OR (diff_res INTERACT diff_v100l)
diff_v60r    = diff_v60l OR (diff_res INTERACT diff_v60l)
diff_v25r    = diff_v25l OR (diff_res INTERACT diff_v25l)
diff_vm100r  = diff_vm100l OR (diff_res INTERACT diff_vm100l)
diff_vm60r   = diff_vm60l OR (diff_res INTERACT diff_vm60l)
diff_vm25r   = diff_vm25l OR (diff_res INTERACT diff_vm25l)

diff_vg      = (diff_v25l OR diff_v60l) OR diff_v100l
diff_vmg     = (diff_vm25l OR diff_vm60l) OR diff_vm100l
diff_val     = diff_vg OR diff_vmg

diff_vgr     = (diff_v25r OR diff_v60r) OR diff_v100r
diff_vmgr    = (diff_vm25r OR diff_vm60r) OR diff_vm100r
diff_valr    = diff_vgr OR diff_vmgr

diff_vn0     = diff_dg NOT diff_valr
diff_vn0r    = diff_vn0 OR (diff_res INTERACT diff_vn0)

diff_vn1r    = diff_vn0r OR diff_v25r
diff_vn2r    = diff_vn0r OR diff_vm25r

S5P1DF {@Minimum POLY1 spacing to DIFF ... 0.5
  xn1 = EXT pdiff p1trm_dg < 0.5 ABUT <90 CONNECTED SINGULAR REGION
  xn2 = EXT ndiff p1trm_dg < 0.5 ABUT <90 CONNECTED SINGULAR REGION
  xn  = xn1 OR xn2
  x1  = (EXT pol1_v100r diff_v60r < 0.5 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_v100r pol1_v60r < 0.5 ABUT >0 <90 SINGULAR REGION)
  x2  = (EXT pol1_v60r diff_vn1r < 0.5 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_v60r pol1_vn1r < 0.5 ABUT >0 <90 SINGULAR REGION)
  x3  = (EXT pol1_vn1r diff_vm25r < 0.5 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_vn1r pol1_vm25r < 0.5 ABUT >0 <90 SINGULAR REGION)
  x4  = (EXT pol1_vn2r diff_vm60r < 0.5 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_vn2r pol1_vm60r < 0.5 ABUT >0 <90 SINGULAR REGION)
  x5  = (EXT pol1_vm60r diff_vm100r < 0.5 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_vm60r pol1_vm100r < 0.5 ABUT >0 <90 SINGULAR REGION)
  x   = (x1 OR x2) OR ((x3 OR x4) OR x5)
  x NOT xn
}

S7P1DF {@Minimum POLY1 spacing to DIFF ... 0.8
  xn1 = EXT pdiff p1trm_dg < 0.5 ABUT <90 CONNECTED SINGULAR REGION
  xn2 = EXT ndiff p1trm_dg < 0.5 ABUT <90 CONNECTED SINGULAR REGION
  xn  = xn1 OR xn2
  x1  = (EXT pol1_v100r diff_vn1r < 0.8 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_v100r pol1_vn1r < 0.8 ABUT >0 <90 SINGULAR REGION)
  x2  = (EXT pol1_v100r diff_vmgr < 0.8 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_v100r pol1_vmgr < 0.8 ABUT >0 <90 SINGULAR REGION)
  x3  = (EXT pol1_v60r diff_vmgr < 0.8 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_v60r pol1_vmgr < 0.8 ABUT >0 <90 SINGULAR REGION)
  x4  = (EXT pol1_vn1r diff_vm60r < 0.8 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_vn1r pol1_vm60r < 0.8 ABUT >0 <90 SINGULAR REGION)
  x5  = (EXT pol1_vn1r diff_vm100r < 0.8 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_vn1r pol1_vm100r < 0.8 ABUT >0 <90 SINGULAR REGION)
  x6  = (EXT pol1_vm25r diff_vm100r < 0.8 ABUT >0 <90 SINGULAR REGION) OR (EXT diff_vm25r pol1_vm100r < 0.8 ABUT >0 <90 SINGULAR REGION)
  x   = (x1 OR x2) OR ((x3 OR x4) OR (x5 OR x6))
  x NOT xn
}


met1_v100_p  = (NET AREA RATIO m1trm_dg p1_vlbl100 != 0) OR (NET AREA RATIO csf_m1 p1_vlbl100 != 0)
met1_v60_p   = (NET AREA RATIO m1trm_dg p1_vlbl60 != 0) OR (NET AREA RATIO csf_m1 p1_vlbl60 != 0)
met1_v25_p   = (NET AREA RATIO m1trm_dg p1_vlbl25 != 0) OR (NET AREA RATIO csf_m1 p1_vlbl25 != 0)
met1_vm100_p = (NET AREA RATIO m1trm_dg p1_vlblm100 != 0) OR (NET AREA RATIO csf_m1 p1_vlblm100 != 0)
met1_vm60_p  = (NET AREA RATIO m1trm_dg p1_vlblm60 != 0) OR (NET AREA RATIO csf_m1 p1_vlblm60 != 0)
met1_vm25_p  = (NET AREA RATIO m1trm_dg p1_vlblm25 != 0) OR (NET AREA RATIO csf_m1 p1_vlblm25 != 0)

met1_v100_1  = (NET AREA RATIO m1trm_dg m1_vlbl100 != 0) OR (NET AREA RATIO csf_m1 m1_vlbl100 != 0)
met1_v60_1   = (NET AREA RATIO m1trm_dg m1_vlbl60 != 0) OR (NET AREA RATIO csf_m1 m1_vlbl60 != 0)
met1_v25_1   = (NET AREA RATIO m1trm_dg m1_vlbl25 != 0) OR (NET AREA RATIO csf_m1 m1_vlbl25 != 0)
met1_vm100_1 = (NET AREA RATIO m1trm_dg m1_vlblm100 != 0) OR (NET AREA RATIO csf_m1 m1_vlblm100 != 0)
met1_vm60_1  = (NET AREA RATIO m1trm_dg m1_vlblm60 != 0) OR (NET AREA RATIO csf_m1 m1_vlblm60 != 0)
met1_vm25_1  = (NET AREA RATIO m1trm_dg m1_vlblm25 != 0) OR (NET AREA RATIO csf_m1 m1_vlblm25 != 0)

met1_v100_2  = (NET AREA RATIO m1trm_dg m2_vlbl100 != 0) OR (NET AREA RATIO csf_m1 m2_vlbl100 != 0)
met1_v60_2   = (NET AREA RATIO m1trm_dg m2_vlbl60 != 0) OR (NET AREA RATIO csf_m1 m2_vlbl60 != 0)
met1_v25_2   = (NET AREA RATIO m1trm_dg m2_vlbl25 != 0) OR (NET AREA RATIO csf_m1 m2_vlbl25 != 0)
met1_vm100_2 = (NET AREA RATIO m1trm_dg m2_vlblm100 != 0) OR (NET AREA RATIO csf_m1 m2_vlblm100 != 0)
met1_vm60_2  = (NET AREA RATIO m1trm_dg m2_vlblm60 != 0) OR (NET AREA RATIO csf_m1 m2_vlblm60 != 0)
met1_vm25_2  = (NET AREA RATIO m1trm_dg m2_vlblm25 != 0) OR (NET AREA RATIO csf_m1 m2_vlblm25 != 0)

#IFDEF METAL3
met1_v100_3  = (NET AREA RATIO m1trm_dg m3_vlbl100 != 0) OR (NET AREA RATIO csf_m1 m3_vlbl100 != 0)
met1_v60_3   = (NET AREA RATIO m1trm_dg m3_vlbl60 != 0) OR (NET AREA RATIO csf_m1 m3_vlbl60 != 0)
met1_v25_3   = (NET AREA RATIO m1trm_dg m3_vlbl25 != 0) OR (NET AREA RATIO csf_m1 m3_vlbl25 != 0)
met1_vm100_3 = (NET AREA RATIO m1trm_dg m3_vlblm100 != 0) OR (NET AREA RATIO csf_m1 m3_vlblm100 != 0)
met1_vm60_3  = (NET AREA RATIO m1trm_dg m3_vlblm60 != 0) OR (NET AREA RATIO csf_m1 m3_vlblm60 != 0)
met1_vm25_3  = (NET AREA RATIO m1trm_dg m3_vlblm25 != 0) OR (NET AREA RATIO csf_m1 m3_vlblm25 != 0)
#ENDIF

#IFDEF METAL4
met1_v100_4  = (NET AREA RATIO m1trm_dg m4_vlbl100 != 0) OR (NET AREA RATIO csf_m1 m4_vlbl100 != 0)
met1_v60_4   = (NET AREA RATIO m1trm_dg m4_vlbl60 != 0) OR (NET AREA RATIO csf_m1 m4_vlbl60 != 0)
met1_v25_4   = (NET AREA RATIO m1trm_dg m4_vlbl25 != 0) OR (NET AREA RATIO csf_m1 m4_vlbl25 != 0)
met1_vm100_4 = (NET AREA RATIO m1trm_dg m4_vlblm100 != 0) OR (NET AREA RATIO csf_m1 m4_vlblm100 != 0)
met1_vm60_4  = (NET AREA RATIO m1trm_dg m4_vlblm60 != 0) OR (NET AREA RATIO csf_m1 m4_vlblm60 != 0)
met1_vm25_4  = (NET AREA RATIO m1trm_dg m4_vlblm25 != 0) OR (NET AREA RATIO csf_m1 m4_vlblm25 != 0)
#ENDIF

#IFDEF METAL5
met1_v100_5  = (NET AREA RATIO m1trm_dg m5_vlbl100 != 0) OR (NET AREA RATIO csf_m1 m5_vlbl100 != 0)
met1_v60_5   = (NET AREA RATIO m1trm_dg m5_vlbl60 != 0) OR (NET AREA RATIO csf_m1 m5_vlbl60 != 0)
met1_v25_5   = (NET AREA RATIO m1trm_dg m5_vlbl25 != 0) OR (NET AREA RATIO csf_m1 m5_vlbl25 != 0)
met1_vm100_5 = (NET AREA RATIO m1trm_dg m5_vlblm100 != 0) OR (NET AREA RATIO csf_m1 m5_vlblm100 != 0)
met1_vm60_5  = (NET AREA RATIO m1trm_dg m5_vlblm60 != 0) OR (NET AREA RATIO csf_m1 m5_vlblm60 != 0)
met1_vm25_5  = (NET AREA RATIO m1trm_dg m5_vlblm25 != 0) OR (NET AREA RATIO csf_m1 m5_vlblm25 != 0)
#ENDIF

#IFDEF MIDMET
met1_v100_t  = (NET AREA RATIO m1trm_dg mt_vlbl100 != 0) OR (NET AREA RATIO csf_m1 mt_vlbl100 != 0)
met1_v60_t   = (NET AREA RATIO m1trm_dg mt_vlbl60 != 0) OR (NET AREA RATIO csf_m1 mt_vlbl60 != 0)
met1_v25_t   = (NET AREA RATIO m1trm_dg mt_vlbl25 != 0) OR (NET AREA RATIO csf_m1 mt_vlbl25 != 0)
met1_vm100_t = (NET AREA RATIO m1trm_dg mt_vlblm100 != 0) OR (NET AREA RATIO csf_m1 mt_vlblm100 != 0)
met1_vm60_t  = (NET AREA RATIO m1trm_dg mt_vlblm60 != 0) OR (NET AREA RATIO csf_m1 mt_vlblm60 != 0)
met1_vm25_t  = (NET AREA RATIO m1trm_dg mt_vlblm25 != 0) OR (NET AREA RATIO csf_m1 mt_vlblm25 != 0)
#ENDIF

#IFDEF THKMET
met1_v100_l  = (NET AREA RATIO m1trm_dg ml_vlbl100 != 0) OR (NET AREA RATIO csf_m1 ml_vlbl100 != 0)
met1_v60_l   = (NET AREA RATIO m1trm_dg ml_vlbl60 != 0) OR (NET AREA RATIO csf_m1 ml_vlbl60 != 0)
met1_v25_l   = (NET AREA RATIO m1trm_dg ml_vlbl25 != 0) OR (NET AREA RATIO csf_m1 ml_vlbl25 != 0)
met1_vm100_l = (NET AREA RATIO m1trm_dg ml_vlblm100 != 0) OR (NET AREA RATIO csf_m1 ml_vlblm100 != 0)
met1_vm60_l  = (NET AREA RATIO m1trm_dg ml_vlblm60 != 0) OR (NET AREA RATIO csf_m1 ml_vlblm60 != 0)
met1_vm25_l  = (NET AREA RATIO m1trm_dg ml_vlblm25 != 0) OR (NET AREA RATIO csf_m1 ml_vlblm25 != 0)
#ENDIF

met1_v1000   = met1_v100_p OR (met1_v100_1 OR met1_v100_2)
met1_v600    = met1_v60_p OR (met1_v60_1 OR met1_v60_2)
met1_v250    = met1_v25_p OR (met1_v25_1 OR met1_v25_2)
met1_vm1000  = met1_vm100_p OR (met1_vm100_1 OR met1_vm100_2)
met1_vm600   = met1_vm60_p OR (met1_vm60_1 OR met1_vm60_2)
met1_vm250   = met1_vm25_p OR (met1_vm25_1 OR met1_vm25_2)
#IFDEF METAL3
met1_v1003   = met1_v1000 OR met1_v100_3
met1_v603    = met1_v600 OR met1_v60_3
met1_v253    = met1_v250 OR met1_v25_3
met1_vm1003  = met1_vm1000 OR met1_vm100_3
met1_vm603   = met1_vm600 OR met1_vm60_3
met1_vm253   = met1_vm250 OR met1_vm25_3
#ELSE
met1_v1003   = met1_v1000 OR emptlay
met1_v603    = met1_v600 OR emptlay
met1_v253    = met1_v250 OR emptlay
met1_vm1003  = met1_vm1000 OR emptlay
met1_vm603   = met1_vm600 OR emptlay
met1_vm253   = met1_vm250 OR emptlay
#ENDIF
#IFDEF METAL4
met1_v1004   = met1_v1003 OR met1_v100_4
met1_v604    = met1_v603 OR met1_v60_4
met1_v254    = met1_v253 OR met1_v25_4
met1_vm1004  = met1_vm1003 OR met1_vm100_4
met1_vm604   = met1_vm603 OR met1_vm60_4
met1_vm254   = met1_vm253 OR met1_vm25_4
#ELSE
met1_v1004   = met1_v1003 OR emptlay
met1_v604    = met1_v603 OR emptlay
met1_v254    = met1_v253 OR emptlay
met1_vm1004  = met1_vm1003 OR emptlay
met1_vm604   = met1_vm603 OR emptlay
met1_vm254   = met1_vm253 OR emptlay
#ENDIF
#IFDEF METAL5
met1_v1005   = met1_v1004 OR met1_v100_5
met1_v605    = met1_v604 OR met1_v60_5
met1_v255    = met1_v254 OR met1_v25_5
met1_vm1005  = met1_vm1004 OR met1_vm100_5
met1_vm605   = met1_vm604 OR met1_vm60_5
met1_vm255   = met1_vm254 OR met1_vm25_5
#ELSE
met1_v1005   = met1_v1004 OR emptlay
met1_v605    = met1_v604 OR emptlay
met1_v255    = met1_v254 OR emptlay
met1_vm1005  = met1_vm1004 OR emptlay
met1_vm605   = met1_vm604 OR emptlay
met1_vm255   = met1_vm254 OR emptlay
#ENDIF
#IFDEF MIDMET
met1_v100t   = met1_v1005 OR met1_v100_t
met1_v60t    = met1_v605 OR met1_v60_t
met1_v25t    = met1_v255 OR met1_v25_t
met1_vm100t  = met1_vm1005 OR met1_vm100_t
met1_vm60t   = met1_vm605 OR met1_vm60_t
met1_vm25t   = met1_vm255 OR met1_vm25_t
#ELSE
met1_v100t   = met1_v1005 OR emptlay
met1_v60t    = met1_v605 OR emptlay
met1_v25t    = met1_v255 OR emptlay
met1_vm100t  = met1_vm1005 OR emptlay
met1_vm60t   = met1_vm605 OR emptlay
met1_vm25t   = met1_vm255 OR emptlay
#ENDIF
#IFDEF THKMET
met1_v100l   = met1_v100t OR met1_v100_l
met1_v60l    = met1_v60t OR met1_v60_l
met1_v25l    = met1_v25t OR met1_v25_l
met1_vm100l  = met1_vm100t OR met1_vm100_l
met1_vm60l   = met1_vm60t OR met1_vm60_l
met1_vm25l   = met1_vm25t OR met1_vm25_l
#ELSE
met1_v100l   = met1_v100t OR emptlay
met1_v60l    = met1_v60t OR emptlay
met1_v25l    = met1_v25t OR emptlay
met1_vm100l  = met1_vm100t OR emptlay
met1_vm60l   = met1_vm60t OR emptlay
met1_vm25l   = met1_vm25t OR emptlay
#ENDIF

met1_v100r   = met1_v100l OR (rm1 INTERACT met1_v100l)
met1_v60r    = met1_v60l OR (rm1 INTERACT met1_v60l)
met1_v25r    = met1_v25l OR (rm1 INTERACT met1_v25l)
met1_vm100r  = met1_vm100l OR (rm1 INTERACT met1_vm100l)
met1_vm60r   = met1_vm60l OR (rm1 INTERACT met1_vm60l)
met1_vm25r   = met1_vm25l OR (rm1 INTERACT met1_vm25l)

met1_vg      = (met1_v25l OR met1_v60l) OR met1_v100l
met1_vmg     = (met1_vm25l OR met1_vm60l) OR met1_vm100l
met1_val     = met1_vg OR met1_vmg

met1_vgr     = (met1_v25r OR met1_v60r) OR met1_v100r
met1_vmgr    = (met1_vm25r OR met1_vm60r) OR met1_vm100r
met1_valr    = met1_vgr OR met1_vmgr

met1_vn0     = met1_dg NOT met1_valr
met1_vn0r    = met1_vn0 OR (rm1 INTERACT met1_vn0)

met1_vn1r    = met1_vn0r OR met1_v25r
met1_vn2r    = met1_vn0r OR met1_vm25r

S4M1 {@Minimum MET1 spacing ... 0.38
  x1 = EXT met1_v100r met1_v60r < 0.38 ABUT <90 SINGULAR REGION
  x2 = EXT met1_v60r met1_vn1r < 0.38 ABUT <90 SINGULAR REGION
  x3 = EXT met1_vn1r met1_vm25r < 0.38 ABUT <90 SINGULAR REGION
  x4 = EXT met1_vn2r met1_vm60r < 0.38 ABUT <90 SINGULAR REGION
  x5 = EXT met1_vm60r met1_vm100r < 0.38 ABUT <90 SINGULAR REGION
  xn = EXT m1trm_dg < 0.38 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR x5)
  x NOT xn
}

S5M1 {@Minimum MET1 spacing ... 0.6
  x1 = EXT met1_v100r met1_vn1r < 0.6 ABUT <90 SINGULAR REGION
  x2 = EXT met1_v100r met1_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x3 = EXT met1_v60r met1_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x4 = EXT met1_vn1r met1_vm60r < 0.6 ABUT <90 SINGULAR REGION
  x5 = EXT met1_vn1r met1_vm100r < 0.6 ABUT <90 SINGULAR REGION
  x6 = EXT met1_vm25r met1_vm100r < 0.6 ABUT <90 SINGULAR REGION
  xn = EXT m1trm_dg < 0.6 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR (x5 OR x6))
  x NOT xn
}

Q1M1 {@Resistor terminal net without VLABEL
  met1res_v = rm1 INTERACT met1_val == 1
  OUTSIDE EDGE (COIN EDGE met1res_v m1trm_dg) met1_val
  met1_vx11 = nwtrm INTERACT rnw1
  met1_vx12 = met1_vx11 INTERACT (diff_val AND ndiff)
  OUTSIDE EDGE (COIN EDGE (rnw1 INTERACT met1_vx12 == 1) met1_vx11) met1_vx12
  met1_vx21 = dnwtrm INTERACT rdnwmv
  met1_vx22 = met1_vx21 INTERACT (diff_val AND ndiff)
  OUTSIDE EDGE (COIN EDGE (rdnwmv INTERACT met1_vx22 == 1) met1_vx21) met1_vx22
  diffres_v = diff_res INTERACT diff_val == 1
  diffres_t = ndiff OR pdiff
  OUTSIDE EDGE (COIN EDGE diffres_v diffres_t) diff_val
}


met2_v100_p  = (NET AREA RATIO m2trm_dg p1_vlbl100 != 0) OR (NET AREA RATIO csf_m2 p1_vlbl100 != 0)
met2_v60_p   = (NET AREA RATIO m2trm_dg p1_vlbl60 != 0) OR (NET AREA RATIO csf_m2 p1_vlbl60 != 0)
met2_v25_p   = (NET AREA RATIO m2trm_dg p1_vlbl25 != 0) OR (NET AREA RATIO csf_m2 p1_vlbl25 != 0)
met2_vm100_p = (NET AREA RATIO m2trm_dg p1_vlblm100 != 0) OR (NET AREA RATIO csf_m2 p1_vlblm100 != 0)
met2_vm60_p  = (NET AREA RATIO m2trm_dg p1_vlblm60 != 0) OR (NET AREA RATIO csf_m2 p1_vlblm60 != 0)
met2_vm25_p  = (NET AREA RATIO m2trm_dg p1_vlblm25 != 0) OR (NET AREA RATIO csf_m2 p1_vlblm25 != 0)

met2_v100_1  = (NET AREA RATIO m2trm_dg m1_vlbl100 != 0) OR (NET AREA RATIO csf_m2 m1_vlbl100 != 0)
met2_v60_1   = (NET AREA RATIO m2trm_dg m1_vlbl60 != 0) OR (NET AREA RATIO csf_m2 m1_vlbl60 != 0)
met2_v25_1   = (NET AREA RATIO m2trm_dg m1_vlbl25 != 0) OR (NET AREA RATIO csf_m2 m1_vlbl25 != 0)
met2_vm100_1 = (NET AREA RATIO m2trm_dg m1_vlblm100 != 0) OR (NET AREA RATIO csf_m2 m1_vlblm100 != 0)
met2_vm60_1  = (NET AREA RATIO m2trm_dg m1_vlblm60 != 0) OR (NET AREA RATIO csf_m2 m1_vlblm60 != 0)
met2_vm25_1  = (NET AREA RATIO m2trm_dg m1_vlblm25 != 0) OR (NET AREA RATIO csf_m2 m1_vlblm25 != 0)

met2_v100_2  = (NET AREA RATIO m2trm_dg m2_vlbl100 != 0) OR (NET AREA RATIO csf_m2 m2_vlbl100 != 0)
met2_v60_2   = (NET AREA RATIO m2trm_dg m2_vlbl60 != 0) OR (NET AREA RATIO csf_m2 m2_vlbl60 != 0)
met2_v25_2   = (NET AREA RATIO m2trm_dg m2_vlbl25 != 0) OR (NET AREA RATIO csf_m2 m2_vlbl25 != 0)
met2_vm100_2 = (NET AREA RATIO m2trm_dg m2_vlblm100 != 0) OR (NET AREA RATIO csf_m2 m2_vlblm100 != 0)
met2_vm60_2  = (NET AREA RATIO m2trm_dg m2_vlblm60 != 0) OR (NET AREA RATIO csf_m2 m2_vlblm60 != 0)
met2_vm25_2  = (NET AREA RATIO m2trm_dg m2_vlblm25 != 0) OR (NET AREA RATIO csf_m2 m2_vlblm25 != 0)

#IFDEF METAL3
met2_v100_3  = (NET AREA RATIO m2trm_dg m3_vlbl100 != 0) OR (NET AREA RATIO csf_m2 m3_vlbl100 != 0)
met2_v60_3   = (NET AREA RATIO m2trm_dg m3_vlbl60 != 0) OR (NET AREA RATIO csf_m2 m3_vlbl60 != 0)
met2_v25_3   = (NET AREA RATIO m2trm_dg m3_vlbl25 != 0) OR (NET AREA RATIO csf_m2 m3_vlbl25 != 0)
met2_vm100_3 = (NET AREA RATIO m2trm_dg m3_vlblm100 != 0) OR (NET AREA RATIO csf_m2 m3_vlblm100 != 0)
met2_vm60_3  = (NET AREA RATIO m2trm_dg m3_vlblm60 != 0) OR (NET AREA RATIO csf_m2 m3_vlblm60 != 0)
met2_vm25_3  = (NET AREA RATIO m2trm_dg m3_vlblm25 != 0) OR (NET AREA RATIO csf_m2 m3_vlblm25 != 0)
#ENDIF

#IFDEF METAL4
met2_v100_4  = (NET AREA RATIO m2trm_dg m4_vlbl100 != 0) OR (NET AREA RATIO csf_m2 m4_vlbl100 != 0)
met2_v60_4   = (NET AREA RATIO m2trm_dg m4_vlbl60 != 0) OR (NET AREA RATIO csf_m2 m4_vlbl60 != 0)
met2_v25_4   = (NET AREA RATIO m2trm_dg m4_vlbl25 != 0) OR (NET AREA RATIO csf_m2 m4_vlbl25 != 0)
met2_vm100_4 = (NET AREA RATIO m2trm_dg m4_vlblm100 != 0) OR (NET AREA RATIO csf_m2 m4_vlblm100 != 0)
met2_vm60_4  = (NET AREA RATIO m2trm_dg m4_vlblm60 != 0) OR (NET AREA RATIO csf_m2 m4_vlblm60 != 0)
met2_vm25_4  = (NET AREA RATIO m2trm_dg m4_vlblm25 != 0) OR (NET AREA RATIO csf_m2 m4_vlblm25 != 0)
#ENDIF

#IFDEF METAL5
met2_v100_5  = (NET AREA RATIO m2trm_dg m5_vlbl100 != 0) OR (NET AREA RATIO csf_m2 m5_vlbl100 != 0)
met2_v60_5   = (NET AREA RATIO m2trm_dg m5_vlbl60 != 0) OR (NET AREA RATIO csf_m2 m5_vlbl60 != 0)
met2_v25_5   = (NET AREA RATIO m2trm_dg m5_vlbl25 != 0) OR (NET AREA RATIO csf_m2 m5_vlbl25 != 0)
met2_vm100_5 = (NET AREA RATIO m2trm_dg m5_vlblm100 != 0) OR (NET AREA RATIO csf_m2 m5_vlblm100 != 0)
met2_vm60_5  = (NET AREA RATIO m2trm_dg m5_vlblm60 != 0) OR (NET AREA RATIO csf_m2 m5_vlblm60 != 0)
met2_vm25_5  = (NET AREA RATIO m2trm_dg m5_vlblm25 != 0) OR (NET AREA RATIO csf_m2 m5_vlblm25 != 0)
#ENDIF

#IFDEF MIDMET
met2_v100_t  = (NET AREA RATIO m2trm_dg mt_vlbl100 != 0) OR (NET AREA RATIO csf_m2 mt_vlbl100 != 0)
met2_v60_t   = (NET AREA RATIO m2trm_dg mt_vlbl60 != 0) OR (NET AREA RATIO csf_m2 mt_vlbl60 != 0)
met2_v25_t   = (NET AREA RATIO m2trm_dg mt_vlbl25 != 0) OR (NET AREA RATIO csf_m2 mt_vlbl25 != 0)
met2_vm100_t = (NET AREA RATIO m2trm_dg mt_vlblm100 != 0) OR (NET AREA RATIO csf_m2 mt_vlblm100 != 0)
met2_vm60_t  = (NET AREA RATIO m2trm_dg mt_vlblm60 != 0) OR (NET AREA RATIO csf_m2 mt_vlblm60 != 0)
met2_vm25_t  = (NET AREA RATIO m2trm_dg mt_vlblm25 != 0) OR (NET AREA RATIO csf_m2 mt_vlblm25 != 0)
#ENDIF

#IFDEF THKMET
met2_v100_l  = (NET AREA RATIO m2trm_dg ml_vlbl100 != 0) OR (NET AREA RATIO csf_m2 ml_vlbl100 != 0)
met2_v60_l   = (NET AREA RATIO m2trm_dg ml_vlbl60 != 0) OR (NET AREA RATIO csf_m2 ml_vlbl60 != 0)
met2_v25_l   = (NET AREA RATIO m2trm_dg ml_vlbl25 != 0) OR (NET AREA RATIO csf_m2 ml_vlbl25 != 0)
met2_vm100_l = (NET AREA RATIO m2trm_dg ml_vlblm100 != 0) OR (NET AREA RATIO csf_m2 ml_vlblm100 != 0)
met2_vm60_l  = (NET AREA RATIO m2trm_dg ml_vlblm60 != 0) OR (NET AREA RATIO csf_m2 ml_vlblm60 != 0)
met2_vm25_l  = (NET AREA RATIO m2trm_dg ml_vlblm25 != 0) OR (NET AREA RATIO csf_m2 ml_vlblm25 != 0)
#ENDIF

met2_v1000   = met2_v100_p OR (met2_v100_1 OR met2_v100_2)
met2_v600    = met2_v60_p OR (met2_v60_1 OR met2_v60_2)
met2_v250    = met2_v25_p OR (met2_v25_1 OR met2_v25_2)
met2_vm1000  = met2_vm100_p OR (met2_vm100_1 OR met2_vm100_2)
met2_vm600   = met2_vm60_p OR (met2_vm60_1 OR met2_vm60_2)
met2_vm250   = met2_vm25_p OR (met2_vm25_1 OR met2_vm25_2)
#IFDEF METAL3
met2_v1003   = met2_v1000 OR met2_v100_3
met2_v603    = met2_v600 OR met2_v60_3
met2_v253    = met2_v250 OR met2_v25_3
met2_vm1003  = met2_vm1000 OR met2_vm100_3
met2_vm603   = met2_vm600 OR met2_vm60_3
met2_vm253   = met2_vm250 OR met2_vm25_3
#ELSE
met2_v1003   = met2_v1000 OR emptlay
met2_v603    = met2_v600 OR emptlay
met2_v253    = met2_v250 OR emptlay
met2_vm1003  = met2_vm1000 OR emptlay
met2_vm603   = met2_vm600 OR emptlay
met2_vm253   = met2_vm250 OR emptlay
#ENDIF
#IFDEF METAL4
met2_v1004   = met2_v1003 OR met2_v100_4
met2_v604    = met2_v603 OR met2_v60_4
met2_v254    = met2_v253 OR met2_v25_4
met2_vm1004  = met2_vm1003 OR met2_vm100_4
met2_vm604   = met2_vm603 OR met2_vm60_4
met2_vm254   = met2_vm253 OR met2_vm25_4
#ELSE
met2_v1004   = met2_v1003 OR emptlay
met2_v604    = met2_v603 OR emptlay
met2_v254    = met2_v253 OR emptlay
met2_vm1004  = met2_vm1003 OR emptlay
met2_vm604   = met2_vm603 OR emptlay
met2_vm254   = met2_vm253 OR emptlay
#ENDIF
#IFDEF METAL5
met2_v1005   = met2_v1004 OR met2_v100_5
met2_v605    = met2_v604 OR met2_v60_5
met2_v255    = met2_v254 OR met2_v25_5
met2_vm1005  = met2_vm1004 OR met2_vm100_5
met2_vm605   = met2_vm604 OR met2_vm60_5
met2_vm255   = met2_vm254 OR met2_vm25_5
#ELSE
met2_v1005   = met2_v1004 OR emptlay
met2_v605    = met2_v604 OR emptlay
met2_v255    = met2_v254 OR emptlay
met2_vm1005  = met2_vm1004 OR emptlay
met2_vm605   = met2_vm604 OR emptlay
met2_vm255   = met2_vm254 OR emptlay
#ENDIF
#IFDEF MIDMET
met2_v100t   = met2_v1005 OR met2_v100_t
met2_v60t    = met2_v605 OR met2_v60_t
met2_v25t    = met2_v255 OR met2_v25_t
met2_vm100t  = met2_vm1005 OR met2_vm100_t
met2_vm60t   = met2_vm605 OR met2_vm60_t
met2_vm25t   = met2_vm255 OR met2_vm25_t
#ELSE
met2_v100t   = met2_v1005 OR emptlay
met2_v60t    = met2_v605 OR emptlay
met2_v25t    = met2_v255 OR emptlay
met2_vm100t  = met2_vm1005 OR emptlay
met2_vm60t   = met2_vm605 OR emptlay
met2_vm25t   = met2_vm255 OR emptlay
#ENDIF
#IFDEF THKMET
met2_v100l   = met2_v100t OR met2_v100_l
met2_v60l    = met2_v60t OR met2_v60_l
met2_v25l    = met2_v25t OR met2_v25_l
met2_vm100l  = met2_vm100t OR met2_vm100_l
met2_vm60l   = met2_vm60t OR met2_vm60_l
met2_vm25l   = met2_vm25t OR met2_vm25_l
#ELSE
met2_v100l   = met2_v100t OR emptlay
met2_v60l    = met2_v60t OR emptlay
met2_v25l    = met2_v25t OR emptlay
met2_vm100l  = met2_vm100t OR emptlay
met2_vm60l   = met2_vm60t OR emptlay
met2_vm25l   = met2_vm25t OR emptlay
#ENDIF

met2_v100r   = met2_v100l OR (rm2 INTERACT met2_v100l)
met2_v60r    = met2_v60l OR (rm2 INTERACT met2_v60l)
met2_v25r    = met2_v25l OR (rm2 INTERACT met2_v25l)
met2_vm100r  = met2_vm100l OR (rm2 INTERACT met2_vm100l)
met2_vm60r   = met2_vm60l OR (rm2 INTERACT met2_vm60l)
met2_vm25r   = met2_vm25l OR (rm2 INTERACT met2_vm25l)

met2_vg      = (met2_v25l OR met2_v60l) OR met2_v100l
met2_vmg     = (met2_vm25l OR met2_vm60l) OR met2_vm100l
met2_val     = met2_vg OR met2_vmg

met2_vgr     = (met2_v25r OR met2_v60r) OR met2_v100r
met2_vmgr    = (met2_vm25r OR met2_vm60r) OR met2_vm100r
met2_valr    = met2_vgr OR met2_vmgr

met2_vn0     = met2_dg NOT met2_valr
met2_vn0r    = met2_vn0 OR (rm2 INTERACT met2_vn0)

met2_vn1r    = met2_vn0r OR met2_v25r
met2_vn2r    = met2_vn0r OR met2_vm25r

S4M2 {@Minimum MET2 spacing ... 0.4
  x1 = EXT met2_v100r met2_v60r < 0.4 ABUT <90 SINGULAR REGION
  x2 = EXT met2_v60r met2_vn1r < 0.4 ABUT <90 SINGULAR REGION
  x3 = EXT met2_vn1r met2_vm25r < 0.4 ABUT <90 SINGULAR REGION
  x4 = EXT met2_vn2r met2_vm60r < 0.4 ABUT <90 SINGULAR REGION
  x5 = EXT met2_vm60r met2_vm100r < 0.4 ABUT <90 SINGULAR REGION
  xn = EXT m2trm_dg < 0.4 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR x5)
  x NOT xn
}

S5M2 {@Minimum MET2 spacing ... 0.6
  x1 = EXT met2_v100r met2_vn1r < 0.6 ABUT <90 SINGULAR REGION
  x2 = EXT met2_v100r met2_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x3 = EXT met2_v60r met2_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x4 = EXT met2_vn1r met2_vm60r < 0.6 ABUT <90 SINGULAR REGION
  x5 = EXT met2_vn1r met2_vm100r < 0.6 ABUT <90 SINGULAR REGION
  x6 = EXT met2_vm25r met2_vm100r < 0.6 ABUT <90 SINGULAR REGION
  xn = EXT m2trm_dg < 0.6 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR (x5 OR x6))
  x NOT xn
}

Q1M2 {@Resistor terminal net without VLABEL
  met2res_v = rm2 INTERACT met2_val == 1
  OUTSIDE EDGE (COIN EDGE met2res_v m2trm_dg) met2_val
}


#IFDEF METAL3
met3_v100_p  = (NET AREA RATIO m3trm_dg p1_vlbl100 != 0) OR (NET AREA RATIO csf_m3 p1_vlbl100 != 0)
met3_v60_p   = (NET AREA RATIO m3trm_dg p1_vlbl60 != 0) OR (NET AREA RATIO csf_m3 p1_vlbl60 != 0)
met3_v25_p   = (NET AREA RATIO m3trm_dg p1_vlbl25 != 0) OR (NET AREA RATIO csf_m3 p1_vlbl25 != 0)
met3_vm100_p = (NET AREA RATIO m3trm_dg p1_vlblm100 != 0) OR (NET AREA RATIO csf_m3 p1_vlblm100 != 0)
met3_vm60_p  = (NET AREA RATIO m3trm_dg p1_vlblm60 != 0) OR (NET AREA RATIO csf_m3 p1_vlblm60 != 0)
met3_vm25_p  = (NET AREA RATIO m3trm_dg p1_vlblm25 != 0) OR (NET AREA RATIO csf_m3 p1_vlblm25 != 0)

met3_v100_1  = (NET AREA RATIO m3trm_dg m1_vlbl100 != 0) OR (NET AREA RATIO csf_m3 m1_vlbl100 != 0)
met3_v60_1   = (NET AREA RATIO m3trm_dg m1_vlbl60 != 0) OR (NET AREA RATIO csf_m3 m1_vlbl60 != 0)
met3_v25_1   = (NET AREA RATIO m3trm_dg m1_vlbl25 != 0) OR (NET AREA RATIO csf_m3 m1_vlbl25 != 0)
met3_vm100_1 = (NET AREA RATIO m3trm_dg m1_vlblm100 != 0) OR (NET AREA RATIO csf_m3 m1_vlblm100 != 0)
met3_vm60_1  = (NET AREA RATIO m3trm_dg m1_vlblm60 != 0) OR (NET AREA RATIO csf_m3 m1_vlblm60 != 0)
met3_vm25_1  = (NET AREA RATIO m3trm_dg m1_vlblm25 != 0) OR (NET AREA RATIO csf_m3 m1_vlblm25 != 0)

met3_v100_2  = (NET AREA RATIO m3trm_dg m2_vlbl100 != 0) OR (NET AREA RATIO csf_m3 m2_vlbl100 != 0)
met3_v60_2   = (NET AREA RATIO m3trm_dg m2_vlbl60 != 0) OR (NET AREA RATIO csf_m3 m2_vlbl60 != 0)
met3_v25_2   = (NET AREA RATIO m3trm_dg m2_vlbl25 != 0) OR (NET AREA RATIO csf_m3 m2_vlbl25 != 0)
met3_vm100_2 = (NET AREA RATIO m3trm_dg m2_vlblm100 != 0) OR (NET AREA RATIO csf_m3 m2_vlblm100 != 0)
met3_vm60_2  = (NET AREA RATIO m3trm_dg m2_vlblm60 != 0) OR (NET AREA RATIO csf_m3 m2_vlblm60 != 0)
met3_vm25_2  = (NET AREA RATIO m3trm_dg m2_vlblm25 != 0) OR (NET AREA RATIO csf_m3 m2_vlblm25 != 0)

met3_v100_3  = (NET AREA RATIO m3trm_dg m3_vlbl100 != 0) OR (NET AREA RATIO csf_m3 m3_vlbl100 != 0)
met3_v60_3   = (NET AREA RATIO m3trm_dg m3_vlbl60 != 0) OR (NET AREA RATIO csf_m3 m3_vlbl60 != 0)
met3_v25_3   = (NET AREA RATIO m3trm_dg m3_vlbl25 != 0) OR (NET AREA RATIO csf_m3 m3_vlbl25 != 0)
met3_vm100_3 = (NET AREA RATIO m3trm_dg m3_vlblm100 != 0) OR (NET AREA RATIO csf_m3 m3_vlblm100 != 0)
met3_vm60_3  = (NET AREA RATIO m3trm_dg m3_vlblm60 != 0) OR (NET AREA RATIO csf_m3 m3_vlblm60 != 0)
met3_vm25_3  = (NET AREA RATIO m3trm_dg m3_vlblm25 != 0) OR (NET AREA RATIO csf_m3 m3_vlblm25 != 0)

#IFDEF METAL4
met3_v100_4  = (NET AREA RATIO m3trm_dg m4_vlbl100 != 0) OR (NET AREA RATIO csf_m3 m4_vlbl100 != 0)
met3_v60_4   = (NET AREA RATIO m3trm_dg m4_vlbl60 != 0) OR (NET AREA RATIO csf_m3 m4_vlbl60 != 0)
met3_v25_4   = (NET AREA RATIO m3trm_dg m4_vlbl25 != 0) OR (NET AREA RATIO csf_m3 m4_vlbl25 != 0)
met3_vm100_4 = (NET AREA RATIO m3trm_dg m4_vlblm100 != 0) OR (NET AREA RATIO csf_m3 m4_vlblm100 != 0)
met3_vm60_4  = (NET AREA RATIO m3trm_dg m4_vlblm60 != 0) OR (NET AREA RATIO csf_m3 m4_vlblm60 != 0)
met3_vm25_4  = (NET AREA RATIO m3trm_dg m4_vlblm25 != 0) OR (NET AREA RATIO csf_m3 m4_vlblm25 != 0)
#ENDIF

#IFDEF METAL5
met3_v100_5  = (NET AREA RATIO m3trm_dg m5_vlbl100 != 0) OR (NET AREA RATIO csf_m3 m5_vlbl100 != 0)
met3_v60_5   = (NET AREA RATIO m3trm_dg m5_vlbl60 != 0) OR (NET AREA RATIO csf_m3 m5_vlbl60 != 0)
met3_v25_5   = (NET AREA RATIO m3trm_dg m5_vlbl25 != 0) OR (NET AREA RATIO csf_m3 m5_vlbl25 != 0)
met3_vm100_5 = (NET AREA RATIO m3trm_dg m5_vlblm100 != 0) OR (NET AREA RATIO csf_m3 m5_vlblm100 != 0)
met3_vm60_5  = (NET AREA RATIO m3trm_dg m5_vlblm60 != 0) OR (NET AREA RATIO csf_m3 m5_vlblm60 != 0)
met3_vm25_5  = (NET AREA RATIO m3trm_dg m5_vlblm25 != 0) OR (NET AREA RATIO csf_m3 m5_vlblm25 != 0)
#ENDIF

#IFDEF MIDMET
met3_v100_t  = (NET AREA RATIO m3trm_dg mt_vlbl100 != 0) OR (NET AREA RATIO csf_m3 mt_vlbl100 != 0)
met3_v60_t   = (NET AREA RATIO m3trm_dg mt_vlbl60 != 0) OR (NET AREA RATIO csf_m3 mt_vlbl60 != 0)
met3_v25_t   = (NET AREA RATIO m3trm_dg mt_vlbl25 != 0) OR (NET AREA RATIO csf_m3 mt_vlbl25 != 0)
met3_vm100_t = (NET AREA RATIO m3trm_dg mt_vlblm100 != 0) OR (NET AREA RATIO csf_m3 mt_vlblm100 != 0)
met3_vm60_t  = (NET AREA RATIO m3trm_dg mt_vlblm60 != 0) OR (NET AREA RATIO csf_m3 mt_vlblm60 != 0)
met3_vm25_t  = (NET AREA RATIO m3trm_dg mt_vlblm25 != 0) OR (NET AREA RATIO csf_m3 mt_vlblm25 != 0)
#ENDIF

#IFDEF THKMET
met3_v100_l  = (NET AREA RATIO m3trm_dg ml_vlbl100 != 0) OR (NET AREA RATIO csf_m3 ml_vlbl100 != 0)
met3_v60_l   = (NET AREA RATIO m3trm_dg ml_vlbl60 != 0) OR (NET AREA RATIO csf_m3 ml_vlbl60 != 0)
met3_v25_l   = (NET AREA RATIO m3trm_dg ml_vlbl25 != 0) OR (NET AREA RATIO csf_m3 ml_vlbl25 != 0)
met3_vm100_l = (NET AREA RATIO m3trm_dg ml_vlblm100 != 0) OR (NET AREA RATIO csf_m3 ml_vlblm100 != 0)
met3_vm60_l  = (NET AREA RATIO m3trm_dg ml_vlblm60 != 0) OR (NET AREA RATIO csf_m3 ml_vlblm60 != 0)
met3_vm25_l  = (NET AREA RATIO m3trm_dg ml_vlblm25 != 0) OR (NET AREA RATIO csf_m3 ml_vlblm25 != 0)
#ENDIF

met3_v1000   = met3_v100_p OR (met3_v100_1 OR met3_v100_2)
met3_v600    = met3_v60_p OR (met3_v60_1 OR met3_v60_2)
met3_v250    = met3_v25_p OR (met3_v25_1 OR met3_v25_2)
met3_vm1000  = met3_vm100_p OR (met3_vm100_1 OR met3_vm100_2)
met3_vm600   = met3_vm60_p OR (met3_vm60_1 OR met3_vm60_2)
met3_vm250   = met3_vm25_p OR (met3_vm25_1 OR met3_vm25_2)
met3_v1003   = met3_v1000 OR met3_v100_3
met3_v603    = met3_v600 OR met3_v60_3
met3_v253    = met3_v250 OR met3_v25_3
met3_vm1003  = met3_vm1000 OR met3_vm100_3
met3_vm603   = met3_vm600 OR met3_vm60_3
met3_vm253   = met3_vm250 OR met3_vm25_3
#IFDEF METAL4
met3_v1004   = met3_v1003 OR met3_v100_4
met3_v604    = met3_v603 OR met3_v60_4
met3_v254    = met3_v253 OR met3_v25_4
met3_vm1004  = met3_vm1003 OR met3_vm100_4
met3_vm604   = met3_vm603 OR met3_vm60_4
met3_vm254   = met3_vm253 OR met3_vm25_4
#ELSE
met3_v1004   = met3_v1003 OR emptlay
met3_v604    = met3_v603 OR emptlay
met3_v254    = met3_v253 OR emptlay
met3_vm1004  = met3_vm1003 OR emptlay
met3_vm604   = met3_vm603 OR emptlay
met3_vm254   = met3_vm253 OR emptlay
#ENDIF
#IFDEF METAL5
met3_v1005   = met3_v1004 OR met3_v100_5
met3_v605    = met3_v604 OR met3_v60_5
met3_v255    = met3_v254 OR met3_v25_5
met3_vm1005  = met3_vm1004 OR met3_vm100_5
met3_vm605   = met3_vm604 OR met3_vm60_5
met3_vm255   = met3_vm254 OR met3_vm25_5
#ELSE
met3_v1005   = met3_v1004 OR emptlay
met3_v605    = met3_v604 OR emptlay
met3_v255    = met3_v254 OR emptlay
met3_vm1005  = met3_vm1004 OR emptlay
met3_vm605   = met3_vm604 OR emptlay
met3_vm255   = met3_vm254 OR emptlay
#ENDIF
#IFDEF MIDMET
met3_v100t   = met3_v1005 OR met3_v100_t
met3_v60t    = met3_v605 OR met3_v60_t
met3_v25t    = met3_v255 OR met3_v25_t
met3_vm100t  = met3_vm1005 OR met3_vm100_t
met3_vm60t   = met3_vm605 OR met3_vm60_t
met3_vm25t   = met3_vm255 OR met3_vm25_t
#ELSE
met3_v100t   = met3_v1005 OR emptlay
met3_v60t    = met3_v605 OR emptlay
met3_v25t    = met3_v255 OR emptlay
met3_vm100t  = met3_vm1005 OR emptlay
met3_vm60t   = met3_vm605 OR emptlay
met3_vm25t   = met3_vm255 OR emptlay
#ENDIF
#IFDEF THKMET
met3_v100l   = met3_v100t OR met3_v100_l
met3_v60l    = met3_v60t OR met3_v60_l
met3_v25l    = met3_v25t OR met3_v25_l
met3_vm100l  = met3_vm100t OR met3_vm100_l
met3_vm60l   = met3_vm60t OR met3_vm60_l
met3_vm25l   = met3_vm25t OR met3_vm25_l
#ELSE
met3_v100l   = met3_v100t OR emptlay
met3_v60l    = met3_v60t OR emptlay
met3_v25l    = met3_v25t OR emptlay
met3_vm100l  = met3_vm100t OR emptlay
met3_vm60l   = met3_vm60t OR emptlay
met3_vm25l   = met3_vm25t OR emptlay
#ENDIF

met3_v100r   = met3_v100l OR (rm3 INTERACT met3_v100l)
met3_v60r    = met3_v60l OR (rm3 INTERACT met3_v60l)
met3_v25r    = met3_v25l OR (rm3 INTERACT met3_v25l)
met3_vm100r  = met3_vm100l OR (rm3 INTERACT met3_vm100l)
met3_vm60r   = met3_vm60l OR (rm3 INTERACT met3_vm60l)
met3_vm25r   = met3_vm25l OR (rm3 INTERACT met3_vm25l)

met3_vg      = (met3_v25l OR met3_v60l) OR met3_v100l
met3_vmg     = (met3_vm25l OR met3_vm60l) OR met3_vm100l
met3_val     = met3_vg OR met3_vmg

met3_vgr     = (met3_v25r OR met3_v60r) OR met3_v100r
met3_vmgr    = (met3_vm25r OR met3_vm60r) OR met3_vm100r
met3_valr    = met3_vgr OR met3_vmgr

met3_vn0     = met3_dg NOT met3_valr
met3_vn0r    = met3_vn0 OR (rm2 INTERACT met3_vn0)

met3_vn1r    = met3_vn0r OR met3_v25r
met3_vn2r    = met3_vn0r OR met3_vm25r

S4M3 {@Minimum MET3 spacing ... 0.4
  x1 = EXT met3_v100r met3_v60r < 0.4 ABUT <90 SINGULAR REGION
  x2 = EXT met3_v60r met3_vn1r < 0.4 ABUT <90 SINGULAR REGION
  x3 = EXT met3_vn1r met3_vm25r < 0.4 ABUT <90 SINGULAR REGION
  x4 = EXT met3_vn2r met3_vm60r < 0.4 ABUT <90 SINGULAR REGION
  x5 = EXT met3_vm60r met3_vm100r < 0.4 ABUT <90 SINGULAR REGION
  xn = EXT m3trm_dg < 0.4 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR x5)
  x NOT xn
}

S5M3 {@Minimum MET3 spacing ... 0.6
  x1 = EXT met3_v100r met3_vn1r < 0.6 ABUT <90 SINGULAR REGION
  x2 = EXT met3_v100r met3_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x3 = EXT met3_v60r met3_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x4 = EXT met3_vn1r met3_vm60r < 0.6 ABUT <90 SINGULAR REGION
  x5 = EXT met3_vn1r met3_vm100r < 0.6 ABUT <90 SINGULAR REGION
  x6 = EXT met3_vm25r met3_vm100r < 0.6 ABUT <90 SINGULAR REGION
  xn = EXT m3trm_dg < 0.6 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR (x5 OR x6))
  x NOT xn
}

Q1M3 {@Resistor terminal net without VLABEL
  met3res_v = rm3 INTERACT met3_val == 1
  OUTSIDE EDGE (COIN EDGE met3res_v m3trm_dg) met3_val
}
#ENDIF


#IFDEF METAL4
met4_v100_p  = (NET AREA RATIO m4trm_dg p1_vlbl100 != 0) OR (NET AREA RATIO csf_m4 p1_vlbl100 != 0)
met4_v60_p   = (NET AREA RATIO m4trm_dg p1_vlbl60 != 0) OR (NET AREA RATIO csf_m4 p1_vlbl60 != 0)
met4_v25_p   = (NET AREA RATIO m4trm_dg p1_vlbl25 != 0) OR (NET AREA RATIO csf_m4 p1_vlbl25 != 0)
met4_vm100_p = (NET AREA RATIO m4trm_dg p1_vlblm100 != 0) OR (NET AREA RATIO csf_m4 p1_vlblm100 != 0)
met4_vm60_p  = (NET AREA RATIO m4trm_dg p1_vlblm60 != 0) OR (NET AREA RATIO csf_m4 p1_vlblm60 != 0)
met4_vm25_p  = (NET AREA RATIO m4trm_dg p1_vlblm25 != 0) OR (NET AREA RATIO csf_m4 p1_vlblm25 != 0)

met4_v100_1  = (NET AREA RATIO m4trm_dg m1_vlbl100 != 0) OR (NET AREA RATIO csf_m4 m1_vlbl100 != 0)
met4_v60_1   = (NET AREA RATIO m4trm_dg m1_vlbl60 != 0) OR (NET AREA RATIO csf_m4 m1_vlbl60 != 0)
met4_v25_1   = (NET AREA RATIO m4trm_dg m1_vlbl25 != 0) OR (NET AREA RATIO csf_m4 m1_vlbl25 != 0)
met4_vm100_1 = (NET AREA RATIO m4trm_dg m1_vlblm100 != 0) OR (NET AREA RATIO csf_m4 m1_vlblm100 != 0)
met4_vm60_1  = (NET AREA RATIO m4trm_dg m1_vlblm60 != 0) OR (NET AREA RATIO csf_m4 m1_vlblm60 != 0)
met4_vm25_1  = (NET AREA RATIO m4trm_dg m1_vlblm25 != 0) OR (NET AREA RATIO csf_m4 m1_vlblm25 != 0)

met4_v100_2  = (NET AREA RATIO m4trm_dg m2_vlbl100 != 0) OR (NET AREA RATIO csf_m4 m2_vlbl100 != 0)
met4_v60_2   = (NET AREA RATIO m4trm_dg m2_vlbl60 != 0) OR (NET AREA RATIO csf_m4 m2_vlbl60 != 0)
met4_v25_2   = (NET AREA RATIO m4trm_dg m2_vlbl25 != 0) OR (NET AREA RATIO csf_m4 m2_vlbl25 != 0)
met4_vm100_2 = (NET AREA RATIO m4trm_dg m2_vlblm100 != 0) OR (NET AREA RATIO csf_m4 m2_vlblm100 != 0)
met4_vm60_2  = (NET AREA RATIO m4trm_dg m2_vlblm60 != 0) OR (NET AREA RATIO csf_m4 m2_vlblm60 != 0)
met4_vm25_2  = (NET AREA RATIO m4trm_dg m2_vlblm25 != 0) OR (NET AREA RATIO csf_m4 m2_vlblm25 != 0)

met4_v100_3  = (NET AREA RATIO m4trm_dg m3_vlbl100 != 0) OR (NET AREA RATIO csf_m4 m3_vlbl100 != 0)
met4_v60_3   = (NET AREA RATIO m4trm_dg m3_vlbl60 != 0) OR (NET AREA RATIO csf_m4 m3_vlbl60 != 0)
met4_v25_3   = (NET AREA RATIO m4trm_dg m3_vlbl25 != 0) OR (NET AREA RATIO csf_m4 m3_vlbl25 != 0)
met4_vm100_3 = (NET AREA RATIO m4trm_dg m3_vlblm100 != 0) OR (NET AREA RATIO csf_m4 m3_vlblm100 != 0)
met4_vm60_3  = (NET AREA RATIO m4trm_dg m3_vlblm60 != 0) OR (NET AREA RATIO csf_m4 m3_vlblm60 != 0)
met4_vm25_3  = (NET AREA RATIO m4trm_dg m3_vlblm25 != 0) OR (NET AREA RATIO csf_m4 m3_vlblm25 != 0)

met4_v100_4  = (NET AREA RATIO m4trm_dg m4_vlbl100 != 0) OR (NET AREA RATIO csf_m4 m4_vlbl100 != 0)
met4_v60_4   = (NET AREA RATIO m4trm_dg m4_vlbl60 != 0) OR (NET AREA RATIO csf_m4 m4_vlbl60 != 0)
met4_v25_4   = (NET AREA RATIO m4trm_dg m4_vlbl25 != 0) OR (NET AREA RATIO csf_m4 m4_vlbl25 != 0)
met4_vm100_4 = (NET AREA RATIO m4trm_dg m4_vlblm100 != 0) OR (NET AREA RATIO csf_m4 m4_vlblm100 != 0)
met4_vm60_4  = (NET AREA RATIO m4trm_dg m4_vlblm60 != 0) OR (NET AREA RATIO csf_m4 m4_vlblm60 != 0)
met4_vm25_4  = (NET AREA RATIO m4trm_dg m4_vlblm25 != 0) OR (NET AREA RATIO csf_m4 m4_vlblm25 != 0)

#IFDEF METAL5
met4_v100_5  = (NET AREA RATIO m4trm_dg m5_vlbl100 != 0) OR (NET AREA RATIO csf_m4 m5_vlbl100 != 0)
met4_v60_5   = (NET AREA RATIO m4trm_dg m5_vlbl60 != 0) OR (NET AREA RATIO csf_m4 m5_vlbl60 != 0)
met4_v25_5   = (NET AREA RATIO m4trm_dg m5_vlbl25 != 0) OR (NET AREA RATIO csf_m4 m5_vlbl25 != 0)
met4_vm100_5 = (NET AREA RATIO m4trm_dg m5_vlblm100 != 0) OR (NET AREA RATIO csf_m4 m5_vlblm100 != 0)
met4_vm60_5  = (NET AREA RATIO m4trm_dg m5_vlblm60 != 0) OR (NET AREA RATIO csf_m4 m5_vlblm60 != 0)
met4_vm25_5  = (NET AREA RATIO m4trm_dg m5_vlblm25 != 0) OR (NET AREA RATIO csf_m4 m5_vlblm25 != 0)
#ENDIF

#IFDEF MIDMET
met4_v100_t  = (NET AREA RATIO m4trm_dg mt_vlbl100 != 0) OR (NET AREA RATIO csf_m4 mt_vlbl100 != 0)
met4_v60_t   = (NET AREA RATIO m4trm_dg mt_vlbl60 != 0) OR (NET AREA RATIO csf_m4 mt_vlbl60 != 0)
met4_v25_t   = (NET AREA RATIO m4trm_dg mt_vlbl25 != 0) OR (NET AREA RATIO csf_m4 mt_vlbl25 != 0)
met4_vm100_t = (NET AREA RATIO m4trm_dg mt_vlblm100 != 0) OR (NET AREA RATIO csf_m4 mt_vlblm100 != 0)
met4_vm60_t  = (NET AREA RATIO m4trm_dg mt_vlblm60 != 0) OR (NET AREA RATIO csf_m4 mt_vlblm60 != 0)
met4_vm25_t  = (NET AREA RATIO m4trm_dg mt_vlblm25 != 0) OR (NET AREA RATIO csf_m4 mt_vlblm25 != 0)
#ENDIF

#IFDEF THKMET
met4_v100_l  = (NET AREA RATIO m4trm_dg ml_vlbl100 != 0) OR (NET AREA RATIO csf_m4 ml_vlbl100 != 0)
met4_v60_l   = (NET AREA RATIO m4trm_dg ml_vlbl60 != 0) OR (NET AREA RATIO csf_m4 ml_vlbl60 != 0)
met4_v25_l   = (NET AREA RATIO m4trm_dg ml_vlbl25 != 0) OR (NET AREA RATIO csf_m4 ml_vlbl25 != 0)
met4_vm100_l = (NET AREA RATIO m4trm_dg ml_vlblm100 != 0) OR (NET AREA RATIO csf_m4 ml_vlblm100 != 0)
met4_vm60_l  = (NET AREA RATIO m4trm_dg ml_vlblm60 != 0) OR (NET AREA RATIO csf_m4 ml_vlblm60 != 0)
met4_vm25_l  = (NET AREA RATIO m4trm_dg ml_vlblm25 != 0) OR (NET AREA RATIO csf_m4 ml_vlblm25 != 0)
#ENDIF

met4_v1000   = met4_v100_p OR (met4_v100_1 OR met4_v100_2)
met4_v600    = met4_v60_p OR (met4_v60_1 OR met4_v60_2)
met4_v250    = met4_v25_p OR (met4_v25_1 OR met4_v25_2)
met4_vm1000  = met4_vm100_p OR (met4_vm100_1 OR met4_vm100_2)
met4_vm600   = met4_vm60_p OR (met4_vm60_1 OR met4_vm60_2)
met4_vm250   = met4_vm25_p OR (met4_vm25_1 OR met4_vm25_2)
met4_v1003   = met4_v1000 OR met4_v100_3
met4_v603    = met4_v600 OR met4_v60_3
met4_v253    = met4_v250 OR met4_v25_3
met4_vm1003  = met4_vm1000 OR met4_vm100_3
met4_vm603   = met4_vm600 OR met4_vm60_3
met4_vm253   = met4_vm250 OR met4_vm25_3
met4_v1004   = met4_v1003 OR met4_v100_4
met4_v604    = met4_v603 OR met4_v60_4
met4_v254    = met4_v253 OR met4_v25_4
met4_vm1004  = met4_vm1003 OR met4_vm100_4
met4_vm604   = met4_vm603 OR met4_vm60_4
met4_vm254   = met4_vm253 OR met4_vm25_4
#IFDEF METAL5
met4_v1005   = met4_v1004 OR met4_v100_5
met4_v605    = met4_v604 OR met4_v60_5
met4_v255    = met4_v254 OR met4_v25_5
met4_vm1005  = met4_vm1004 OR met4_vm100_5
met4_vm605   = met4_vm604 OR met4_vm60_5
met4_vm255   = met4_vm254 OR met4_vm25_5
#ELSE
met4_v1005   = met4_v1004 OR emptlay
met4_v605    = met4_v604 OR emptlay
met4_v255    = met4_v254 OR emptlay
met4_vm1005  = met4_vm1004 OR emptlay
met4_vm605   = met4_vm604 OR emptlay
met4_vm255   = met4_vm254 OR emptlay
#ENDIF
#IFDEF MIDMET
met4_v100t   = met4_v1005 OR met4_v100_t
met4_v60t    = met4_v605 OR met4_v60_t
met4_v25t    = met4_v255 OR met4_v25_t
met4_vm100t  = met4_vm1005 OR met4_vm100_t
met4_vm60t   = met4_vm605 OR met4_vm60_t
met4_vm25t   = met4_vm255 OR met4_vm25_t
#ELSE
met4_v100t   = met4_v1005 OR emptlay
met4_v60t    = met4_v605 OR emptlay
met4_v25t    = met4_v255 OR emptlay
met4_vm100t  = met4_vm1005 OR emptlay
met4_vm60t   = met4_vm605 OR emptlay
met4_vm25t   = met4_vm255 OR emptlay
#ENDIF
#IFDEF THKMET
met4_v100l   = met4_v100t OR met4_v100_l
met4_v60l    = met4_v60t OR met4_v60_l
met4_v25l    = met4_v25t OR met4_v25_l
met4_vm100l  = met4_vm100t OR met4_vm100_l
met4_vm60l   = met4_vm60t OR met4_vm60_l
met4_vm25l   = met4_vm25t OR met4_vm25_l
#ELSE
met4_v100l   = met4_v100t OR emptlay
met4_v60l    = met4_v60t OR emptlay
met4_v25l    = met4_v25t OR emptlay
met4_vm100l  = met4_vm100t OR emptlay
met4_vm60l   = met4_vm60t OR emptlay
met4_vm25l   = met4_vm25t OR emptlay
#ENDIF

met4_v100r   = met4_v100l OR (rm4 INTERACT met4_v100l)
met4_v60r    = met4_v60l OR (rm4 INTERACT met4_v60l)
met4_v25r    = met4_v25l OR (rm4 INTERACT met4_v25l)
met4_vm100r  = met4_vm100l OR (rm4 INTERACT met4_vm100l)
met4_vm60r   = met4_vm60l OR (rm4 INTERACT met4_vm60l)
met4_vm25r   = met4_vm25l OR (rm4 INTERACT met4_vm25l)

met4_vg      = (met4_v25l OR met4_v60l) OR met4_v100l
met4_vmg     = (met4_vm25l OR met4_vm60l) OR met4_vm100l
met4_val     = met4_vg OR met4_vmg

met4_vgr     = (met4_v25r OR met4_v60r) OR met4_v100r
met4_vmgr    = (met4_vm25r OR met4_vm60r) OR met4_vm100r
met4_valr    = met4_vgr OR met4_vmgr

met4_vn0     = met4_dg NOT met4_valr
met4_vn0r    = met4_vn0 OR (rm2 INTERACT met4_vn0)

met4_vn1r    = met4_vn0r OR met4_v25r
met4_vn2r    = met4_vn0r OR met4_vm25r

S4M4 {@Minimum MET4 spacing ... 0.4
  x1 = EXT met4_v100r met4_v60r < 0.4 ABUT <90 SINGULAR REGION
  x2 = EXT met4_v60r met4_vn1r < 0.4 ABUT <90 SINGULAR REGION
  x3 = EXT met4_vn1r met4_vm25r < 0.4 ABUT <90 SINGULAR REGION
  x4 = EXT met4_vn2r met4_vm60r < 0.4 ABUT <90 SINGULAR REGION
  x5 = EXT met4_vm60r met4_vm100r < 0.4 ABUT <90 SINGULAR REGION
  xn = EXT m4trm_dg < 0.4 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR x5)
  x NOT xn
}

S5M4 {@Minimum MET4 spacing ... 0.6
  x1 = EXT met4_v100r met4_vn1r < 0.6 ABUT <90 SINGULAR REGION
  x2 = EXT met4_v100r met4_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x3 = EXT met4_v60r met4_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x4 = EXT met4_vn1r met4_vm60r < 0.6 ABUT <90 SINGULAR REGION
  x5 = EXT met4_vn1r met4_vm100r < 0.6 ABUT <90 SINGULAR REGION
  x6 = EXT met4_vm25r met4_vm100r < 0.6 ABUT <90 SINGULAR REGION
  xn = EXT m4trm_dg < 0.6 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR (x5 OR x6))
  x NOT xn
}

Q1M4 {@Resistor terminal net without VLABEL
  met4res_v = rm4 INTERACT met4_val == 1
  OUTSIDE EDGE (COIN EDGE met4res_v m4trm_dg) met4_val
}
#ENDIF


#IFDEF METAL5
met5_v100_p  = (NET AREA RATIO m5trm_dg p1_vlbl100 != 0) OR (NET AREA RATIO csf_m5 p1_vlbl100 != 0)
met5_v60_p   = (NET AREA RATIO m5trm_dg p1_vlbl60 != 0) OR (NET AREA RATIO csf_m5 p1_vlbl60 != 0)
met5_v25_p   = (NET AREA RATIO m5trm_dg p1_vlbl25 != 0) OR (NET AREA RATIO csf_m5 p1_vlbl25 != 0)
met5_vm100_p = (NET AREA RATIO m5trm_dg p1_vlblm100 != 0) OR (NET AREA RATIO csf_m5 p1_vlblm100 != 0)
met5_vm60_p  = (NET AREA RATIO m5trm_dg p1_vlblm60 != 0) OR (NET AREA RATIO csf_m5 p1_vlblm60 != 0)
met5_vm25_p  = (NET AREA RATIO m5trm_dg p1_vlblm25 != 0) OR (NET AREA RATIO csf_m5 p1_vlblm25 != 0)

met5_v100_1  = (NET AREA RATIO m5trm_dg m1_vlbl100 != 0) OR (NET AREA RATIO csf_m5 m1_vlbl100 != 0)
met5_v60_1   = (NET AREA RATIO m5trm_dg m1_vlbl60 != 0) OR (NET AREA RATIO csf_m5 m1_vlbl60 != 0)
met5_v25_1   = (NET AREA RATIO m5trm_dg m1_vlbl25 != 0) OR (NET AREA RATIO csf_m5 m1_vlbl25 != 0)
met5_vm100_1 = (NET AREA RATIO m5trm_dg m1_vlblm100 != 0) OR (NET AREA RATIO csf_m5 m1_vlblm100 != 0)
met5_vm60_1  = (NET AREA RATIO m5trm_dg m1_vlblm60 != 0) OR (NET AREA RATIO csf_m5 m1_vlblm60 != 0)
met5_vm25_1  = (NET AREA RATIO m5trm_dg m1_vlblm25 != 0) OR (NET AREA RATIO csf_m5 m1_vlblm25 != 0)

met5_v100_2  = (NET AREA RATIO m5trm_dg m2_vlbl100 != 0) OR (NET AREA RATIO csf_m5 m2_vlbl100 != 0)
met5_v60_2   = (NET AREA RATIO m5trm_dg m2_vlbl60 != 0) OR (NET AREA RATIO csf_m5 m2_vlbl60 != 0)
met5_v25_2   = (NET AREA RATIO m5trm_dg m2_vlbl25 != 0) OR (NET AREA RATIO csf_m5 m2_vlbl25 != 0)
met5_vm100_2 = (NET AREA RATIO m5trm_dg m2_vlblm100 != 0) OR (NET AREA RATIO csf_m5 m2_vlblm100 != 0)
met5_vm60_2  = (NET AREA RATIO m5trm_dg m2_vlblm60 != 0) OR (NET AREA RATIO csf_m5 m2_vlblm60 != 0)
met5_vm25_2  = (NET AREA RATIO m5trm_dg m2_vlblm25 != 0) OR (NET AREA RATIO csf_m5 m2_vlblm25 != 0)

met5_v100_3  = (NET AREA RATIO m5trm_dg m3_vlbl100 != 0) OR (NET AREA RATIO csf_m5 m3_vlbl100 != 0)
met5_v60_3   = (NET AREA RATIO m5trm_dg m3_vlbl60 != 0) OR (NET AREA RATIO csf_m5 m3_vlbl60 != 0)
met5_v25_3   = (NET AREA RATIO m5trm_dg m3_vlbl25 != 0) OR (NET AREA RATIO csf_m5 m3_vlbl25 != 0)
met5_vm100_3 = (NET AREA RATIO m5trm_dg m3_vlblm100 != 0) OR (NET AREA RATIO csf_m5 m3_vlblm100 != 0)
met5_vm60_3  = (NET AREA RATIO m5trm_dg m3_vlblm60 != 0) OR (NET AREA RATIO csf_m5 m3_vlblm60 != 0)
met5_vm25_3  = (NET AREA RATIO m5trm_dg m3_vlblm25 != 0) OR (NET AREA RATIO csf_m5 m3_vlblm25 != 0)

met5_v100_4  = (NET AREA RATIO m5trm_dg m4_vlbl100 != 0) OR (NET AREA RATIO csf_m5 m4_vlbl100 != 0)
met5_v60_4   = (NET AREA RATIO m5trm_dg m4_vlbl60 != 0) OR (NET AREA RATIO csf_m5 m4_vlbl60 != 0)
met5_v25_4   = (NET AREA RATIO m5trm_dg m4_vlbl25 != 0) OR (NET AREA RATIO csf_m5 m4_vlbl25 != 0)
met5_vm100_4 = (NET AREA RATIO m5trm_dg m4_vlblm100 != 0) OR (NET AREA RATIO csf_m5 m4_vlblm100 != 0)
met5_vm60_4  = (NET AREA RATIO m5trm_dg m4_vlblm60 != 0) OR (NET AREA RATIO csf_m5 m4_vlblm60 != 0)
met5_vm25_4  = (NET AREA RATIO m5trm_dg m4_vlblm25 != 0) OR (NET AREA RATIO csf_m5 m4_vlblm25 != 0)

met5_v100_5  = (NET AREA RATIO m5trm_dg m5_vlbl100 != 0) OR (NET AREA RATIO csf_m5 m5_vlbl100 != 0)
met5_v60_5   = (NET AREA RATIO m5trm_dg m5_vlbl60 != 0) OR (NET AREA RATIO csf_m5 m5_vlbl60 != 0)
met5_v25_5   = (NET AREA RATIO m5trm_dg m5_vlbl25 != 0) OR (NET AREA RATIO csf_m5 m5_vlbl25 != 0)
met5_vm100_5 = (NET AREA RATIO m5trm_dg m5_vlblm100 != 0) OR (NET AREA RATIO csf_m5 m5_vlblm100 != 0)
met5_vm60_5  = (NET AREA RATIO m5trm_dg m5_vlblm60 != 0) OR (NET AREA RATIO csf_m5 m5_vlblm60 != 0)
met5_vm25_5  = (NET AREA RATIO m5trm_dg m5_vlblm25 != 0) OR (NET AREA RATIO csf_m5 m5_vlblm25 != 0)

#IFDEF MIDMET
met5_v100_t  = (NET AREA RATIO m5trm_dg mt_vlbl100 != 0) OR (NET AREA RATIO csf_m5 mt_vlbl100 != 0)
met5_v60_t   = (NET AREA RATIO m5trm_dg mt_vlbl60 != 0) OR (NET AREA RATIO csf_m5 mt_vlbl60 != 0)
met5_v25_t   = (NET AREA RATIO m5trm_dg mt_vlbl25 != 0) OR (NET AREA RATIO csf_m5 mt_vlbl25 != 0)
met5_vm100_t = (NET AREA RATIO m5trm_dg mt_vlblm100 != 0) OR (NET AREA RATIO csf_m5 mt_vlblm100 != 0)
met5_vm60_t  = (NET AREA RATIO m5trm_dg mt_vlblm60 != 0) OR (NET AREA RATIO csf_m5 mt_vlblm60 != 0)
met5_vm25_t  = (NET AREA RATIO m5trm_dg mt_vlblm25 != 0) OR (NET AREA RATIO csf_m5 mt_vlblm25 != 0)
#ENDIF

#IFDEF THKMET
met5_v100_l  = (NET AREA RATIO m5trm_dg ml_vlbl100 != 0) OR (NET AREA RATIO csf_m5 ml_vlbl100 != 0)
met5_v60_l   = (NET AREA RATIO m5trm_dg ml_vlbl60 != 0) OR (NET AREA RATIO csf_m5 ml_vlbl60 != 0)
met5_v25_l   = (NET AREA RATIO m5trm_dg ml_vlbl25 != 0) OR (NET AREA RATIO csf_m5 ml_vlbl25 != 0)
met5_vm100_l = (NET AREA RATIO m5trm_dg ml_vlblm100 != 0) OR (NET AREA RATIO csf_m5 ml_vlblm100 != 0)
met5_vm60_l  = (NET AREA RATIO m5trm_dg ml_vlblm60 != 0) OR (NET AREA RATIO csf_m5 ml_vlblm60 != 0)
met5_vm25_l  = (NET AREA RATIO m5trm_dg ml_vlblm25 != 0) OR (NET AREA RATIO csf_m5 ml_vlblm25 != 0)
#ENDIF

met5_v1000   = met5_v100_p OR (met5_v100_1 OR met5_v100_2)
met5_v600    = met5_v60_p OR (met5_v60_1 OR met5_v60_2)
met5_v250    = met5_v25_p OR (met5_v25_1 OR met5_v25_2)
met5_vm1000  = met5_vm100_p OR (met5_vm100_1 OR met5_vm100_2)
met5_vm600   = met5_vm60_p OR (met5_vm60_1 OR met5_vm60_2)
met5_vm250   = met5_vm25_p OR (met5_vm25_1 OR met5_vm25_2)
met5_v1003   = met5_v1000 OR met5_v100_3
met5_v603    = met5_v600 OR met5_v60_3
met5_v253    = met5_v250 OR met5_v25_3
met5_vm1003  = met5_vm1000 OR met5_vm100_3
met5_vm603   = met5_vm600 OR met5_vm60_3
met5_vm253   = met5_vm250 OR met5_vm25_3
met5_v1004   = met5_v1003 OR met5_v100_4
met5_v604    = met5_v603 OR met5_v60_4
met5_v254    = met5_v253 OR met5_v25_4
met5_vm1004  = met5_vm1003 OR met5_vm100_4
met5_vm604   = met5_vm603 OR met5_vm60_4
met5_vm254   = met5_vm253 OR met5_vm25_4
met5_v1005   = met5_v1004 OR met5_v100_5
met5_v605    = met5_v604 OR met5_v60_5
met5_v255    = met5_v254 OR met5_v25_5
met5_vm1005  = met5_vm1004 OR met5_vm100_5
met5_vm605   = met5_vm604 OR met5_vm60_5
met5_vm255   = met5_vm254 OR met5_vm25_5
#IFDEF MIDMET
met5_v100t   = met5_v1005 OR met5_v100_t
met5_v60t    = met5_v605 OR met5_v60_t
met5_v25t    = met5_v255 OR met5_v25_t
met5_vm100t  = met5_vm1005 OR met5_vm100_t
met5_vm60t   = met5_vm605 OR met5_vm60_t
met5_vm25t   = met5_vm255 OR met5_vm25_t
#ELSE
met5_v100t   = met5_v1005 OR emptlay
met5_v60t    = met5_v605 OR emptlay
met5_v25t    = met5_v255 OR emptlay
met5_vm100t  = met5_vm1005 OR emptlay
met5_vm60t   = met5_vm605 OR emptlay
met5_vm25t   = met5_vm255 OR emptlay
#ENDIF
#IFDEF THKMET
met5_v100l   = met5_v100t OR met5_v100_l
met5_v60l    = met5_v60t OR met5_v60_l
met5_v25l    = met5_v25t OR met5_v25_l
met5_vm100l  = met5_vm100t OR met5_vm100_l
met5_vm60l   = met5_vm60t OR met5_vm60_l
met5_vm25l   = met5_vm25t OR met5_vm25_l
#ELSE
met5_v100l   = met5_v100t OR emptlay
met5_v60l    = met5_v60t OR emptlay
met5_v25l    = met5_v25t OR emptlay
met5_vm100l  = met5_vm100t OR emptlay
met5_vm60l   = met5_vm60t OR emptlay
met5_vm25l   = met5_vm25t OR emptlay
#ENDIF

met5_v100r   = met5_v100l OR (rm5 INTERACT met5_v100l)
met5_v60r    = met5_v60l OR (rm5 INTERACT met5_v60l)
met5_v25r    = met5_v25l OR (rm5 INTERACT met5_v25l)
met5_vm100r  = met5_vm100l OR (rm5 INTERACT met5_vm100l)
met5_vm60r   = met5_vm60l OR (rm5 INTERACT met5_vm60l)
met5_vm25r   = met5_vm25l OR (rm5 INTERACT met5_vm25l)

met5_vg      = (met5_v25l OR met5_v60l) OR met5_v100l
met5_vmg     = (met5_vm25l OR met5_vm60l) OR met5_vm100l
met5_val     = met5_vg OR met5_vmg

met5_vgr     = (met5_v25r OR met5_v60r) OR met5_v100r
met5_vmgr    = (met5_vm25r OR met5_vm60r) OR met5_vm100r
met5_valr    = met5_vgr OR met5_vmgr

met5_vn0     = met5_dg NOT met5_valr
met5_vn0r    = met5_vn0 OR (rm2 INTERACT met5_vn0)

met5_vn1r    = met5_vn0r OR met5_v25r
met5_vn2r    = met5_vn0r OR met5_vm25r

S4M5 {@Minimum MET5 spacing ... 0.4
  x1 = EXT met5_v100r met5_v60r < 0.4 ABUT <90 SINGULAR REGION
  x2 = EXT met5_v60r met5_vn1r < 0.4 ABUT <90 SINGULAR REGION
  x3 = EXT met5_vn1r met5_vm25r < 0.4 ABUT <90 SINGULAR REGION
  x4 = EXT met5_vn2r met5_vm60r < 0.4 ABUT <90 SINGULAR REGION
  x5 = EXT met5_vm60r met5_vm100r < 0.4 ABUT <90 SINGULAR REGION
  xn = EXT m5trm_dg < 0.4 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR x5)
  x NOT xn
}

S5M5 {@Minimum MET5 spacing ... 0.6
  x1 = EXT met5_v100r met5_vn1r < 0.6 ABUT <90 SINGULAR REGION
  x2 = EXT met5_v100r met5_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x3 = EXT met5_v60r met5_vmgr < 0.6 ABUT <90 SINGULAR REGION
  x4 = EXT met5_vn1r met5_vm60r < 0.6 ABUT <90 SINGULAR REGION
  x5 = EXT met5_vn1r met5_vm100r < 0.6 ABUT <90 SINGULAR REGION
  x6 = EXT met5_vm25r met5_vm100r < 0.6 ABUT <90 SINGULAR REGION
  xn = EXT m5trm_dg < 0.6 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR (x5 OR x6))
  x NOT xn
}

Q1M5 {@Resistor terminal net without VLABEL
  met5res_v = rm5 INTERACT met5_val == 1
  OUTSIDE EDGE (COIN EDGE met5res_v m5trm_dg) met5_val
}
#ENDIF


#IFDEF MIDMET
mett_v100_p  = (NET AREA RATIO mttrm_dg p1_vlbl100 != 0) OR (NET AREA RATIO csf_mt p1_vlbl100 != 0)
mett_v60_p   = (NET AREA RATIO mttrm_dg p1_vlbl60 != 0) OR (NET AREA RATIO csf_mt p1_vlbl60 != 0)
mett_v25_p   = (NET AREA RATIO mttrm_dg p1_vlbl25 != 0) OR (NET AREA RATIO csf_mt p1_vlbl25 != 0)
mett_vm100_p = (NET AREA RATIO mttrm_dg p1_vlblm100 != 0) OR (NET AREA RATIO csf_mt p1_vlblm100 != 0)
mett_vm60_p  = (NET AREA RATIO mttrm_dg p1_vlblm60 != 0) OR (NET AREA RATIO csf_mt p1_vlblm60 != 0)
mett_vm25_p  = (NET AREA RATIO mttrm_dg p1_vlblm25 != 0) OR (NET AREA RATIO csf_mt p1_vlblm25 != 0)

mett_v100_1  = (NET AREA RATIO mttrm_dg m1_vlbl100 != 0) OR (NET AREA RATIO csf_mt m1_vlbl100 != 0)
mett_v60_1   = (NET AREA RATIO mttrm_dg m1_vlbl60 != 0) OR (NET AREA RATIO csf_mt m1_vlbl60 != 0)
mett_v25_1   = (NET AREA RATIO mttrm_dg m1_vlbl25 != 0) OR (NET AREA RATIO csf_mt m1_vlbl25 != 0)
mett_vm100_1 = (NET AREA RATIO mttrm_dg m1_vlblm100 != 0) OR (NET AREA RATIO csf_mt m1_vlblm100 != 0)
mett_vm60_1  = (NET AREA RATIO mttrm_dg m1_vlblm60 != 0) OR (NET AREA RATIO csf_mt m1_vlblm60 != 0)
mett_vm25_1  = (NET AREA RATIO mttrm_dg m1_vlblm25 != 0) OR (NET AREA RATIO csf_mt m1_vlblm25 != 0)

mett_v100_2  = (NET AREA RATIO mttrm_dg m2_vlbl100 != 0) OR (NET AREA RATIO csf_mt m2_vlbl100 != 0)
mett_v60_2   = (NET AREA RATIO mttrm_dg m2_vlbl60 != 0) OR (NET AREA RATIO csf_mt m2_vlbl60 != 0)
mett_v25_2   = (NET AREA RATIO mttrm_dg m2_vlbl25 != 0) OR (NET AREA RATIO csf_mt m2_vlbl25 != 0)
mett_vm100_2 = (NET AREA RATIO mttrm_dg m2_vlblm100 != 0) OR (NET AREA RATIO csf_mt m2_vlblm100 != 0)
mett_vm60_2  = (NET AREA RATIO mttrm_dg m2_vlblm60 != 0) OR (NET AREA RATIO csf_mt m2_vlblm60 != 0)
mett_vm25_2  = (NET AREA RATIO mttrm_dg m2_vlblm25 != 0) OR (NET AREA RATIO csf_mt m2_vlblm25 != 0)

#IFDEF METAL3
mett_v100_3  = (NET AREA RATIO mttrm_dg m3_vlbl100 != 0) OR (NET AREA RATIO csf_mt m3_vlbl100 != 0)
mett_v60_3   = (NET AREA RATIO mttrm_dg m3_vlbl60 != 0) OR (NET AREA RATIO csf_mt m3_vlbl60 != 0)
mett_v25_3   = (NET AREA RATIO mttrm_dg m3_vlbl25 != 0) OR (NET AREA RATIO csf_mt m3_vlbl25 != 0)
mett_vm100_3 = (NET AREA RATIO mttrm_dg m3_vlblm100 != 0) OR (NET AREA RATIO csf_mt m3_vlblm100 != 0)
mett_vm60_3  = (NET AREA RATIO mttrm_dg m3_vlblm60 != 0) OR (NET AREA RATIO csf_mt m3_vlblm60 != 0)
mett_vm25_3  = (NET AREA RATIO mttrm_dg m3_vlblm25 != 0) OR (NET AREA RATIO csf_mt m3_vlblm25 != 0)
#ENDIF

#IFDEF METAL4
mett_v100_4  = (NET AREA RATIO mttrm_dg m4_vlbl100 != 0) OR (NET AREA RATIO csf_mt m4_vlbl100 != 0)
mett_v60_4   = (NET AREA RATIO mttrm_dg m4_vlbl60 != 0) OR (NET AREA RATIO csf_mt m4_vlbl60 != 0)
mett_v25_4   = (NET AREA RATIO mttrm_dg m4_vlbl25 != 0) OR (NET AREA RATIO csf_mt m4_vlbl25 != 0)
mett_vm100_4 = (NET AREA RATIO mttrm_dg m4_vlblm100 != 0) OR (NET AREA RATIO csf_mt m4_vlblm100 != 0)
mett_vm60_4  = (NET AREA RATIO mttrm_dg m4_vlblm60 != 0) OR (NET AREA RATIO csf_mt m4_vlblm60 != 0)
mett_vm25_4  = (NET AREA RATIO mttrm_dg m4_vlblm25 != 0) OR (NET AREA RATIO csf_mt m4_vlblm25 != 0)
#ENDIF

#IFDEF METAL5
mett_v100_5  = (NET AREA RATIO mttrm_dg m5_vlbl100 != 0) OR (NET AREA RATIO csf_mt m5_vlbl100 != 0)
mett_v60_5   = (NET AREA RATIO mttrm_dg m5_vlbl60 != 0) OR (NET AREA RATIO csf_mt m5_vlbl60 != 0)
mett_v25_5   = (NET AREA RATIO mttrm_dg m5_vlbl25 != 0) OR (NET AREA RATIO csf_mt m5_vlbl25 != 0)
mett_vm100_5 = (NET AREA RATIO mttrm_dg m5_vlblm100 != 0) OR (NET AREA RATIO csf_mt m5_vlblm100 != 0)
mett_vm60_5  = (NET AREA RATIO mttrm_dg m5_vlblm60 != 0) OR (NET AREA RATIO csf_mt m5_vlblm60 != 0)
mett_vm25_5  = (NET AREA RATIO mttrm_dg m5_vlblm25 != 0) OR (NET AREA RATIO csf_mt m5_vlblm25 != 0)
#ENDIF

mett_v100_t  = (NET AREA RATIO mttrm_dg mt_vlbl100 != 0) OR (NET AREA RATIO csf_mt mt_vlbl100 != 0)
mett_v60_t   = (NET AREA RATIO mttrm_dg mt_vlbl60 != 0) OR (NET AREA RATIO csf_mt mt_vlbl60 != 0)
mett_v25_t   = (NET AREA RATIO mttrm_dg mt_vlbl25 != 0) OR (NET AREA RATIO csf_mt mt_vlbl25 != 0)
mett_vm100_t = (NET AREA RATIO mttrm_dg mt_vlblm100 != 0) OR (NET AREA RATIO csf_mt mt_vlblm100 != 0)
mett_vm60_t  = (NET AREA RATIO mttrm_dg mt_vlblm60 != 0) OR (NET AREA RATIO csf_mt mt_vlblm60 != 0)
mett_vm25_t  = (NET AREA RATIO mttrm_dg mt_vlblm25 != 0) OR (NET AREA RATIO csf_mt mt_vlblm25 != 0)

#IFDEF THKMET
mett_v100_l  = (NET AREA RATIO mttrm_dg ml_vlbl100 != 0) OR (NET AREA RATIO csf_mt ml_vlbl100 != 0)
mett_v60_l   = (NET AREA RATIO mttrm_dg ml_vlbl60 != 0) OR (NET AREA RATIO csf_mt ml_vlbl60 != 0)
mett_v25_l   = (NET AREA RATIO mttrm_dg ml_vlbl25 != 0) OR (NET AREA RATIO csf_mt ml_vlbl25 != 0)
mett_vm100_l = (NET AREA RATIO mttrm_dg ml_vlblm100 != 0) OR (NET AREA RATIO csf_mt ml_vlblm100 != 0)
mett_vm60_l  = (NET AREA RATIO mttrm_dg ml_vlblm60 != 0) OR (NET AREA RATIO csf_mt ml_vlblm60 != 0)
mett_vm25_l  = (NET AREA RATIO mttrm_dg ml_vlblm25 != 0) OR (NET AREA RATIO csf_mt ml_vlblm25 != 0)
#ENDIF

mett_v1000   = mett_v100_p OR (mett_v100_1 OR mett_v100_2)
mett_v600    = mett_v60_p OR (mett_v60_1 OR mett_v60_2)
mett_v250    = mett_v25_p OR (mett_v25_1 OR mett_v25_2)
mett_vm1000  = mett_vm100_p OR (mett_vm100_1 OR mett_vm100_2)
mett_vm600   = mett_vm60_p OR (mett_vm60_1 OR mett_vm60_2)
mett_vm250   = mett_vm25_p OR (mett_vm25_1 OR mett_vm25_2)
#IFDEF METAL3
mett_v1003   = mett_v1000 OR mett_v100_3
mett_v603    = mett_v600 OR mett_v60_3
mett_v253    = mett_v250 OR mett_v25_3
mett_vm1003  = mett_vm1000 OR mett_vm100_3
mett_vm603   = mett_vm600 OR mett_vm60_3
mett_vm253   = mett_vm250 OR mett_vm25_3
#ELSE
mett_v1003   = mett_v1000 OR emptlay
mett_v603    = mett_v600 OR emptlay
mett_v253    = mett_v250 OR emptlay
mett_vm1003  = mett_vm1000 OR emptlay
mett_vm603   = mett_vm600 OR emptlay
mett_vm253   = mett_vm250 OR emptlay
#ENDIF
#IFDEF METAL4
mett_v1004   = mett_v1003 OR mett_v100_4
mett_v604    = mett_v603 OR mett_v60_4
mett_v254    = mett_v253 OR mett_v25_4
mett_vm1004  = mett_vm1003 OR mett_vm100_4
mett_vm604   = mett_vm603 OR mett_vm60_4
mett_vm254   = mett_vm253 OR mett_vm25_4
#ELSE
mett_v1004   = mett_v1003 OR emptlay
mett_v604    = mett_v603 OR emptlay
mett_v254    = mett_v253 OR emptlay
mett_vm1004  = mett_vm1003 OR emptlay
mett_vm604   = mett_vm603 OR emptlay
mett_vm254   = mett_vm253 OR emptlay
#ENDIF
#IFDEF METAL5
mett_v1005   = mett_v1004 OR mett_v100_5
mett_v605    = mett_v604 OR mett_v60_5
mett_v255    = mett_v254 OR mett_v25_5
mett_vm1005  = mett_vm1004 OR mett_vm100_5
mett_vm605   = mett_vm604 OR mett_vm60_5
mett_vm255   = mett_vm254 OR mett_vm25_5
#ELSE
mett_v1005   = mett_v1004 OR emptlay
mett_v605    = mett_v604 OR emptlay
mett_v255    = mett_v254 OR emptlay
mett_vm1005  = mett_vm1004 OR emptlay
mett_vm605   = mett_vm604 OR emptlay
mett_vm255   = mett_vm254 OR emptlay
#ENDIF
mett_v100t   = mett_v1005 OR mett_v100_t
mett_v60t    = mett_v605 OR mett_v60_t
mett_v25t    = mett_v255 OR mett_v25_t
mett_vm100t  = mett_vm1005 OR mett_vm100_t
mett_vm60t   = mett_vm605 OR mett_vm60_t
mett_vm25t   = mett_vm255 OR mett_vm25_t
#IFDEF THKMET
mett_v100l   = mett_v100t OR mett_v100_l
mett_v60l    = mett_v60t OR mett_v60_l
mett_v25l    = mett_v25t OR mett_v25_l
mett_vm100l  = mett_vm100t OR mett_vm100_l
mett_vm60l   = mett_vm60t OR mett_vm60_l
mett_vm25l   = mett_vm25t OR mett_vm25_l
#ELSE
mett_v100l   = mett_v100t OR emptlay
mett_v60l    = mett_v60t OR emptlay
mett_v25l    = mett_v25t OR emptlay
mett_vm100l  = mett_vm100t OR emptlay
mett_vm60l   = mett_vm60t OR emptlay
mett_vm25l   = mett_vm25t OR emptlay
#ENDIF

mett_v100r   = mett_v100l OR (rmtp INTERACT mett_v100l)
mett_v60r    = mett_v60l OR (rmtp INTERACT mett_v60l)
mett_v25r    = mett_v25l OR (rmtp INTERACT mett_v25l)
mett_vm100r  = mett_vm100l OR (rmtp INTERACT mett_vm100l)
mett_vm60r   = mett_vm60l OR (rmtp INTERACT mett_vm60l)
mett_vm25r   = mett_vm25l OR (rmtp INTERACT mett_vm25l)

mett_vg      = (mett_v25l OR mett_v60l) OR mett_v100l
mett_vmg     = (mett_vm25l OR mett_vm60l) OR mett_vm100l
mett_val     = mett_vg OR mett_vmg

mett_vgr     = (mett_v25r OR mett_v60r) OR mett_v100r
mett_vmgr    = (mett_vm25r OR mett_vm60r) OR mett_vm100r
mett_valr    = mett_vgr OR mett_vmgr

mett_vn0     = mettp_dg NOT mett_valr
mett_vn0r    = mett_vn0 OR (rm2 INTERACT mett_vn0)

mett_vn1r    = mett_vn0r OR mett_v25r
mett_vn2r    = mett_vn0r OR mett_vm25r

S4MT {@Minimum METTP spacing ... 0.5
  x1 = EXT mett_v100r mett_v60r < 0.5 ABUT <90 SINGULAR REGION
  x2 = EXT mett_v60r mett_vn1r < 0.5 ABUT <90 SINGULAR REGION
  x3 = EXT mett_vn1r mett_vm25r < 0.5 ABUT <90 SINGULAR REGION
  x4 = EXT mett_vn2r mett_vm60r < 0.5 ABUT <90 SINGULAR REGION
  x5 = EXT mett_vm60r mett_vm100r < 0.5 ABUT <90 SINGULAR REGION
  xn = EXT mttrm_dg < 0.5 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR x5)
  x NOT xn
}

S5MT {@Minimum METTP spacing ... 0.8
  x1 = EXT mett_v100r mett_vn1r < 0.8 ABUT <90 SINGULAR REGION
  x2 = EXT mett_v100r mett_vmgr < 0.8 ABUT <90 SINGULAR REGION
  x3 = EXT mett_v60r mett_vmgr < 0.8 ABUT <90 SINGULAR REGION
  x4 = EXT mett_vn1r mett_vm60r < 0.8 ABUT <90 SINGULAR REGION
  x5 = EXT mett_vn1r mett_vm100r < 0.8 ABUT <90 SINGULAR REGION
  x6 = EXT mett_vm25r mett_vm100r < 0.8 ABUT <90 SINGULAR REGION
  xn = EXT mttrm_dg < 0.8 ABUT <90 CONNECTED SINGULAR REGION
  x  = (x1 OR x2) OR ((x3 OR x4) OR (x5 OR x6))
  x NOT xn
}

Q1MT {@Resistor terminal net without VLABEL
  mettres_v = rmtp INTERACT mett_val == 1
  OUTSIDE EDGE (COIN EDGE mettres_v mttrm_dg) mett_val
}
#ENDIF


#IFDEF THKMET
metl_v100_p  = NET AREA RATIO mltrm_dg p1_vlbl100 != 0
metl_v60_p   = NET AREA RATIO mltrm_dg p1_vlbl60 != 0
metl_v25_p   = NET AREA RATIO mltrm_dg p1_vlbl25 != 0
metl_vm100_p = NET AREA RATIO mltrm_dg p1_vlblm100 != 0
metl_vm60_p  = NET AREA RATIO mltrm_dg p1_vlblm60 != 0
metl_vm25_p  = NET AREA RATIO mltrm_dg p1_vlblm25 != 0

metl_v100_1  = NET AREA RATIO mltrm_dg m1_vlbl100 != 0
metl_v60_1   = NET AREA RATIO mltrm_dg m1_vlbl60 != 0
metl_v25_1   = NET AREA RATIO mltrm_dg m1_vlbl25 != 0
metl_vm100_1 = NET AREA RATIO mltrm_dg m1_vlblm100 != 0
metl_vm60_1  = NET AREA RATIO mltrm_dg m1_vlblm60 != 0
metl_vm25_1  = NET AREA RATIO mltrm_dg m1_vlblm25 != 0

metl_v100_2  = NET AREA RATIO mltrm_dg m2_vlbl100 != 0
metl_v60_2   = NET AREA RATIO mltrm_dg m2_vlbl60 != 0
metl_v25_2   = NET AREA RATIO mltrm_dg m2_vlbl25 != 0
metl_vm100_2 = NET AREA RATIO mltrm_dg m2_vlblm100 != 0
metl_vm60_2  = NET AREA RATIO mltrm_dg m2_vlblm60 != 0
metl_vm25_2  = NET AREA RATIO mltrm_dg m2_vlblm25 != 0

#IFDEF METAL3
metl_v100_3  = NET AREA RATIO mltrm_dg m3_vlbl100 != 0
metl_v60_3   = NET AREA RATIO mltrm_dg m3_vlbl60 != 0
metl_v25_3   = NET AREA RATIO mltrm_dg m3_vlbl25 != 0
metl_vm100_3 = NET AREA RATIO mltrm_dg m3_vlblm100 != 0
metl_vm60_3  = NET AREA RATIO mltrm_dg m3_vlblm60 != 0
metl_vm25_3  = NET AREA RATIO mltrm_dg m3_vlblm25 != 0
#ENDIF

#IFDEF METAL4
metl_v100_4  = NET AREA RATIO mltrm_dg m4_vlbl100 != 0
metl_v60_4   = NET AREA RATIO mltrm_dg m4_vlbl60 != 0
metl_v25_4   = NET AREA RATIO mltrm_dg m4_vlbl25 != 0
metl_vm100_4 = NET AREA RATIO mltrm_dg m4_vlblm100 != 0
metl_vm60_4  = NET AREA RATIO mltrm_dg m4_vlblm60 != 0
metl_vm25_4  = NET AREA RATIO mltrm_dg m4_vlblm25 != 0
#ENDIF

#IFDEF METAL5
metl_v100_5  = NET AREA RATIO mltrm_dg m5_vlbl100 != 0
metl_v60_5   = NET AREA RATIO mltrm_dg m5_vlbl60 != 0
metl_v25_5   = NET AREA RATIO mltrm_dg m5_vlbl25 != 0
metl_vm100_5 = NET AREA RATIO mltrm_dg m5_vlblm100 != 0
metl_vm60_5  = NET AREA RATIO mltrm_dg m5_vlblm60 != 0
metl_vm25_5  = NET AREA RATIO mltrm_dg m5_vlblm25 != 0
#ENDIF

#IFDEF MIDMET
metl_v100_t  = NET AREA RATIO mltrm_dg mt_vlbl100 != 0
metl_v60_t   = NET AREA RATIO mltrm_dg mt_vlbl60 != 0
metl_v25_t   = NET AREA RATIO mltrm_dg mt_vlbl25 != 0
metl_vm100_t = NET AREA RATIO mltrm_dg mt_vlblm100 != 0
metl_vm60_t  = NET AREA RATIO mltrm_dg mt_vlblm60 != 0
metl_vm25_t  = NET AREA RATIO mltrm_dg mt_vlblm25 != 0
#ENDIF

metl_v100_l  = NET AREA RATIO mltrm_dg ml_vlbl100 != 0
metl_v60_l   = NET AREA RATIO mltrm_dg ml_vlbl60 != 0
metl_v25_l   = NET AREA RATIO mltrm_dg ml_vlbl25 != 0
metl_vm100_l = NET AREA RATIO mltrm_dg ml_vlblm100 != 0
metl_vm60_l  = NET AREA RATIO mltrm_dg ml_vlblm60 != 0
metl_vm25_l  = NET AREA RATIO mltrm_dg ml_vlblm25 != 0

metl_v1000   = metl_v100_p OR (metl_v100_1 OR metl_v100_2)
metl_v600    = metl_v60_p OR (metl_v60_1 OR metl_v60_2)
metl_v250    = metl_v25_p OR (metl_v25_1 OR metl_v25_2)
metl_vm1000  = metl_vm100_p OR (metl_vm100_1 OR metl_vm100_2)
metl_vm600   = metl_vm60_p OR (metl_vm60_1 OR metl_vm60_2)
metl_vm250   = metl_vm25_p OR (metl_vm25_1 OR metl_vm25_2)
#IFDEF METAL3
metl_v1003   = metl_v1000 OR metl_v100_3
metl_v603    = metl_v600 OR metl_v60_3
metl_v253    = metl_v250 OR metl_v25_3
metl_vm1003  = metl_vm1000 OR metl_vm100_3
metl_vm603   = metl_vm600 OR metl_vm60_3
metl_vm253   = metl_vm250 OR metl_vm25_3
#ELSE
metl_v1003   = metl_v1000 OR emptlay
metl_v603    = metl_v600 OR emptlay
metl_v253    = metl_v250 OR emptlay
metl_vm1003  = metl_vm1000 OR emptlay
metl_vm603   = metl_vm600 OR emptlay
metl_vm253   = metl_vm250 OR emptlay
#ENDIF
#IFDEF METAL4
metl_v1004   = metl_v1003 OR metl_v100_4
metl_v604    = metl_v603 OR metl_v60_4
metl_v254    = metl_v253 OR metl_v25_4
metl_vm1004  = metl_vm1003 OR metl_vm100_4
metl_vm604   = metl_vm603 OR metl_vm60_4
metl_vm254   = metl_vm253 OR metl_vm25_4
#ELSE
metl_v1004   = metl_v1003 OR emptlay
metl_v604    = metl_v603 OR emptlay
metl_v254    = metl_v253 OR emptlay
metl_vm1004  = metl_vm1003 OR emptlay
metl_vm604   = metl_vm603 OR emptlay
metl_vm254   = metl_vm253 OR emptlay
#ENDIF
#IFDEF METAL5
metl_v1005   = metl_v1004 OR metl_v100_5
metl_v605    = metl_v604 OR metl_v60_5
metl_v255    = metl_v254 OR metl_v25_5
metl_vm1005  = metl_vm1004 OR metl_vm100_5
metl_vm605   = metl_vm604 OR metl_vm60_5
metl_vm255   = metl_vm254 OR metl_vm25_5
#ELSE
metl_v1005   = metl_v1004 OR emptlay
metl_v605    = metl_v604 OR emptlay
metl_v255    = metl_v254 OR emptlay
metl_vm1005  = metl_vm1004 OR emptlay
metl_vm605   = metl_vm604 OR emptlay
metl_vm255   = metl_vm254 OR emptlay
#ENDIF
#IFDEF MIDMET
metl_v100t   = metl_v1005 OR metl_v100_t
metl_v60t    = metl_v605 OR metl_v60_t
metl_v25t    = metl_v255 OR metl_v25_t
metl_vm100t  = metl_vm1005 OR metl_vm100_t
metl_vm60t   = metl_vm605 OR metl_vm60_t
metl_vm25t   = metl_vm255 OR metl_vm25_t
#ELSE
metl_v100t   = metl_v1005 OR emptlay
metl_v60t    = metl_v605 OR emptlay
metl_v25t    = metl_v255 OR emptlay
metl_vm100t  = metl_vm1005 OR emptlay
metl_vm60t   = metl_vm605 OR emptlay
metl_vm25t   = metl_vm255 OR emptlay
#ENDIF
metl_v100l   = metl_v100t OR metl_v100_l
metl_v60l    = metl_v60t OR metl_v60_l
metl_v25l    = metl_v25t OR metl_v25_l
metl_vm100l  = metl_vm100t OR metl_vm100_l
metl_vm60l   = metl_vm60t OR metl_vm60_l
metl_vm25l   = metl_vm25t OR metl_vm25_l

metl_vg      = (metl_v25l OR metl_v60l) OR metl_v100l
metl_vmg     = (metl_vm25l OR metl_vm60l) OR metl_vm100l
metl_val     = metl_vg OR metl_vmg

Q1ML {@Resistor terminal net without VLABEL
  metlres_v = rmtpl INTERACT metl_val == 1
  OUTSIDE EDGE (COIN EDGE metlres_v mltrm_dg) metl_val
}
#ENDIF

#ENDIF


//------------------------------------------------------------
//      IMD Popping Checks
//------------------------------------------------------------

#IFDEF POPPING

met1_popar1  = met1_w2       SIZE BY  0.5 OVERUNDER
met1_popar2  = met1_popar1   NOT      met2sl
met2_popar2  = met2_w2       SIZE BY  0.5 OVERUNDER
met3_popar2  = bulk          AND      emptlay
met4_popar3  = met3_popar2   OR       emptlay
met5_popar4  = met4_popar3   OR       emptlay
mett_popar5  = met5_popar4   OR       emptlay

#IFDEF METAL3
met1_popar3  = met1_popar2   NOT      met3sl
met2_popar3  = met2_popar2   NOT      met3sl
met3_popar3  = met3_w2       SIZE BY  0.5 OVERUNDER
#ELSE
met1_popar3  = met1_popar2   OR       emptlay
met2_popar3  = met2_popar2   OR       emptlay
met3_popar3  = met3_popar2   OR       emptlay
#ENDIF

#IFDEF METAL4
met1_popar4  = met1_popar3   NOT      met4sl
met2_popar4  = met2_popar3   NOT      met4sl
met3_popar4  = met3_popar3   NOT      met4sl
met4_popar4  = met4_w2       SIZE BY  0.5 OVERUNDER
#ELSE
met1_popar4  = met1_popar3   OR       emptlay
met2_popar4  = met2_popar3   OR       emptlay
met3_popar4  = met3_popar3   OR       emptlay
met4_popar4  = met4_popar3   OR       emptlay
#ENDIF

#IFDEF METAL5
met1_popar5  = met1_popar4   NOT      met5sl
met2_popar5  = met2_popar4   NOT      met5sl
met3_popar5  = met3_popar4   NOT      met5sl
met4_popar5  = met4_popar4   NOT      met5sl
met5_popar5  = met5_w2       SIZE BY  0.5 OVERUNDER
#ELSE
met1_popar5  = met1_popar4   OR       emptlay
met2_popar5  = met2_popar4   OR       emptlay
met3_popar5  = met3_popar4   OR       emptlay
met4_popar5  = met4_popar4   OR       emptlay
met5_popar5  = met5_popar4   OR       emptlay
#ENDIF

#IFDEF MIDMET
met1_popart  = met1_popar5   NOT      mettsl
met2_popart  = met2_popar5   NOT      mettsl
met3_popart  = met3_popar5   NOT      mettsl
met4_popart  = met4_popar5   NOT      mettsl
met5_popart  = met5_popar5   NOT      mettsl
mett_popart  = mett_w2       SIZE BY  0.5 OVERUNDER
#ELSE
met1_popart  = met1_popar5   OR       emptlay
met2_popart  = met2_popar5   OR       emptlay
met3_popart  = met3_popar5   OR       emptlay
met4_popart  = met4_popar5   OR       emptlay
met5_popart  = met5_popar5   OR       emptlay
mett_popart  = mett_popar5   OR       emptlay
#ENDIF

#IFDEF THKMET
met1_poparl  = met1_popart   NOT      mettpl
met2_poparl  = met2_popart   NOT      mettpl
met3_poparl  = met3_popart   NOT      mettpl
met4_poparl  = met4_popart   NOT      mettpl
met5_poparl  = met5_popart   NOT      mettpl
mett_poparl  = mett_popart   NOT      mettpl
#ELSE
met1_poparl  = met1_popart   OR       emptlay
met2_poparl  = met2_popart   OR       emptlay
met3_poparl  = met3_popart   OR       emptlay
met4_poparl  = met4_popart   OR       emptlay
met5_poparl  = met5_popart   OR       emptlay
mett_poparl  = mett_popart   OR       emptlay
#ENDIF

W5M1 {@Maximum MET1 region size ... 17.0 x 17.0
  met1_poparl WITH WIDTH > 17
}

#IFNDEF THINTOPMETAL
bulk_mid_thk = bulk_1        OR       emptlay
#ELSE
bulk_mid_thk = bulk_1        AND      emptlay
#ENDIF

#IFDEF METAL3
bulk_m3      = (bulk_1       OR       emptlay) OR emptlay
#ELSE
bulk_m3      = (bulk_1       AND      emptlay) OR emptlay
#ENDIF

#IFDEF METAL4
bulk_m4      = bulk_m3       OR       emptlay
#ELSE
bulk_m4      = bulk_m3       AND      emptlay
#ENDIF

#IFDEF METAL5
bulk_m5      = bulk_m4       OR       emptlay
#ELSE
bulk_m5      = bulk_m4       AND      emptlay
#ENDIF

#IFDEF METAL6
bulk_m6      = bulk_m5       OR       emptlay
#ELSE
bulk_m6      = bulk_m5       AND      emptlay
#ENDIF

#IFDEF THKMET
bulk_ml      = (bulk_1       OR       emptlay) OR emptlay
#ELSE
bulk_ml      = (bulk_1       AND      emptlay) OR emptlay
#ENDIF

W5M2 {@Maximum MET2 region size ... 17.0 x 17.0
  met2_popar = met2_poparl AND (bulk_mid_thk OR bulk_m3)
  met2_popar WITH WIDTH > 17
}

W5M3 {@Maximum MET3 region size ... 17.0 x 17.0
  met3_popar = met3_poparl AND (bulk_mid_thk OR bulk_m4)
  met3_popar WITH WIDTH > 17
}

W5M4 {@Maximum MET4 region size ... 17.0 x 17.0
  met4_popar = met4_poparl AND (bulk_mid_thk OR bulk_m5)
  met4_popar WITH WIDTH > 17
}

W5M5 {@Maximum MET5 region size ... 17.0 x 17.0
  met5_popar = met5_poparl AND (bulk_mid_thk OR bulk_m6)
  met5_popar WITH WIDTH > 17
}

W5MT {@Maximum METTP region size ... 17.0 x 17.0
  mett_popar = mett_poparl AND bulk_ml
  mett_popar WITH WIDTH > 17
}

#ENDIF


//------------------------------------------------------------
//      DUMMY Checks
//------------------------------------------------------------

B1YD {@DIFFDUMMY overlap of DIFF is not allowed
  diff_dy AND diff_dg
}

B2YD {@DIFFDUMMY overlap of NIMP or PIMP is not allowed
  diff_dy AND implt
}

B3YD {@DIFFDUMMY overlap of CONT is not allowed
  diff_dy AND cont
}

B5YD {@DIFFDUMMY overlap of SBLK is not allowed
  diff_dy AND sblk
}

W1YD {@Minimum DIFFDUMMY width ... 0.4
  INT diff_dy < 0.4 ABUT <90 SINGULAR REGION
}

S1YD {@Minimum DIFFDUMMY spacing/notch ... 0.5
  EXT diff_dy < 0.5 ABUT <90 SINGULAR REGION
}

S1YDDF {@Minimum DIFFDUMMY spacing to DIFF ... 3.0
  EXT diff_dy diff_dg < 3.0 ABUT <90 SINGULAR REGION
}

S1YDIN {@Minimum DIFFDUMMY spacing to NIMP ... 0.3
  EXT diff_dy nimp < 0.3 ABUT <90 SINGULAR REGION
}

S1YDIP {@Minimum DIFFDUMMY spacing to PIMP ... 0.3
  EXT diff_dy pimp < 0.3 ABUT <90 SINGULAR REGION
}

S1YDP1 {@Minimum DIFFDUMMY spacing to POLY1 ... 3.0
  EXT diff_dy poly_dg < 3.0 ABUT <90 SINGULAR REGION
}

S1YDSB {@Minimum DIFFDUMMY spacing to SBLK ... 3.0
  EXT diff_dy sblk < 3.0 ABUT <90 SINGULAR REGION
}

S1YDPI {@Minimum DIFFDUMMY spacing to PW4DMY ... 5.0
  EXT diff_dy apwell < 5.0 ABUT <90 SINGULAR REGION
}

S1YDNW {@Minimum DIFFDUMMY spacing to NW4DMY ... 5.0
  EXT diff_dy anwell < 5.0 ABUT <90 SINGULAR REGION
}

E1YDPI {@Minimum PW4DMY enclosure of DIFFDUMMY ... 5.0
  ENC diff_dy apwell < 5.0 ABUT <90 SINGULAR REGION
}

E1YDNW {@Minimum NW4DMY enclosure of DIFFDUMMY ... 5.0
  ENC diff_dy anwell < 5.0 ABUT <90 SINGULAR REGION
}

S10YD {@Minimum DIFFDUMMY spacing to LOCKED ... 3.6
  EXT diff_dy locked < 3.6 ABUT <90 SINGULAR REGION
}

S11YD {@Minimum DIFFDUMMY spacing to LOCKED1 ... 3.6
  EXT diff_dy locked1 < 3.6 ABUT <90 SINGULAR REGION
}

S12YD {@Minimum DIFFDUMMY spacing to LOCKED2 ... 3.6
  EXT diff_dy locked2 < 3.6 ABUT <90 SINGULAR REGION
}

S13YD {@Minimum DIFFDUMMY spacing to LOCKED3 ... 3.6
  EXT diff_dy locked3 < 3.6 ABUT <90 SINGULAR REGION
}

S14YD {@Minimum DIFFDUMMY spacing to LOCKED4 ... 3.6
  EXT diff_dy locked4 < 3.6 ABUT <90 SINGULAR REGION
}

A1YD {@Minimum DIFFDUMMY area ... 1.2
  AREA diff_dy < 1.2
}


B1YP {@Only rectangular P1DUMMY is allowed
  NOT RECTANGLE poly_dy
}

B2YP {@P1DUMMY overlap of POLY1 is not allowed
  poly_dy AND poly_dg
}

B3YP {@P1DUMMY overlap of CONT is not allowed
  poly_dy AND cont
}

B5YP {@P1DUMMY overlap of SBLK is not allowed
  poly_dy AND sblk
}

B6YP {@P1DUMMY overlap of MRES or HRES is not allowed
  poly_dy AND (mres OR hres)
}

W1YP {@Minimum P1DUMMY width ... 1.0
  INT poly_dy < 1.0 ABUT <90 SINGULAR REGION
}

S1YP {@Minimum P1DUMMY spacing ... 1.0
  EXT poly_dy < 1.0 ABUT <90 SPACE SINGULAR REGION
}

S1YPP1 {@Minimum P1DUMMY spacing to POLY1 ... 3.0
  EXT poly_dy poly_dg < 3.0 ABUT <90 SINGULAR REGION
}

S1YPDF {@Minimum P1DUMMY spacing to DIFF ... 3.0
  EXT poly_dy diff_dg < 3.0 ABUT <90 SINGULAR REGION
}

S1YPYD {@Minimum P1DUMMY spacing to DIFFDUMMY ... 0.4
  EXT poly_dy diff_dy < 0.4 ABUT <90 SINGULAR REGION
}

S1YPSB {@Minimum P1DUMMY spacing to SBLK ... 3.0
  EXT poly_dy sblk < 3.0 ABUT <90 SINGULAR REGION
}

S1YPPI {@Minimum P1DUMMY spacing to PW4DMY ... 5.0
  EXT poly_dy apwell < 5.0 ABUT <90 SINGULAR REGION
}

S1YPNW {@Minimum P1DUMMY spacing to NW4DMY ... 5.0
  EXT poly_dy anwell < 5.0 ABUT <90 SINGULAR REGION
}

E1YPPI {@Minimum PW4DMY enclosure of P1DUMMY ... 5.0
  ENC poly_dy apwell < 5.0 ABUT <90 SINGULAR REGION
}

E1YPNW {@Minimum NW4DMY enclosure of P1DUMMY ... 5.0
  ENC poly_dy anwell < 5.0 ABUT <90 SINGULAR REGION
}

S10YP {@Minimum P1DUMMY spacing to LOCKED ... 3.6
  EXT poly_dy locked < 3.6 ABUT <90 SINGULAR REGION
}

S11YP {@Minimum P1DUMMY spacing to LOCKED1 ... 3.6
  EXT poly_dy locked1 < 3.6 ABUT <90 SINGULAR REGION
}

S12YP {@Minimum P1DUMMY spacing to LOCKED2 ... 3.6
  EXT poly_dy locked2 < 3.6 ABUT <90 SINGULAR REGION
}

S13YP {@Minimum P1DUMMY spacing to LOCKED3 ... 3.6
  EXT poly_dy locked3 < 3.6 ABUT <90 SINGULAR REGION
}

S14YP {@Minimum P1DUMMY spacing to LOCKED4 ... 3.6
  EXT poly_dy locked4 < 3.6 ABUT <90 SINGULAR REGION
}


B1Y1 {@Only rectangular M1DUMMY is allowed
  NOT RECTANGLE met1_dy
}

B2Y1 {@M1DUMMY overlap of MET1 is not allowed
  met1_dy AND met1_dg
}

B3Y1 {@M1DUMMY overlap of CONT or VIA1 is not allowed
  met1_dy AND cont
  met1_dy AND via1
}

B4Y1 {@M1DUMMY overlap of HRES is not allowed
  met1_dy AND hres
}

W1Y1 {@Minimum M1DUMMY width ... 2.0
  INT met1_dy < 2.0 ABUT <90 SINGULAR REGION
}

W2Y1 {@Maximum M1DUMMY edge length ... 20.0
  length met1_dy > 20
}

S1Y1 {@Minimum M1DUMMY spacing ... 2.0
  EXT met1_dy < 2.0 ABUT <90 SPACE SINGULAR REGION
}

S10Y1 {@Minimum M1DUMMY spacing to LOCKED ... 4.0
  EXT met1_dy locked < 4.0 ABUT <90 SINGULAR REGION
}

S11Y1 {@Minimum M1DUMMY spacing to LOCKED1 ... 4.0
  EXT met1_dy locked1 < 4.0 ABUT <90 SINGULAR REGION
}

S12Y1 {@Minimum M1DUMMY spacing to LOCKED2 ... 4.0
  EXT met1_dy locked2 < 4.0 ABUT <90 SINGULAR REGION
}

S13Y1 {@Minimum M1DUMMY spacing to LOCKED3 ... 4.0
  EXT met1_dy locked3 < 4.0 ABUT <90 SINGULAR REGION
}

S14Y1 {@Minimum M1DUMMY spacing to LOCKED4 ... 4.0
  EXT met1_dy locked4 < 4.0 ABUT <90 SINGULAR REGION
}

S1Y1HR {@Minimum M1DUMMY spacing to HRES ... 5.0
  EXT met1_dy hres < 5.0 ABUT <90 SINGULAR REGION
}

S1Y1M1 {@Minimum M1DUMMY spacing to MET1 ... 4.0
  EXT met1_dy met1_dg < 4.0 ABUT <90 SINGULAR REGION
}


B1Y2 {@Only rectangular M2DUMMY is allowed
  NOT RECTANGLE met2_dy
}

B2Y2 {@M2DUMMY overlap of MET2 is not allowed
  met2_dy AND met2_dg
}

B3Y2V1 {@M2DUMMY overlap of VIA1 is not allowed
  met2_dy AND via1
}

#IFDEF METAL3
B3Y2V2 {@M2DUMMY overlap of VIA2 is not allowed
  met2_dy AND via2
}
#ELSE
#IFDEF MIDMET
B3Y2VT {@M2DUMMY overlap of VIATP is not allowed
  met2_dy AND viatp
}
#ELSE
#IFDEF THKMET
B3Y2VL {@M2DUMMY overlap of VIATPL is not allowed
  met2_dy AND viatpl
}
#ENDIF
#ENDIF
#ENDIF

W1Y2 {@Minimum M2DUMMY width ... 2.0
  INT met2_dy < 2.0 ABUT <90 SINGULAR REGION
}

W2Y2 {@Maximum M2DUMMY edge length ... 20.0
  length met2_dy > 20
}

S1Y2 {@Minimum M2DUMMY spacing ... 2.0
  EXT met2_dy < 2.0 ABUT <90 SPACE SINGULAR REGION
}

S10Y2 {@Minimum M2DUMMY spacing to LOCKED ... 4.0
  EXT met2_dy locked < 4.0 ABUT <90 SINGULAR REGION
}

S11Y2 {@Minimum M2DUMMY spacing to LOCKED1 ... 4.0
  EXT met2_dy locked1 < 4.0 ABUT <90 SINGULAR REGION
}

S12Y2 {@Minimum M2DUMMY spacing to LOCKED2 ... 4.0
  EXT met2_dy locked2 < 4.0 ABUT <90 SINGULAR REGION
}

S13Y2 {@Minimum M2DUMMY spacing to LOCKED3 ... 4.0
  EXT met2_dy locked3 < 4.0 ABUT <90 SINGULAR REGION
}

S14Y2 {@Minimum M2DUMMY spacing to LOCKED4 ... 4.0
  EXT met2_dy locked4 < 4.0 ABUT <90 SINGULAR REGION
}

S1Y2M2 {@Minimum M2DUMMY spacing to MET2 ... 4.0
  EXT met2_dy met2_dg < 4.0 ABUT <90 SINGULAR REGION
}


#IFDEF METAL3
B1Y3 {@Only rectangular M3DUMMY is allowed
  NOT RECTANGLE met3_dy
}

B2Y3 {@M3DUMMY overlap of MET3 is not allowed
  met3_dy AND met3_dg
}

B3Y3V2 {@M3DUMMY overlap of VIA2 is not allowed
  met3_dy AND via2
}

#IFDEF METAL4
B3Y3V3 {@M3DUMMY overlap of VIA3 is not allowed
  met3_dy AND via3
}
#ELSE
#IFDEF MIDMET
B3Y3VT {@M3DUMMY overlap of VIATP is not allowed
  met3_dy AND viatp
}
#ELSE
#IFDEF THKMET
B3Y3VL {@M3DUMMY overlap of VIATPL is not allowed
  met3_dy AND viatpl
}
#ENDIF
#ENDIF
#ENDIF

W1Y3 {@Minimum M3DUMMY width ... 2.0
  INT met3_dy < 2.0 ABUT <90 SINGULAR REGION
}

W2Y3 {@Maximum M3DUMMY edge length ... 20.0
  length met3_dy > 20
}

S1Y3 {@Minimum M3DUMMY spacing ... 2.0
  EXT met3_dy < 2.0 ABUT <90 SPACE SINGULAR REGION
}

S10Y3 {@Minimum M3DUMMY spacing to LOCKED ... 4.0
  EXT met3_dy locked < 4.0 ABUT <90 SINGULAR REGION
}

S11Y3 {@Minimum M3DUMMY spacing to LOCKED1 ... 4.0
  EXT met3_dy locked1 < 4.0 ABUT <90 SINGULAR REGION
}

S12Y3 {@Minimum M3DUMMY spacing to LOCKED2 ... 4.0
  EXT met3_dy locked2 < 4.0 ABUT <90 SINGULAR REGION
}

S13Y3 {@Minimum M3DUMMY spacing to LOCKED3 ... 4.0
  EXT met3_dy locked3 < 4.0 ABUT <90 SINGULAR REGION
}

S1Y3M3 {@Minimum M3DUMMY spacing to MET3 ... 4.0
  EXT met3_dy met3_dg < 4.0 ABUT <90 SINGULAR REGION
}
#ENDIF


#IFDEF METAL4
B1Y4 {@Only rectangular M4DUMMY is allowed
  NOT RECTANGLE met4_dy
}

B2Y4 {@M4DUMMY overlap of MET4 is not allowed
  met4_dy AND met4_dg
}

B3Y4V3 {@M4DUMMY overlap of VIA3 is not allowed
  met4_dy AND via3
}

#IFDEF METAL5
B3Y4V4 {@M4DUMMY overlap of VIA4 is not allowed
  met4_dy AND via4
}
#ELSE
#IFDEF MIDMET
B3Y4VT {@M4DUMMY overlap of VIATP is not allowed
  met4_dy AND viatp
}
#ELSE
#IFDEF THKMET
B3Y4VL {@M4DUMMY overlap of VIATPL is not allowed
  met4_dy AND viatpl
}
#ENDIF
#ENDIF
#ENDIF

W1Y4 {@Minimum M4DUMMY width ... 2.0
  INT met4_dy < 2.0 ABUT <90 SINGULAR REGION
}

W2Y4 {@Maximum M4DUMMY edge length ... 20.0
  length met4_dy > 20
}

S1Y4 {@Minimum M4DUMMY spacing ... 2.0
  EXT met4_dy < 2.0 ABUT <90 SPACE SINGULAR REGION
}

S10Y4 {@Minimum M4DUMMY spacing to LOCKED ... 4.0
  EXT met4_dy locked < 4.0 ABUT <90 SINGULAR REGION
}

S11Y4 {@Minimum M4DUMMY spacing to LOCKED1 ... 4.0
  EXT met4_dy locked1 < 4.0 ABUT <90 SINGULAR REGION
}

S12Y4 {@Minimum M4DUMMY spacing to LOCKED2 ... 4.0
  EXT met4_dy locked2 < 4.0 ABUT <90 SINGULAR REGION
}

S1Y4M4 {@Minimum M4DUMMY spacing to MET4 ... 4.0
  EXT met4_dy met4_dg < 4.0 ABUT <90 SINGULAR REGION
}
#ENDIF


#IFDEF METAL5
B1Y5 {@Only rectangular M5DUMMY is allowed
  NOT RECTANGLE met5_dy
}

B2Y5 {@M5DUMMY overlap of MET5 is not allowed
  met5_dy AND met5_dg
}

B3Y5V4 {@M5DUMMY overlap of VIA4 is not allowed
  met5_dy AND via4
}

#IFDEF MIDMET
B3Y5VT {@M5DUMMY overlap of VIATP is not allowed
  met5_dy AND viatp
}
#ENDIF

#IFDEF THKMET
B3Y5VL {@M5DUMMY overlap of VIATPL is not allowed
  met5_dy AND viatpl
}
#ENDIF

W1Y5 {@Minimum M5DUMMY width ... 2.0
  INT met5_dy < 2.0 ABUT <90 SINGULAR REGION
}

W2Y5 {@Maximum M5DUMMY edge length ... 20.0
  length met5_dy > 20
}

S1Y5 {@Minimum M5DUMMY spacing ... 2.0
  EXT met5_dy < 2.0 ABUT <90 SPACE SINGULAR REGION
}

S10Y5 {@Minimum M5DUMMY spacing to LOCKED ... 4.0
  EXT met5_dy locked < 4.0 ABUT <90 SINGULAR REGION
}

S11Y5 {@Minimum M5DUMMY spacing to LOCKED1 ... 4.0
  EXT met5_dy locked1 < 4.0 ABUT <90 SINGULAR REGION
}

S1Y5M5 {@Minimum M5DUMMY spacing to MET5 ... 4.0
  EXT met5_dy met5_dg < 4.0 ABUT <90 SINGULAR REGION
}
#ENDIF


#IFDEF MIDMET
B1YT {@Only rectangular MTPDUMMY is allowed
  NOT RECTANGLE mettp_dy
}

B2YT {@MTPDUMMY overlap of METTP is not allowed
  mettp_dy AND mettp_dg
}

#IFDEF THKMET
B3YTVL {@MTPDUMMY overlap of VIATPL is not allowed
  mettp_dy AND viatpl
}
#ENDIF

B3YTVT {@MTPDUMMY overlap of VIATP is not allowed
  mettp_dy AND viatp
}

W1YT {@Minimum MTPDUMMY width ... 2.0
  INT mettp_dy < 2.0 ABUT <90 SINGULAR REGION
}

W2YT {@Maximum MTPDUMMY edge length ... 20.0
  length mettp_dy > 20
}

S1YT {@Minimum MTPDUMMY spacing ... 2.0
  EXT mettp_dy < 2.0 ABUT <90 SPACE SINGULAR REGION
}

S10YT {@Minimum MTPDUMMY spacing to LOCKED ... 2.0
  EXT mettp_dy locked < 2.0 ABUT <90 SINGULAR REGION
}

#IFNDEF METAL5
S11YT {@Minimum MTPDUMMY spacing to LOCKED1 ... 2.0
  EXT mettp_dy locked1 < 2.0 ABUT <90 SINGULAR REGION
}
#ENDIF

#IFNDEF METAL4
S12YT {@Minimum MTPDUMMY spacing to LOCKED2 ... 2.0
  EXT mettp_dy locked2 < 2.0 ABUT <90 SINGULAR REGION
}
#ENDIF

#IFNDEF METAL3
S13YT {@Minimum MTPDUMMY spacing to LOCKED3 ... 2.0
  EXT mettp_dy locked3 < 2.0 ABUT <90 SINGULAR REGION
}
#ENDIF

S1YTMT {@Minimum MTPDUMMY spacing to METTP ... 2.0
  EXT mettp_dy mettp_dg < 2.0 ABUT <90 SINGULAR REGION
}

S1YTPA {@Minimum MTPDUMMY spacing to PAD ... 5.0
  EXT mettp_dy pad < 5.0 ABUT <90 SINGULAR REGION
}
#ENDIF


#IFDEF THKMET
B1YL {@Only rectangular MTPLDUMMY is allowed
  NOT RECTANGLE mettpl_dy
}

B2YL {@MTPLDUMMY overlap of METTPL is not allowed
  mettpl_dy AND mettpl_dg
}

B3YLVL {@MTPLDUMMY overlap of VIATPL is not allowed
  mettpl_dy AND viatpl
}

W1YL {@Minimum MTPLDUMMY width ... 5.0
  INT mettpl_dy < 5.0 ABUT <90 SINGULAR REGION
}

W2YL {@Maximum MTPLDUMMY edge length ... 20.0
  length mettpl_dy > 20
}

S1YL {@Minimum MTPLDUMMY spacing ... 5.0
  EXT mettpl_dy < 5.0 ABUT <90 SPACE SINGULAR REGION
}

S10YL {@Minimum MTPLDUMMY spacing to LOCKED ... 5.0
  EXT mettpl_dy locked < 5.0 ABUT <90 SINGULAR REGION
}

S11YL {@Minimum MTPLDUMMY spacing to LOCKED1 ... 5.0
  x1 = EXT mettpl_dy locked1 < 5.0 ABUT <90 SINGULAR REGION
  #IFDEF METAL5
  x1 AND emptlay
  #ELSE
  #IFDEF METAL4
  #IFDEF MIDMET
  x1 AND emptlay
  #ELSE
  copy x1
  #ENDIF
  #ELSE
  copy x1
  #ENDIF
  #ENDIF
}

S12YL {@Minimum MTPLDUMMY spacing to LOCKED2 ... 5.0
  x1 = EXT mettpl_dy locked2 < 5.0 ABUT <90 SINGULAR REGION
  #IFDEF METAL4
  x1 AND emptlay
  #ELSE
  #IFDEF METAL3
  #IFDEF MIDMET
  x1 AND emptlay
  #ELSE
  copy x1
  #ENDIF
  #ELSE
  copy x1
  #ENDIF
  #ENDIF
}

S13YL {@Minimum MTPLDUMMY spacing to LOCKED3 ... 5.0
  x1 = EXT mettpl_dy locked3 < 5.0 ABUT <90 SINGULAR REGION
  #IFDEF METAL3
  x1 AND emptlay
  #ELSE
  #IFDEF MIDMET
  x1 AND emptlay
  #ELSE
  copy x1
  #ENDIF
  #ENDIF
}

S1YLML {@Minimum MTPLDUMMY spacing to METTPL ... 5.0
  EXT mettpl_dy mettpl_dg < 5.0 ABUT <90 SINGULAR REGION
}
#ENDIF


//------------------------------------------------------------
//      Density Checks
//------------------------------------------------------------

#IFDEF DENSITY

bulk_dens_nla   = (SIZE bulk_1  BY -1.0) NOT (locked_al SIZE BY 1 OVERUNDER)
bulk_dens_nlac  = bulk_dens_nla OR emptlay

diffdensity     = DENSITY diff bulk_dens_nla < 0.15
                  [AREA(diff)/AREA(bulk_dens_nla)]
                  WINDOW 200 200 STEP 100 BACKUP
                  INSIDE OF LAYER bulk_dens_nlac
                  RDB DIFFdensity.rdb

R1DF {@Minimum local DIFF density ... 15.0%
  COPY diffdensity
}


poly1density    = DENSITY poly1 bulk_dens_nla < 0.14
                  [AREA(poly1)/AREA(bulk_dens_nla)]
                  INSIDE OF LAYER bulk_dens_nlac
                  RDB POLY1density.rdb

R1P1 {@Minimum ratio of POLY1 area to EXTENT area ... 14.0%
  COPY poly1density
}


met1density_1   = DENSITY met1sl bulk_dens_nla < 0.30
                  [AREA(met1sl)/AREA(bulk_dens_nla)]
                  INSIDE OF LAYER bulk_dens_nlac
                  RDB MET1density.rdb

R1M1 {@Minimum ratio of MET1 area to EXTENT area ... 30.0%
  COPY met1density_1
}

met1density_2   = DENSITY met1sl bulk_dens_nla > 0.65
                  [AREA(met1sl)/AREA(bulk_dens_nla)]
                  INSIDE OF LAYER bulk_dens_nlac
                  RDB MET1density.rdb

R2M1 {@Maximum ratio of MET1 area to EXTENT area ... 65.0%
  COPY met1density_2
}


met2density_1   = DENSITY met2sl bulk_dens_nla < 0.30
                  [AREA(met2sl)/AREA(bulk_dens_nla)]
                  INSIDE OF LAYER bulk_dens_nlac
                  RDB MET2density.rdb

R1M2 {@Minimum ratio of MET2 area to EXTENT area ... 30.0%
  COPY met2density_1
}

met2density_2   = DENSITY met2sl bulk_dens_nla > 0.65
                  [AREA(met2sl)/AREA(bulk_dens_nla)]
                  INSIDE OF LAYER bulk_dens_nlac
                  RDB MET2density.rdb

R2M2 {@Maximum ratio of MET2 area to EXTENT area ... 65.0%
  COPY met2density_2
}


#IFDEF METAL3
bulk_dens_nl3   = (SIZE bulk_1  BY -1.0) NOT locked_am3
bulk_dens_nl3c  = bulk_dens_nl3 OR emptlay

met3density_1   = DENSITY met3sl bulk_dens_nl3 < 0.30
                  [AREA(met3sl)/AREA(bulk_dens_nl3)]
                  INSIDE OF LAYER bulk_dens_nl3c
                  RDB MET3density.rdb

R1M3 {@Minimum ratio of MET3 area to EXTENT area ... 30.0%
  COPY met3density_1
}

met3density_2   = DENSITY met3sl bulk_dens_nl3 > 0.65
                  [AREA(met3sl)/AREA(bulk_dens_nl3)]
                  INSIDE OF LAYER bulk_dens_nl3c
                  RDB MET3density.rdb

R2M3 {@Maximum ratio of MET3 area to EXTENT area ... 65.0%
  COPY met3density_2
}
#ENDIF


#IFDEF METAL4
bulk_dens_nl4   = (SIZE bulk_1  BY -1.0) NOT locked_am4
bulk_dens_nl4c  = bulk_dens_nl4 OR emptlay

met4density_1   = DENSITY met4sl bulk_dens_nl4 < 0.30
                  [AREA(met4sl)/AREA(bulk_dens_nl4)]
                  INSIDE OF LAYER bulk_dens_nl4c
                  RDB MET4density.rdb

R1M4 {@Minimum ratio of MET4 area to EXTENT area ... 30.0%
  COPY met4density_1
}

met4density_2   = DENSITY met4sl bulk_dens_nl4 > 0.65
                  [AREA(met4sl)/AREA(bulk_dens_nl4)]
                  INSIDE OF LAYER bulk_dens_nl4c
                  RDB MET4density.rdb

R2M4 {@Maximum ratio of MET4 area to EXTENT area ... 65.0%
  COPY met4density_2
}
#ENDIF


#IFDEF METAL5
bulk_dens_nl5   = (SIZE bulk_1  BY -1.0) NOT locked_am5
bulk_dens_nl5c  = bulk_dens_nl5 OR emptlay

met5density_1   = DENSITY met5sl bulk_dens_nl5 < 0.30
                  [AREA(met5sl)/AREA(bulk_dens_nl5)]
                  INSIDE OF LAYER bulk_dens_nl5c
                  RDB MET5density.rdb

R1M5 {@Minimum ratio of MET5 area to EXTENT area ... 30.0%
  COPY met5density_1
}

met5density_2   = DENSITY met5sl bulk_dens_nl5 > 0.65
                  [AREA(met5sl)/AREA(bulk_dens_nl5)]
                  INSIDE OF LAYER bulk_dens_nl5c
                  RDB MET5density.rdb

R2M5 {@Maximum ratio of MET5 area to EXTENT area ... 65.0%
  COPY met5density_2
}
#ENDIF


#IFDEF MIDMET
#IFDEF METAL5
bulk_dens_nlt   = (SIZE bulk_1  BY -1.0) NOT locked_amt5
bulk_dens_nltc  = bulk_dens_nlt OR emptlay

mettpdensity_1  = DENSITY mettsl bulk_dens_nlt < 0.30
                  [AREA(mettsl)/AREA(bulk_dens_nlt)]
                  INSIDE OF LAYER bulk_dens_nltc
                  RDB METTPdensity.rdb

R1MT {@Minimum ratio of METTP area to EXTENT area ... 30.0%
  COPY mettpdensity_1
}

mettpdensity_2  = DENSITY mettsl bulk_dens_nlt > 0.65
                  [AREA(mettsl)/AREA(bulk_dens_nlt)]
                  INSIDE OF LAYER bulk_dens_nltc
                  RDB METTPdensity.rdb

R2MT {@Maximum ratio of METTP area to EXTENT area ... 65.0%
  COPY mettpdensity_2
}
#ELSE
#IFDEF METAL4
bulk_dens_nlt   = (SIZE bulk_1  BY -1.0) NOT locked_amt4
bulk_dens_nltc  = bulk_dens_nlt OR emptlay

mettpdensity_1  = DENSITY mettsl bulk_dens_nlt < 0.30
                  [AREA(mettsl)/AREA(bulk_dens_nlt)]
                  INSIDE OF LAYER bulk_dens_nltc
                  RDB METTPdensity.rdb

R1MT {@Minimum ratio of METTP area to EXTENT area ... 30.0%
  COPY mettpdensity_1
}

mettpdensity_2  = DENSITY mettsl bulk_dens_nlt > 0.65
                  [AREA(mettsl)/AREA(bulk_dens_nlt)]
                  INSIDE OF LAYER bulk_dens_nltc
                  RDB METTPdensity.rdb

R2MT {@Maximum ratio of METTP area to EXTENT area ... 65.0%
  COPY mettpdensity_2
}
#ELSE
#IFDEF METAL3
bulk_dens_nlt   = (SIZE bulk_1  BY -1.0) NOT locked_amt3
bulk_dens_nltc  = bulk_dens_nlt OR emptlay

mettpdensity_1  = DENSITY mettsl bulk_dens_nlt < 0.30
                  [AREA(mettsl)/AREA(bulk_dens_nlt)]
                  INSIDE OF LAYER bulk_dens_nltc
                  RDB METTPdensity.rdb

R1MT {@Minimum ratio of METTP area to EXTENT area ... 30.0%
  COPY mettpdensity_1
}

mettpdensity_2  = DENSITY mettsl bulk_dens_nlt > 0.65
                  [AREA(mettsl)/AREA(bulk_dens_nlt)]
                  INSIDE OF LAYER bulk_dens_nltc
                  RDB METTPdensity.rdb

R2MT {@Maximum ratio of METTP area to EXTENT area ... 65.0%
  COPY mettpdensity_2
}
#ELSE
bulk_dens_nlt   = (SIZE bulk_1  BY -1.0) NOT locked_amt2
bulk_dens_nltc  = bulk_dens_nlt OR emptlay

mettpdensity_1  = DENSITY mettsl bulk_dens_nlt < 0.30
                  [AREA(mettsl)/AREA(bulk_dens_nlt)]
                  INSIDE OF LAYER bulk_dens_nltc
                  RDB METTPdensity.rdb

R1MT {@Minimum ratio of METTP area to EXTENT area ... 30.0%
  COPY mettpdensity_1
}

mettpdensity_2  = DENSITY mettsl bulk_dens_nlt > 0.65
                  [AREA(mettsl)/AREA(bulk_dens_nlt)]
                  INSIDE OF LAYER bulk_dens_nltc
                  RDB METTPdensity.rdb

R2MT {@Maximum ratio of METTP area to EXTENT area ... 65.0%
  COPY mettpdensity_2
}
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFDEF THKMET
#IFDEF METAL5
bulk_dens_nll   = (SIZE bulk_1  BY -1.0) NOT locked_aml5
bulk_dens_nllc  = bulk_dens_nll OR emptlay

metlpdensity_1  = DENSITY mettpl bulk_dens_nll < 0.30
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R1ML {@Minimum ratio of METTPL area to EXTENT area ... 30.0%
  COPY metlpdensity_1
}

metlpdensity_2  = DENSITY mettpl bulk_dens_nll > 0.65
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R2ML {@Maximum ratio of METTPL area to EXTENT area ... 65.0%
  COPY metlpdensity_2
}
#ELSE
#IFDEF MIDMET
#IFDEF METAL4
bulk_dens_nll   = (SIZE bulk_1  BY -1.0) NOT locked_amlt4
bulk_dens_nllc  = bulk_dens_nll OR emptlay

metlpdensity_1  = DENSITY mettpl bulk_dens_nll < 0.30
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R1ML {@Minimum ratio of METTPL area to EXTENT area ... 30.0%
  COPY metlpdensity_1
}

metlpdensity_2  = DENSITY mettpl bulk_dens_nll > 0.65
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R2ML {@Maximum ratio of METTPL area to EXTENT area ... 65.0%
  COPY metlpdensity_2
}
#ELSE
#IFDEF METAL3
bulk_dens_nll   = (SIZE bulk_1  BY -1.0) NOT locked_amlt3
bulk_dens_nllc  = bulk_dens_nll OR emptlay

metlpdensity_1  = DENSITY mettpl bulk_dens_nll < 0.30
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R1ML {@Minimum ratio of METTPL area to EXTENT area ... 30.0%
  COPY metlpdensity_1
}

metlpdensity_2  = DENSITY mettpl bulk_dens_nll > 0.65
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R2ML {@Maximum ratio of METTPL area to EXTENT area ... 65.0%
  COPY metlpdensity_2
}
#ELSE
bulk_dens_nll   = (SIZE bulk_1  BY -1.0) NOT locked_amlt2
bulk_dens_nllc  = bulk_dens_nlt OR emptlay

metlpdensity_1  = DENSITY mettpl bulk_dens_nll < 0.30
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R1ML {@Minimum ratio of METTPL area to EXTENT area ... 30.0%
  COPY metlpdensity_1
}

metlpdensity_2  = DENSITY mettpl bulk_dens_nll > 0.65
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R2ML {@Maximum ratio of METTPL area to EXTENT area ... 65.0%
  COPY metlpdensity_2
}
#ENDIF
#ENDIF
#ELSE
#IFDEF METAL4
bulk_dens_nll   = (SIZE bulk_1  BY -1.0) NOT locked_aml4
bulk_dens_nllc  = bulk_dens_nll OR emptlay

metlpdensity_1  = DENSITY mettpl bulk_dens_nll < 0.30
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R1ML {@Minimum ratio of METTPL area to EXTENT area ... 30.0%
  COPY metlpdensity_1
}

metlpdensity_2  = DENSITY mettpl bulk_dens_nll > 0.65
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R2ML {@Maximum ratio of METTPL area to EXTENT area ... 65.0%
  COPY metlpdensity_2
}
#ELSE
#IFDEF METAL3
bulk_dens_nll   = (SIZE bulk_1  BY -1.0) NOT locked_aml3
bulk_dens_nllc  = bulk_dens_nll OR emptlay

metlpdensity_1  = DENSITY mettpl bulk_dens_nll < 0.30
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R1ML {@Minimum ratio of METTPL area to EXTENT area ... 30.0%
  COPY metlpdensity_1
}

metlpdensity_2  = DENSITY mettpl bulk_dens_nll > 0.65
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R2ML {@Maximum ratio of METTPL area to EXTENT area ... 65.0%
  COPY metlpdensity_2
}
#ELSE
bulk_dens_nll   = (SIZE bulk_1  BY -1.0) NOT locked_aml2
bulk_dens_nllc  = bulk_dens_nll OR emptlay

metlpdensity_1  = DENSITY mettpl bulk_dens_nll < 0.30
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R1ML {@Minimum ratio of METTPL area to EXTENT area ... 30.0%
  COPY metlpdensity_1
}

metlpdensity_2  = DENSITY mettpl bulk_dens_nll > 0.65
                  [AREA(mettpl)/AREA(bulk_dens_nll)]
                  INSIDE OF LAYER bulk_dens_nllc
                  RDB METTPLdensity.rdb

R2ML {@Maximum ratio of METTPL area to EXTENT area ... 65.0%
  COPY metlpdensity_2
}
#ENDIF
#ENDIF
#ENDIF

#ENDIF
#ENDIF

#ENDIF


//NLEAK: B1NL, B2NL, B3NL, B4NL: not checked !
//PLEAK: B1PL, B2PL, B3PL, B4PL: not checked !


//------------------------------------------------------------
//      Antenna Checks
//------------------------------------------------------------

VARIABLE T_POLY1    0.200   // POLY1  thickness
VARIABLE T_MET1     0.565   // MET1   thickness
VARIABLE T_MET2     0.565   // MET2   thickness
VARIABLE T_MET3     0.565   // MET3   thickness
VARIABLE T_MET4     0.565   // MET4   thickness
VARIABLE T_MET5     0.565   // MET5   thickness
VARIABLE T_METTP    0.985   // METTP  thickness
VARIABLE T_METTPL   3.110   // METTPL thickness


#IFDEF METAL3
via2_ac1  = via2      NOT ((capm23f OR capmh23f) OR ((capm3_b OR capmh3_b) OR (capm2_b OR capmh2_b)))
#ENDIF

#IFDEF METAL4
via3_ac1  = via3      NOT ((capm34f OR capmh34f) OR (((capm3_m OR capmh3_m) OR (capm3a_b OR capmh3a_b))
                           OR ((capm2_t OR capmh2_t) OR (capm2a_b OR capmh2a_b))))
#ENDIF

#IFDEF METAL5
via4_ac1  = via4      NOT ((capm45f OR capmh45f) OR (((capm3_t OR capmh3_t) OR (capm3a_m OR capmh3a_m))
                           OR ((capm2a_t OR capmh2a_t) OR (capm2b_b OR capmh2b_b))))
#ENDIF

#IFDEF MIDMET
viatp_ac1 = viatp     NOT  ((capm OR capmh) OR ((capm3a_t OR capmh3a_t) OR (capm2b_t OR capmh2b_t)))
#ENDIF

#IFDEF THKMET
#IFNDEF MIDMET
viatpl_ac = viatpl    NOT  capmh
#ELSE
viatpl_ac = copy  viatpl
#ENDIF
#ENDIF


#IFDEF MIDMET
#IFDEF METAL5
viatp_ac  = copy  viatp_ac1
via4_ac   = copy  via4_ac1
via3_ac   = copy  via3_ac1
via2_ac   = copy  via2_ac1
#ELSE
#IFDEF METAL4
viatp_ac  = viatp_ac1 NOT  ((capm3_t OR capmh3_t) OR (capm2a_t OR capmh2a_t))
via3_ac   = copy  via3_ac1
via2_ac   = copy  via2_ac1
#ELSE
#IFDEF METAL3
viatp_ac  = viatp_ac1 NOT  (capm2_t OR capmh2_t)
via2_ac   = copy  via2_ac1
#ELSE
viatp_ac  = copy  viatp_ac1
#ENDIF
#ENDIF
#ENDIF
#ENDIF

#IFNDEF MIDMET
#IFDEF METAL5
via4_ac   = copy  via4_ac1
via3_ac   = copy  via3_ac1
via2_ac   = copy  via2_ac1
#ELSE
#IFDEF METAL4
via3_ac   = copy  via3_ac1
via2_ac   = copy  via2_ac1
#ELSE
#IFDEF METAL3
via2_ac   = copy  via2_ac1
#ENDIF
#ENDIF
#ENDIF
#ENDIF


CONNECT poly1 gate

R2P1 {@Maximum ratio of POLY1 area to connected GATE area ... 200
  NET AREA RATIO poly1 gate > 200
      [PERIMETER(poly1) * T_POLY1 / AREA(gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER gate
}

#IFDEF VAR_ANT_RATIO
ADD_R2P1 {@Maximum ratio of POLY1 area to connected GATE area ... ^VAR_R2P1
  NET AREA RATIO poly1 gate > VAR_R2P1
      [PERIMETER(poly1) * T_POLY1 / AREA(gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER gate
}
#ENDIF

ant_cont = STAMP (cont AND poly1) BY poly1

R1CT {@Maximum ratio of CONT area to connected GATE area ... 10
  NET AREA RATIO ant_cont gate > 10
      [AREA(ant_cont) / AREA(gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1CT {@Maximum ratio of CONT area to connected GATE area ... ^VAR_R1CT
  NET AREA RATIO ant_cont gate > VAR_R1CT
      [AREA(ant_cont) / AREA(gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER gate
}
#ENDIF


m1_p1    = copy poly1
m1_ct    = copy cont
m1_m1    = copy met1sl

CONNECT m1_m1 m1_p1 diff1 BY m1_ct
m1gate = STAMP gate BY m1_p1

ant_met1 = NET AREA RATIO m1_m1 diff1 == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1M1P1 {@Maximum ratio of MET1 area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_met1 m1gate > 400
      [PERIMETER(ant_met1) * T_MET1 / AREA(m1gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m1gate
}

R2M1P1 {@Maximum ratio of MET1 area to connected GATE area ... 400
        @(met1 output)
  NET AREA RATIO ant_met1 OVER m1gate > 400
      [PERIMETER(ant_met1) * T_MET1 / AREA(m1gate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1M1P1 {@Maximum ratio of MET1 area to connected GATE area ... ^VAR_RxM1P1
        @(gate output)
  NET AREA RATIO ant_met1 m1gate > VAR_RxM1P1
      [PERIMETER(ant_met1) * T_MET1 / AREA(m1gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m1gate
}

ADD_R2M1P1 {@Maximum ratio of MET1 area to connected GATE area ... ^VAR_RxM1P1
        @(met1 output)
  NET AREA RATIO ant_met1 OVER m1gate > VAR_RxM1P1
      [PERIMETER(ant_met1) * T_MET1 / AREA(m1gate)]
}
#ENDIF
#ELSE

XFAB_BBOX_m1_p1_m1_prop = DFM PROPERTY m1_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAPARTIALMETALSIDEAREA_met1
        met1_ANTENNAPARTIALCUTAREA_via1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_met1_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_met1) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_met1,val)]
                [box_via1_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_via1) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_via1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

m1gate_bb = COPY m1gate
R1M1P1_a = DFM PROPERTY m1gate_bb m1gate ant_met1
                      XFAB_BBOX_m1_p1_m1_prop
                      NODAL MULTI
        [area_m1 = PERIMETER(ant_met1) * T_MET1]
        [area_gate = AREA(m1gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_gate_area)]
        [box_met1_area = PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_met1_area)]
        [box_dio = (PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_dio) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m1) *
                                        (PROPERTY_REF(area_m1) + PROPERTY_REF(box_met1_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1M1P1 = DFM PROPERTY m1gate_bb
                      R1M1P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M1P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1M1P1 {@Maximum ratio of MET1 area to connected GATE area ... 400
        @(gate output)
        copy R1M1P1
        DFM RDB R1M1P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1M1P1 = DFM PROPERTY m1gate_bb
                          R1M1P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M1P1_a,ratio_a)] > VAR_RxM1P1
        [ratio = 0 ] > VAR_RxM1P1

ADD_R1M1P1 {@Maximum ratio of MET1 area to connected GATE area ... ^VAR_RxM1P1
        @(gate output)
        copy ADD_R1M1P1
        DFM RDB ADD_R1M1P1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_met1_bb = COPY ant_met1
R2M1P1_a = DFM PROPERTY ant_met1_bb m1gate ant_met1
                      XFAB_BBOX_m1_p1_m1_prop
                      NODAL MULTI
        [area_m1 = PERIMETER(ant_met1) * T_MET1]
        [area_gate = AREA(m1gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_gate_area)]
        [box_met1_area = PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_met1_area)]
        [box_dio = (PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_dio) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m1) *
                                        (PROPERTY_REF(area_m1) + PROPERTY_REF(box_met1_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2M1P1 = DFM PROPERTY ant_met1_bb
                      R2M1P1_a OVERLAP MULTI
        [ratio = PROPERTY(R2M1P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2M1P1 {@Maximum ratio of MET1 area to connected GATE area ... 400
        @(metal output)
        copy R2M1P1
        DFM RDB R2M1P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2M1P1 = DFM PROPERTY ant_met1_bb
                          R2M1P1_a OVERLAP MULTI
            [ratio = PROPERTY(R2M1P1_a,ratio_a)] > VAR_RxM1P1
            [ratio = 0 ] > VAR_RxM1P1

ADD_R2M1P1 {@Maximum ratio of MET1 area to connected GATE area ... ^VAR_RxM1P1
        @(metal output)
        copy ADD_R2M1P1
        DFM RDB ADD_R2M1P1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

a_via1 = copy via1
CONNECT a_via1 m1_m1
ant_via1 = NET AREA RATIO a_via1 diff1 == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1V1 {@Maximum ratio of VIA1 area to connected GATE area ... 20
  NET AREA RATIO ant_via1 m1gate > 20
      [AREA(ant_via1) / AREA(m1gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m1gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1V1 {@Maximum ratio of VIA1 area to connected GATE area ... ^VAR_R1V1
  NET AREA RATIO ant_via1 m1gate > VAR_R1V1
      [AREA(ant_via1) / AREA(m1gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m1gate
}
#ENDIF
#ELSE

v1gate_bb = COPY m1gate
R1V1_a_a = DFM PROPERTY v1gate_bb m1gate ant_via1
                      XFAB_BBOX_m1_p1_m1_prop
                      NODAL MULTI
        [area_v1 = AREA(ant_via1)]
        [area_gate = AREA(m1gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_gate_area)]
        [box_via1_area = PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_via1_area)]
        [box_dio = (PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_dio) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_v1) *
                                        (PROPERTY_REF(area_v1) + PROPERTY_REF(box_via1_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1V1_a = DFM PROPERTY v1gate_bb
                      R1V1_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1V1_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_via1_bb = COPY ant_via1
R1V1_b_a = DFM PROPERTY ant_via1_bb m1gate ant_via1
                      XFAB_BBOX_m1_p1_m1_prop
                      NODAL MULTI
        [area_v1 = AREA(ant_via1)]
        [area_gate = AREA(m1gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_gate_area)]
        [box_via1_area = PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_via1_area)]
        [box_dio = (PROPERTY(XFAB_BBOX_m1_p1_m1_prop,box_dio) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_v1) *
                                        (PROPERTY_REF(area_v1) + PROPERTY_REF(box_via1_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1V1_b = DFM PROPERTY ant_via1_bb
                      R1V1_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1V1_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1V1 {@Maximum ratio of VIA1 area to connected GATE area ... 20
        copy R1V1_a
        copy R1V1_b
        DFM RDB R1V1_a "antenna.rdb" ALL CELLS
        DFM RDB R1V1_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1V1_a = DFM PROPERTY v1gate_bb
                      R1V1_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1V1_a_a,ratio_a)] > VAR_R1V1
        [ratio = 0 ] > VAR_R1V1

ADD_R1V1_b = DFM PROPERTY ant_via1_bb
                      R1V1_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1V1_b_a,ratio_a)] > VAR_R1V1
        [ratio = 0 ] > VAR_R1V1

ADD_R1V1 {@Maximum ratio of VIA1 area to connected GATE area ... ^VAR_R1V1
        copy ADD_R1V1_a
        copy ADD_R1V1_b
        DFM RDB ADD_R1V1_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1V1_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


m2_df    = copy diff1
m2_p1    = copy m1_p1
m2_ct    = copy m1_ct
m2_m1    = copy m1_m1
m2_v1    = via1 OR emptlay
m2_m2    = met2sl OR emptlay
m2_gate  = gate OR emptlay

CONNECT m2_m2 m2_m1 BY m2_v1
CONNECT m2_m1 m2_p1 m2_df BY m2_ct
m2gate = STAMP m2_gate BY m2_p1

ant_met2 = NET AREA RATIO m2_m2 m2_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1M2P1 {@Maximum ratio of MET2 area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_met2 m2gate > 400
      [PERIMETER(ant_met2) * T_MET2 / AREA(m2gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m2gate
}

R2M2P1 {@Maximum ratio of MET2 area to connected GATE area ... 400
        @(met2 output)
  NET AREA RATIO ant_met2 OVER m2gate > 400
      [PERIMETER(ant_met2) * T_MET2 / AREA(m2gate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1M2P1 {@Maximum ratio of MET2 area to connected GATE area ... ^VAR_RxM2P1
        @(gate output)
  NET AREA RATIO ant_met2 m2gate > VAR_RxM2P1
      [PERIMETER(ant_met2) * T_MET2 / AREA(m2gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m2gate
}

ADD_R2M2P1 {@Maximum ratio of MET2 area to connected GATE area ... ^VAR_RxM2P1
        @(met2 output)
  NET AREA RATIO ant_met2 OVER m2gate > VAR_RxM2P1
      [PERIMETER(ant_met2) * T_MET2 / AREA(m2gate)]
}
#ENDIF
#ELSE

XFAB_BBOX_m2_p1_m1_prop = DFM PROPERTY m2_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m2_p1_m2_prop = DFM PROPERTY m2_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAPARTIALMETALSIDEAREA_met2
        met1_ANTENNAPARTIALCUTAREA_via2
        met1_ANTENNAPARTIALCUTAREA_viatp
        met1_ANTENNAPARTIALCUTAREA_viatpl
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_met2_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_met2) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_met2,val)]
                [box_via2_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_via2) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_via2,val)]
                [box_viat_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m2_p2_m1_prop = DFM PROPERTY m2_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m2_p2_m2_prop = DFM PROPERTY m2_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAPARTIALMETALSIDEAREA_met2
        met2_ANTENNAPARTIALCUTAREA_via2
        met2_ANTENNAPARTIALCUTAREA_viatp
        met2_ANTENNAPARTIALCUTAREA_viatpl
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_met2_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_met2) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_met2,val)]
                [box_via2_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_via2) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_via2,val)]
                [box_viat_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]


m2gate_bb = COPY m2gate
R1M2P1_a = DFM PROPERTY m2gate_bb m2gate ant_met2
                      XFAB_BBOX_m2_p1_m1_prop XFAB_BBOX_m2_p1_m2_prop XFAB_BBOX_m2_p2_m1_prop XFAB_BBOX_m2_p2_m2_prop
                      NODAL MULTI
        [area_m2 = PERIMETER(ant_met2) * T_MET2]
        [area_gate = AREA(m2gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_gate_area)]
        [box_met2_area = PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_met2_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_met2_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m2) *
                                        (PROPERTY_REF(area_m2) + PROPERTY_REF(box_met2_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1M2P1 = DFM PROPERTY m2gate_bb
                      R1M2P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M2P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1M2P1 {@Maximum ratio of MET2 area to connected GATE area ... 400
        @(gate output)
        copy R1M2P1
        DFM RDB R1M2P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1M2P1 = DFM PROPERTY m2gate_bb
                          R1M2P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M2P1_a,ratio_a)] > VAR_RxM2P1
        [ratio = 0 ] > VAR_RxM2P1

ADD_R1M2P1 {@Maximum ratio of MET2 area to connected GATE area ... ^VAR_RxM2P1
        @(gate output)
        copy ADD_R1M2P1
        DFM RDB ADD_R1M2P1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_met2_bb = COPY ant_met2
R2M2P1_a = DFM PROPERTY ant_met2_bb m2gate ant_met2
                      XFAB_BBOX_m2_p1_m1_prop XFAB_BBOX_m2_p1_m2_prop XFAB_BBOX_m2_p2_m1_prop XFAB_BBOX_m2_p2_m2_prop
                      NODAL MULTI
        [area_m2 = PERIMETER(ant_met2) * T_MET2]
        [area_gate = AREA(m2gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_gate_area)]
        [box_met2_area = PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_met2_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_met2_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m2) *
                                        (PROPERTY_REF(area_m2) + PROPERTY_REF(box_met2_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2M2P1 = DFM PROPERTY ant_met2_bb
                      R2M2P1_a OVERLAP MULTI
        [ratio = PROPERTY(R2M2P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2M2P1 {@Maximum ratio of MET2 area to connected GATE area ... 400
        @(metal output)
        copy R2M2P1
        DFM RDB R2M2P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2M2P1 = DFM PROPERTY ant_met2_bb
                          R2M2P1_a OVERLAP MULTI
            [ratio = PROPERTY(R2M2P1_a,ratio_a)] > VAR_RxM2P1
            [ratio = 0 ] > VAR_RxM2P1

ADD_R2M2P1 {@Maximum ratio of MET2 area to connected GATE area ... ^VAR_RxM2P1
        @(metal output)
        copy ADD_R2M2P1
        DFM RDB ADD_R2M2P1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


#IFDEF METAL3

a_via2 = copy via2_ac
CONNECT a_via2 m2_m2
ant_via2 = NET AREA RATIO a_via2 m2_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1V2 {@Maximum ratio of VIA2 area to connected GATE area ... 20
  NET AREA RATIO ant_via2 m2gate > 20
      [AREA(ant_via2) / AREA(m2gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m2gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1V2 {@Maximum ratio of VIA2 area to connected GATE area ... ^VAR_R1V2
  NET AREA RATIO ant_via2 m2gate > VAR_R1V2
      [AREA(ant_via2) / AREA(m2gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m2gate
}
#ENDIF
#ELSE

v2gate_bb = COPY m2gate
R1V2_a_a = DFM PROPERTY v2gate_bb m2gate ant_via2
                      XFAB_BBOX_m2_p1_m1_prop XFAB_BBOX_m2_p1_m2_prop XFAB_BBOX_m2_p2_m1_prop XFAB_BBOX_m2_p2_m2_prop
                      NODAL MULTI
        [area_v2 = AREA(ant_via2)]
        [area_gate = AREA(m2gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_gate_area)]
        [box_via2_area = PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_via2_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_via2_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_v2) *
                                        (PROPERTY_REF(area_v2) + PROPERTY_REF(box_via2_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1V2_a = DFM PROPERTY v2gate_bb
                      R1V2_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1V2_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_via2_bb = COPY ant_via2
R1V2_b_a = DFM PROPERTY ant_via2_bb m2gate ant_via2
                      XFAB_BBOX_m2_p1_m1_prop XFAB_BBOX_m2_p1_m2_prop XFAB_BBOX_m2_p2_m1_prop XFAB_BBOX_m2_p2_m2_prop
                      NODAL MULTI
        [area_v2 = AREA(ant_via2)]
        [area_gate = AREA(m2gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_gate_area)]
        [box_via2_area = PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_via2_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_via2_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_v2) *
                                        (PROPERTY_REF(area_v2) + PROPERTY_REF(box_via2_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1V2_b = DFM PROPERTY ant_via2_bb
                      R1V2_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1V2_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1V2 {@Maximum ratio of VIA2 area to connected GATE area ... 20
        copy R1V2_a
        copy R1V2_b
        DFM RDB R1V2_a "antenna.rdb" ALL CELLS
        DFM RDB R1V2_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1V2_a = DFM PROPERTY v2gate_bb
                      R1V2_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1V2_a_a,ratio_a)] > VAR_R1V2
        [ratio = 0 ] > VAR_R1V2

ADD_R1V2_b = DFM PROPERTY ant_via2_bb
                      R1V2_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1V2_b_a,ratio_a)] > VAR_R1V2
        [ratio = 0 ] > VAR_R1V2

ADD_R1V2 {@Maximum ratio of VIA2 area to connected GATE area ... ^VAR_R1V2
        copy ADD_R1V2_a
        copy ADD_R1V2_b
        DFM RDB ADD_R1V2_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1V2_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


m3_df    = copy m2_df
m3_p1    = copy m2_p1
m3_ct    = copy m2_ct
m3_m1    = copy m2_m1
m3_v1    = copy m2_v1
m3_m2    = copy m2_m2
m3_v2    = via2_ac OR emptlay
m3_m3    = met3sl OR emptlay
m3_gate  = copy m2_gate

CONNECT m3_m3 m3_m2 BY m3_v2
CONNECT m3_m2 m3_m1 BY m3_v1
CONNECT m3_m1 m3_p1 m3_df BY m3_ct
m3gate = STAMP m3_gate BY m3_p1

ant_met3 = NET AREA RATIO m3_m3 m3_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1M3P1 {@Maximum ratio of MET3 area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_met3 m3gate > 400
      [PERIMETER(ant_met3) * T_MET3 / AREA(m3gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m3gate
}

R2M3P1 {@Maximum ratio of MET3 area to connected GATE area ... 400
        @(met3 output)
  NET AREA RATIO ant_met3 OVER m3gate > 400
      [PERIMETER(ant_met3) * T_MET3 / AREA(m3gate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1M3P1 {@Maximum ratio of MET3 area to connected GATE area ... ^VAR_RxM3P1
        @(gate output)
  NET AREA RATIO ant_met3 m3gate > VAR_RxM3P1
      [PERIMETER(ant_met3) * T_MET3 / AREA(m3gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m3gate
}

ADD_R2M3P1 {@Maximum ratio of MET3 area to connected GATE area ... ^VAR_RxM3P1
        @(met3 output)
  NET AREA RATIO ant_met3 OVER m3gate > VAR_RxM3P1
      [PERIMETER(ant_met3) * T_MET3 / AREA(m3gate)]
}
#ENDIF
#ELSE

XFAB_BBOX_m3_p1_m1_prop = DFM PROPERTY m3_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m3_p1_m2_prop = DFM PROPERTY m3_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m3_p1_m3_prop = DFM PROPERTY m3_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAPARTIALMETALSIDEAREA_met3
        met1_ANTENNAPARTIALCUTAREA_via3
        met1_ANTENNAPARTIALCUTAREA_viatp
        met1_ANTENNAPARTIALCUTAREA_viatpl
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_met3_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_met3) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_met3,val)]
                [box_via3_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_via3) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_via3,val)]
                [box_viat_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m3_p2_m1_prop = DFM PROPERTY m3_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m3_p2_m2_prop = DFM PROPERTY m3_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m3_p2_m3_prop = DFM PROPERTY m3_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAPARTIALMETALSIDEAREA_met3
        met2_ANTENNAPARTIALCUTAREA_via3
        met2_ANTENNAPARTIALCUTAREA_viatp
        met2_ANTENNAPARTIALCUTAREA_viatpl
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_met3_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_met3) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_met3,val)]
                [box_via3_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_via3) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_via3,val)]
                [box_viat_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m3_p3_m1_prop = DFM PROPERTY m3_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m3_p3_m2_prop = DFM PROPERTY m3_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m3_p3_m3_prop = DFM PROPERTY m3_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAPARTIALMETALSIDEAREA_met3
        met3_ANTENNAPARTIALCUTAREA_via3
        met3_ANTENNAPARTIALCUTAREA_viatp
        met3_ANTENNAPARTIALCUTAREA_viatpl
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_met3_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_met3) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_met3,val)]
                [box_via3_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_via3) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_via3,val)]
                [box_viat_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

m3gate_bb = COPY m3gate
R1M3P1_a = DFM PROPERTY m3gate_bb m3gate ant_met3
                      XFAB_BBOX_m3_p1_m1_prop XFAB_BBOX_m3_p1_m2_prop XFAB_BBOX_m3_p1_m3_prop
                      XFAB_BBOX_m3_p2_m1_prop XFAB_BBOX_m3_p2_m2_prop XFAB_BBOX_m3_p2_m3_prop
                      XFAB_BBOX_m3_p3_m1_prop XFAB_BBOX_m3_p3_m2_prop XFAB_BBOX_m3_p3_m3_prop
                      NODAL MULTI
        [area_m3 = PERIMETER(ant_met3) * T_MET3]
        [area_gate = AREA(m3gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_gate_area)]
        [box_met3_area = PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_met3_area) + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_met3_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_met3_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m3) *
                                        (PROPERTY_REF(area_m3) + PROPERTY_REF(box_met3_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1M3P1 = DFM PROPERTY m3gate_bb
                      R1M3P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M3P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1M3P1 {@Maximum ratio of MET3 area to connected GATE area ... 400
        @(gate output)
        copy R1M3P1
        DFM RDB R1M3P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1M3P1 = DFM PROPERTY m3gate_bb
                          R1M3P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M3P1_a,ratio_a)] > VAR_RxM3P1
        [ratio = 0 ] > VAR_RxM3P1

ADD_R1M3P1 {@Maximum ratio of MET3 area to connected GATE area ... ^VAR_RxM3P1
        @(gate output)
        copy ADD_R1M3P1
        DFM RDB ADD_R1M3P1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_met3_bb = COPY ant_met3
R2M3P1_a = DFM PROPERTY ant_met3_bb m3gate ant_met3
                      XFAB_BBOX_m3_p1_m1_prop XFAB_BBOX_m3_p1_m2_prop XFAB_BBOX_m3_p1_m3_prop
                      XFAB_BBOX_m3_p2_m1_prop XFAB_BBOX_m3_p2_m2_prop XFAB_BBOX_m3_p2_m3_prop
                      XFAB_BBOX_m3_p3_m1_prop XFAB_BBOX_m3_p3_m2_prop XFAB_BBOX_m3_p3_m3_prop
                      NODAL MULTI
        [area_m3 = PERIMETER(ant_met3) * T_MET3]
        [area_gate = AREA(m3gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_gate_area)]
        [box_met3_area = PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_met3_area) + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_met3_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_met3_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m3) *
                                        (PROPERTY_REF(area_m3) + PROPERTY_REF(box_met3_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2M3P1 = DFM PROPERTY ant_met3_bb
                      R2M3P1_a OVERLAP MULTI
        [ratio = PROPERTY(R2M3P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2M3P1 {@Maximum ratio of MET3 area to connected GATE area ... 400
        @(metal output)
        copy R2M3P1
        DFM RDB R2M3P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2M3P1 = DFM PROPERTY ant_met3_bb
                          R2M3P1_a OVERLAP MULTI
            [ratio = PROPERTY(R2M3P1_a,ratio_a)] > VAR_RxM3P1
            [ratio = 0 ] > VAR_RxM3P1

ADD_R2M3P1 {@Maximum ratio of MET3 area to connected GATE area ... ^VAR_RxM3P1
        @(metal output)
        copy ADD_R2M3P1
        DFM RDB ADD_R2M3P1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF
#ENDIF


#IFDEF METAL4

a_via3 = copy via3_ac
CONNECT a_via3 m3_m3
ant_via3 = NET AREA RATIO a_via3 m3_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1V3 {@Maximum ratio of VIA3 area to connected GATE area ... 20
  NET AREA RATIO ant_via3 m3gate > 20
      [AREA(ant_via3) / AREA(m3gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m3gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1V3 {@Maximum ratio of VIA3 area to connected GATE area ... ^VAR_R1V3
  NET AREA RATIO ant_via3 m3gate > VAR_R1V3
      [AREA(ant_via3) / AREA(m3gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m3gate
}
#ENDIF
#ELSE

v3gate_bb = COPY m3gate
R1V3_a_a = DFM PROPERTY v3gate_bb m3gate ant_via3
                      XFAB_BBOX_m3_p1_m1_prop XFAB_BBOX_m3_p1_m2_prop XFAB_BBOX_m3_p1_m3_prop
                      XFAB_BBOX_m3_p2_m1_prop XFAB_BBOX_m3_p2_m2_prop XFAB_BBOX_m3_p2_m3_prop
                      XFAB_BBOX_m3_p3_m1_prop XFAB_BBOX_m3_p3_m2_prop XFAB_BBOX_m3_p3_m3_prop
                      NODAL MULTI
        [area_v3 = AREA(ant_via3)]
        [area_gate = AREA(m3gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_gate_area)]
        [box_via3_area = PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_via3_area) + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_via3_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_via3_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_v3) *
                                        (PROPERTY_REF(area_v3) + PROPERTY_REF(box_via3_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1V3_a = DFM PROPERTY v3gate_bb
                      R1V3_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1V3_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_via3_bb = COPY ant_via3
R1V3_b_a = DFM PROPERTY ant_via3_bb m3gate ant_via3
                      XFAB_BBOX_m3_p1_m1_prop XFAB_BBOX_m3_p1_m2_prop XFAB_BBOX_m3_p1_m3_prop
                      XFAB_BBOX_m3_p2_m1_prop XFAB_BBOX_m3_p2_m2_prop XFAB_BBOX_m3_p2_m3_prop
                      XFAB_BBOX_m3_p3_m1_prop XFAB_BBOX_m3_p3_m2_prop XFAB_BBOX_m3_p3_m3_prop
                      NODAL MULTI
        [area_v3 = AREA(ant_via3)]
        [area_gate = AREA(m3gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_gate_area)]
        [box_via3_area = PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_via3_area) + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_via3_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_via3_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_v3) *
                                        (PROPERTY_REF(area_v3) + PROPERTY_REF(box_via3_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1V3_b = DFM PROPERTY ant_via3_bb
                      R1V3_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1V3_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1V3 {@Maximum ratio of VIA3 area to connected GATE area ... 20
        copy R1V3_a
        copy R1V3_b
        DFM RDB R1V3_a "antenna.rdb" ALL CELLS
        DFM RDB R1V3_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1V3_a = DFM PROPERTY v3gate_bb
                      R1V3_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1V3_a_a,ratio_a)] > VAR_R1V3
        [ratio = 0 ] > VAR_R1V3

ADD_R1V3_b = DFM PROPERTY ant_via3_bb
                      R1V3_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1V3_b_a,ratio_a)] > VAR_R1V3
        [ratio = 0 ] > VAR_R1V3

ADD_R1V3 {@Maximum ratio of VIA3 area to connected GATE area ... ^VAR_R1V3
        copy ADD_R1V3_a
        copy ADD_R1V3_b
        DFM RDB ADD_R1V3_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1V3_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


m4_df    = copy m3_df
m4_p1    = copy m3_p1
m4_ct    = copy m3_ct
m4_m1    = copy m3_m1
m4_v1    = copy m3_v1
m4_m2    = copy m3_m2
m4_v2    = copy m3_v2
m4_m3    = copy m3_m3
m4_v3    = via3_ac OR emptlay
m4_m4    = met4sl OR emptlay
m4_gate  = copy m3_gate

CONNECT m4_m4 m4_m3 BY m4_v3
CONNECT m4_m3 m4_m2 BY m4_v2
CONNECT m4_m2 m4_m1 BY m4_v1
CONNECT m4_m1 m4_p1 m4_df BY m4_ct
m4gate = STAMP m4_gate BY m4_p1

ant_met4 = NET AREA RATIO m4_m4 m4_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1M4P1 {@Maximum ratio of MET4 area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_met4 m4gate > 400
      [PERIMETER(ant_met4) * T_MET4 / AREA(m4gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m4gate
}

R2M4P1 {@Maximum ratio of MET4 area to connected GATE area ... 400
        @(met4 output)
  NET AREA RATIO ant_met4 OVER m4gate > 400
      [PERIMETER(ant_met4) * T_MET4 / AREA(m4gate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1M4P1 {@Maximum ratio of MET4 area to connected GATE area ... ^VAR_RxM4P1
        @(gate output)
  NET AREA RATIO ant_met4 m4gate > VAR_RxM4P1
      [PERIMETER(ant_met4) * T_MET4 / AREA(m4gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m4gate
}

ADD_R2M4P1 {@Maximum ratio of MET4 area to connected GATE area ... ^VAR_RxM4P1
        @(met4 output)
  NET AREA RATIO ant_met4 OVER m4gate > VAR_RxM4P1
      [PERIMETER(ant_met4) * T_MET4 / AREA(m4gate)]
}
#ENDIF
#ELSE

XFAB_BBOX_m4_p1_m1_prop = DFM PROPERTY m4_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m4_p1_m2_prop = DFM PROPERTY m4_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m4_p1_m3_prop = DFM PROPERTY m4_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m4_p1_m4_prop = DFM PROPERTY m4_m1
        met1_ANTENNADIFFAREA_met4
        met1_ANTENNAPARTIALMETALSIDEAREA_met4
        met1_ANTENNAPARTIALCUTAREA_via4
        met1_ANTENNAPARTIALCUTAREA_viatp
        met1_ANTENNAPARTIALCUTAREA_viatpl
        met1_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met4) * PROPERTY(met1_ANTENNAGATEAREA_met4,val)]
                [box_met4_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_met4) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_met4,val)]
                [box_via4_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_via4) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_via4,val)]
                [box_viat_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met4) * PROPERTY(met1_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_m4_p2_m1_prop = DFM PROPERTY m4_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m4_p2_m2_prop = DFM PROPERTY m4_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m4_p2_m3_prop = DFM PROPERTY m4_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m4_p2_m4_prop = DFM PROPERTY m4_m2
        met2_ANTENNADIFFAREA_met4
        met2_ANTENNAPARTIALMETALSIDEAREA_met4
        met2_ANTENNAPARTIALCUTAREA_via4
        met2_ANTENNAPARTIALCUTAREA_viatp
        met2_ANTENNAPARTIALCUTAREA_viatpl
        met2_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met4) * PROPERTY(met2_ANTENNAGATEAREA_met4,val)]
                [box_met4_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_met4) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_met4,val)]
                [box_via4_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_via4) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_via4,val)]
                [box_viat_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met4) * PROPERTY(met2_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_m4_p3_m1_prop = DFM PROPERTY m4_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m4_p3_m2_prop = DFM PROPERTY m4_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m4_p3_m3_prop = DFM PROPERTY m4_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m4_p3_m4_prop = DFM PROPERTY m4_m3
        met3_ANTENNADIFFAREA_met4
        met3_ANTENNAPARTIALMETALSIDEAREA_met4
        met3_ANTENNAPARTIALCUTAREA_via4
        met3_ANTENNAPARTIALCUTAREA_viatp
        met3_ANTENNAPARTIALCUTAREA_viatpl
        met3_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met4) * PROPERTY(met3_ANTENNAGATEAREA_met4,val)]
                [box_met4_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_met4) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_met4,val)]
                [box_via4_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_via4) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_via4,val)]
                [box_viat_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met4) * PROPERTY(met3_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_m4_p4_m1_prop = DFM PROPERTY m4_m4
        met4_ANTENNADIFFAREA_met1
        met4_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met1) * PROPERTY(met4_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met1) * PROPERTY(met4_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m4_p4_m2_prop = DFM PROPERTY m4_m4
        met4_ANTENNADIFFAREA_met2
        met4_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met2) * PROPERTY(met4_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met2) * PROPERTY(met4_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m4_p4_m3_prop = DFM PROPERTY m4_m4
        met4_ANTENNADIFFAREA_met3
        met4_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met3) * PROPERTY(met4_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met3) * PROPERTY(met4_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m4_p4_m4_prop = DFM PROPERTY m4_m4
        met4_ANTENNADIFFAREA_met4
        met4_ANTENNAPARTIALMETALSIDEAREA_met4
        met4_ANTENNAPARTIALCUTAREA_via4
        met4_ANTENNAPARTIALCUTAREA_viatp
        met4_ANTENNAPARTIALCUTAREA_viatpl
        met4_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met4) * PROPERTY(met4_ANTENNAGATEAREA_met4,val)]
                [box_met4_area = !!AREA(met4_ANTENNAPARTIALMETALSIDEAREA_met4) * PROPERTY(met4_ANTENNAPARTIALMETALSIDEAREA_met4,val)]
                [box_via4_area = !!AREA(met4_ANTENNAPARTIALCUTAREA_via4) * PROPERTY(met4_ANTENNAPARTIALCUTAREA_via4,val)]
                [box_viat_area = !!AREA(met4_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met4_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met4_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met4_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met4) * PROPERTY(met4_ANTENNADIFFAREA_met4,val)]

m4gate_bb = COPY m4gate
R1M4P1_a = DFM PROPERTY m4gate_bb m4gate ant_met4
                      XFAB_BBOX_m4_p1_m1_prop XFAB_BBOX_m4_p1_m2_prop XFAB_BBOX_m4_p1_m3_prop XFAB_BBOX_m4_p1_m4_prop
                      XFAB_BBOX_m4_p2_m1_prop XFAB_BBOX_m4_p2_m2_prop XFAB_BBOX_m4_p2_m3_prop XFAB_BBOX_m4_p2_m4_prop
                      XFAB_BBOX_m4_p3_m1_prop XFAB_BBOX_m4_p3_m2_prop XFAB_BBOX_m4_p3_m3_prop XFAB_BBOX_m4_p3_m4_prop
                      XFAB_BBOX_m4_p4_m1_prop XFAB_BBOX_m4_p4_m2_prop XFAB_BBOX_m4_p4_m3_prop XFAB_BBOX_m4_p4_m4_prop
                      NODAL MULTI
        [area_m4 = PERIMETER(ant_met4) * T_MET4]
        [area_gate = AREA(m4gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_gate_area)]
        [box_met4_area = PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_met4_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_met4_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_met4_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_met4_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m4) *
                                        (PROPERTY_REF(area_m4) + PROPERTY_REF(box_met4_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1M4P1 = DFM PROPERTY m4gate_bb
                      R1M4P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M4P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1M4P1 {@Maximum ratio of MET4 area to connected GATE area ... 400
        @(gate output)
        copy R1M4P1
        DFM RDB R1M4P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1M4P1 = DFM PROPERTY m4gate_bb
                          R1M4P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M4P1_a,ratio_a)] > VAR_RxM4P1
        [ratio = 0 ] > VAR_RxM4P1

ADD_R1M4P1 {@Maximum ratio of MET4 area to connected GATE area ... ^VAR_RxM4P1
        @(gate output)
        copy ADD_R1M4P1
        DFM RDB ADD_R1M4P1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_met4_bb = COPY ant_met4
R2M4P1_a = DFM PROPERTY ant_met4_bb m4gate ant_met4
                      XFAB_BBOX_m4_p1_m1_prop XFAB_BBOX_m4_p1_m2_prop XFAB_BBOX_m4_p1_m3_prop XFAB_BBOX_m4_p1_m4_prop
                      XFAB_BBOX_m4_p2_m1_prop XFAB_BBOX_m4_p2_m2_prop XFAB_BBOX_m4_p2_m3_prop XFAB_BBOX_m4_p2_m4_prop
                      XFAB_BBOX_m4_p3_m1_prop XFAB_BBOX_m4_p3_m2_prop XFAB_BBOX_m4_p3_m3_prop XFAB_BBOX_m4_p3_m4_prop
                      XFAB_BBOX_m4_p4_m1_prop XFAB_BBOX_m4_p4_m2_prop XFAB_BBOX_m4_p4_m3_prop XFAB_BBOX_m4_p4_m4_prop
                      NODAL MULTI
        [area_m4 = PERIMETER(ant_met4) * T_MET4]
        [area_gate = AREA(m4gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_gate_area)]
        [box_met4_area = PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_met4_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_met4_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_met4_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_met4_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m4) *
                                        (PROPERTY_REF(area_m4) + PROPERTY_REF(box_met4_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2M4P1 = DFM PROPERTY ant_met4_bb
                      R2M4P1_a OVERLAP MULTI
        [ratio = PROPERTY(R2M4P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2M4P1 {@Maximum ratio of MET4 area to connected GATE area ... 400
        @(metal output)
        copy R2M4P1
        DFM RDB R2M4P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2M4P1 = DFM PROPERTY ant_met4_bb
                          R2M4P1_a OVERLAP MULTI
            [ratio = PROPERTY(R2M4P1_a,ratio_a)] > VAR_RxM4P1
            [ratio = 0 ] > VAR_RxM4P1

ADD_R2M4P1 {@Maximum ratio of MET4 area to connected GATE area ... ^VAR_RxM4P1
        @(metal output)
        copy ADD_R2M4P1
        DFM RDB ADD_R2M4P1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF
#ENDIF


#IFDEF METAL5

a_via4 = copy via4_ac
CONNECT a_via4 m4_m4
ant_via4 = NET AREA RATIO a_via4 m4_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1V4 {@Maximum ratio of VIA4 area to connected GATE area ... 20
  NET AREA RATIO ant_via4 m4gate > 20
      [AREA(ant_via4) / AREA(m4gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m4gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1V4 {@Maximum ratio of VIA4 area to connected GATE area ... ^VAR_R1V4
  NET AREA RATIO ant_via4 m4gate > VAR_R1V4
      [AREA(ant_via4) / AREA(m4gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m4gate
}
#ENDIF
#ELSE

v4gate_bb = COPY m4gate
R1V4_a_a = DFM PROPERTY v4gate_bb m4gate ant_via4
                      XFAB_BBOX_m4_p1_m1_prop XFAB_BBOX_m4_p1_m2_prop XFAB_BBOX_m4_p1_m3_prop XFAB_BBOX_m4_p1_m4_prop
                      XFAB_BBOX_m4_p2_m1_prop XFAB_BBOX_m4_p2_m2_prop XFAB_BBOX_m4_p2_m3_prop XFAB_BBOX_m4_p2_m4_prop
                      XFAB_BBOX_m4_p3_m1_prop XFAB_BBOX_m4_p3_m2_prop XFAB_BBOX_m4_p3_m3_prop XFAB_BBOX_m4_p3_m4_prop
                      XFAB_BBOX_m4_p4_m1_prop XFAB_BBOX_m4_p4_m2_prop XFAB_BBOX_m4_p4_m3_prop XFAB_BBOX_m4_p4_m4_prop
                      NODAL MULTI
        [area_v4 = AREA(ant_via4)]
        [area_gate = AREA(m4gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_gate_area)]
        [box_via4_area = PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_via4_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_via4_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_via4_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_via4_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_v4) *
                                        (PROPERTY_REF(area_v4) + PROPERTY_REF(box_via4_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1V4_a = DFM PROPERTY v4gate_bb
                      R1V4_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1V4_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_via4_bb = COPY ant_via4
R1V4_b_a = DFM PROPERTY ant_via4_bb m4gate ant_via4
                      XFAB_BBOX_m4_p1_m1_prop XFAB_BBOX_m4_p1_m2_prop XFAB_BBOX_m4_p1_m3_prop XFAB_BBOX_m4_p1_m4_prop
                      XFAB_BBOX_m4_p2_m1_prop XFAB_BBOX_m4_p2_m2_prop XFAB_BBOX_m4_p2_m3_prop XFAB_BBOX_m4_p2_m4_prop
                      XFAB_BBOX_m4_p3_m1_prop XFAB_BBOX_m4_p3_m2_prop XFAB_BBOX_m4_p3_m3_prop XFAB_BBOX_m4_p3_m4_prop
                      XFAB_BBOX_m4_p4_m1_prop XFAB_BBOX_m4_p4_m2_prop XFAB_BBOX_m4_p4_m3_prop XFAB_BBOX_m4_p4_m4_prop
                      NODAL MULTI
        [area_v4 = AREA(ant_via4)]
        [area_gate = AREA(m4gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_gate_area)]
        [box_via4_area = PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_via4_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_via4_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_via4_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_via4_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_v4) *
                                        (PROPERTY_REF(area_v4) + PROPERTY_REF(box_via4_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1V4_b = DFM PROPERTY ant_via4_bb
                      R1V4_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1V4_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1V4 {@Maximum ratio of VIA4 area to connected GATE area ... 20
        copy R1V4_a
        copy R1V4_b
        DFM RDB R1V4_a "antenna.rdb" ALL CELLS
        DFM RDB R1V4_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1V4_a = DFM PROPERTY v4gate_bb
                      R1V4_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1V4_a_a,ratio_a)] > VAR_R1V4
        [ratio = 0 ] > VAR_R1V4

ADD_R1V4_b = DFM PROPERTY ant_via4_bb
                      R1V4_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1V4_b_a,ratio_a)] > VAR_R1V4
        [ratio = 0 ] > VAR_R1V4

ADD_R1V4 {@Maximum ratio of VIA4 area to connected GATE area ... ^VAR_R1V4
        copy ADD_R1V4_a
        copy ADD_R1V4_b
        DFM RDB ADD_R1V4_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1V4_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


m5_df    = copy m4_df
m5_p1    = copy m4_p1
m5_ct    = copy m4_ct
m5_m1    = copy m4_m1
m5_v1    = copy m4_v1
m5_m2    = copy m4_m2
m5_v2    = copy m4_v2
m5_m3    = copy m4_m3
m5_v3    = copy m4_v3
m5_m4    = copy m4_m4
m5_v4    = via4_ac OR emptlay
m5_m5    = met5sl OR emptlay
m5_gate  = copy m4_gate

CONNECT m5_m5 m5_m4 BY m5_v4
CONNECT m5_m4 m5_m3 BY m5_v3
CONNECT m5_m3 m5_m2 BY m5_v2
CONNECT m5_m2 m5_m1 BY m5_v1
CONNECT m5_m1 m5_p1 m5_df BY m5_ct
m5gate = STAMP m5_gate BY m5_p1

ant_met5 = NET AREA RATIO m5_m5 m5_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1M5P1 {@Maximum ratio of MET5 area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_met5 m5gate > 400
      [PERIMETER(ant_met5) * T_MET5 / AREA(m5gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m5gate
}

R2M5P1 {@Maximum ratio of MET5 area to connected GATE area ... 400
        @(met5 output)
  NET AREA RATIO ant_met5 OVER m5gate > 400
      [PERIMETER(ant_met5) * T_MET5 / AREA(m5gate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1M5P1 {@Maximum ratio of MET5 area to connected GATE area ... ^VAR_RxM5P1
        @(gate output)
  NET AREA RATIO ant_met5 m5gate > VAR_RxM5P1
      [PERIMETER(ant_met5) * T_MET5 / AREA(m5gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m5gate
}

ADD_R2M5P1 {@Maximum ratio of MET5 area to connected GATE area ... ^VAR_RxM5P1
        @(met5 output)
  NET AREA RATIO ant_met5 OVER m5gate > VAR_RxM5P1
      [PERIMETER(ant_met5) * T_MET5 / AREA(m5gate)]
}
#ENDIF
#ELSE

XFAB_BBOX_m5_p1_m1_prop = DFM PROPERTY m5_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m5_p1_m2_prop = DFM PROPERTY m5_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m5_p1_m3_prop = DFM PROPERTY m5_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m5_p1_m4_prop = DFM PROPERTY m5_m1
        met1_ANTENNADIFFAREA_met4
        met1_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met4) * PROPERTY(met1_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met4) * PROPERTY(met1_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_m5_p1_m5_prop = DFM PROPERTY m5_m1
        met1_ANTENNADIFFAREA_met5
        met1_ANTENNAPARTIALMETALSIDEAREA_met5
        met1_ANTENNAPARTIALCUTAREA_viatp
        met1_ANTENNAPARTIALCUTAREA_viatpl
        met1_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met5) * PROPERTY(met1_ANTENNAGATEAREA_met5,val)]
                [box_met5_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_met5) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_met5,val)]
                [box_viat_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met5) * PROPERTY(met1_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_m5_p2_m1_prop = DFM PROPERTY m5_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m5_p2_m2_prop = DFM PROPERTY m5_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m5_p2_m3_prop = DFM PROPERTY m5_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m5_p2_m4_prop = DFM PROPERTY m5_m2
        met2_ANTENNADIFFAREA_met4
        met2_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met4) * PROPERTY(met2_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met4) * PROPERTY(met2_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_m5_p2_m5_prop = DFM PROPERTY m5_m2
        met2_ANTENNADIFFAREA_met5
        met2_ANTENNAPARTIALMETALSIDEAREA_met5
        met2_ANTENNAPARTIALCUTAREA_viatp
        met2_ANTENNAPARTIALCUTAREA_viatpl
        met2_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met5) * PROPERTY(met2_ANTENNAGATEAREA_met5,val)]
                [box_met5_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_met5) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_met5,val)]
                [box_viat_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met5) * PROPERTY(met2_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_m5_p3_m1_prop = DFM PROPERTY m5_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m5_p3_m2_prop = DFM PROPERTY m5_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m5_p3_m3_prop = DFM PROPERTY m5_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m5_p3_m4_prop = DFM PROPERTY m5_m3
        met3_ANTENNADIFFAREA_met4
        met3_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met4) * PROPERTY(met3_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met4) * PROPERTY(met3_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_m5_p3_m5_prop = DFM PROPERTY m5_m3
        met3_ANTENNADIFFAREA_met5
        met3_ANTENNAPARTIALMETALSIDEAREA_met5
        met3_ANTENNAPARTIALCUTAREA_viatp
        met3_ANTENNAPARTIALCUTAREA_viatpl
        met3_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met5) * PROPERTY(met3_ANTENNAGATEAREA_met5,val)]
                [box_met5_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_met5) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_met5,val)]
                [box_viat_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met5) * PROPERTY(met3_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_m5_p4_m1_prop = DFM PROPERTY m5_m4
        met4_ANTENNADIFFAREA_met1
        met4_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met1) * PROPERTY(met4_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met1) * PROPERTY(met4_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m5_p4_m2_prop = DFM PROPERTY m5_m4
        met4_ANTENNADIFFAREA_met2
        met4_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met2) * PROPERTY(met4_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met2) * PROPERTY(met4_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m5_p4_m3_prop = DFM PROPERTY m5_m4
        met4_ANTENNADIFFAREA_met3
        met4_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met3) * PROPERTY(met4_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met3) * PROPERTY(met4_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m5_p4_m4_prop = DFM PROPERTY m5_m4
        met4_ANTENNADIFFAREA_met4
        met4_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met4) * PROPERTY(met4_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met4) * PROPERTY(met4_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_m5_p4_m5_prop = DFM PROPERTY m5_m4
        met4_ANTENNADIFFAREA_met5
        met4_ANTENNAPARTIALMETALSIDEAREA_met5
        met4_ANTENNAPARTIALCUTAREA_viatp
        met4_ANTENNAPARTIALCUTAREA_viatpl
        met4_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met5) * PROPERTY(met4_ANTENNAGATEAREA_met5,val)]
                [box_met5_area = !!AREA(met4_ANTENNAPARTIALMETALSIDEAREA_met5) * PROPERTY(met4_ANTENNAPARTIALMETALSIDEAREA_met5,val)]
                [box_viat_area = !!AREA(met4_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met4_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met4_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met4_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met5) * PROPERTY(met4_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_m5_p5_m1_prop = DFM PROPERTY m5_m4
        met5_ANTENNADIFFAREA_met1
        met5_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met1) * PROPERTY(met5_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met1) * PROPERTY(met5_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_m5_p5_m2_prop = DFM PROPERTY m5_m4
        met5_ANTENNADIFFAREA_met2
        met5_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met2) * PROPERTY(met5_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met2) * PROPERTY(met5_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_m5_p5_m3_prop = DFM PROPERTY m5_m4
        met5_ANTENNADIFFAREA_met3
        met5_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met3) * PROPERTY(met5_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met3) * PROPERTY(met5_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_m5_p5_m4_prop = DFM PROPERTY m5_m4
        met5_ANTENNADIFFAREA_met4
        met5_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met4) * PROPERTY(met5_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met4) * PROPERTY(met5_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_m5_p5_m5_prop = DFM PROPERTY m5_m4
        met5_ANTENNADIFFAREA_met5
        met5_ANTENNAPARTIALMETALSIDEAREA_met5
        met5_ANTENNAPARTIALCUTAREA_viatp
        met5_ANTENNAPARTIALCUTAREA_viatpl
        met5_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met5) * PROPERTY(met5_ANTENNAGATEAREA_met5,val)]
                [box_met5_area = !!AREA(met5_ANTENNAPARTIALMETALSIDEAREA_met5) * PROPERTY(met5_ANTENNAPARTIALMETALSIDEAREA_met5,val)]
                [box_viat_area = !!AREA(met5_ANTENNAPARTIALCUTAREA_viatp) * PROPERTY(met5_ANTENNAPARTIALCUTAREA_viatp,val)]
                [box_vial_area = !!AREA(met5_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met5_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met5) * PROPERTY(met5_ANTENNADIFFAREA_met5,val)]

m5gate_bb = COPY m5gate
R1M5P1_a = DFM PROPERTY m5gate_bb m5gate ant_met5
                      XFAB_BBOX_m5_p1_m1_prop XFAB_BBOX_m5_p1_m2_prop XFAB_BBOX_m5_p1_m3_prop XFAB_BBOX_m5_p1_m4_prop
                      XFAB_BBOX_m5_p1_m5_prop
                      XFAB_BBOX_m5_p2_m1_prop XFAB_BBOX_m5_p2_m2_prop XFAB_BBOX_m5_p2_m3_prop XFAB_BBOX_m5_p2_m4_prop
                      XFAB_BBOX_m5_p2_m5_prop
                      XFAB_BBOX_m5_p3_m1_prop XFAB_BBOX_m5_p3_m2_prop XFAB_BBOX_m5_p3_m3_prop XFAB_BBOX_m5_p3_m4_prop
                      XFAB_BBOX_m5_p3_m5_prop
                      XFAB_BBOX_m5_p4_m1_prop XFAB_BBOX_m5_p4_m2_prop XFAB_BBOX_m5_p4_m3_prop XFAB_BBOX_m5_p4_m4_prop
                      XFAB_BBOX_m5_p4_m5_prop
                      XFAB_BBOX_m5_p5_m1_prop XFAB_BBOX_m5_p5_m2_prop XFAB_BBOX_m5_p5_m3_prop XFAB_BBOX_m5_p5_m4_prop
                      XFAB_BBOX_m5_p5_m5_prop
                      NODAL MULTI
        [area_m5 = PERIMETER(ant_met5) * T_MET5]
        [area_gate = AREA(m5gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_gate_area)]
        [box_met5_area = PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_met5_area) + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_met5_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_met5_area) + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_met5_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_met5_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m5) *
                                        (PROPERTY_REF(area_m5) + PROPERTY_REF(box_met5_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1M5P1 = DFM PROPERTY m5gate_bb
                      R1M5P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M5P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1M5P1 {@Maximum ratio of MET5 area to connected GATE area ... 400
        @(gate output)
        copy R1M5P1
        DFM RDB R1M5P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1M5P1 = DFM PROPERTY m5gate_bb
                          R1M5P1_a OVERLAP MULTI
        [ratio = PROPERTY(R1M5P1_a,ratio_a)] > VAR_RxM5P1
        [ratio = 0 ] > VAR_RxM5P1

ADD_R1M5P1 {@Maximum ratio of MET5 area to connected GATE area ... ^VAR_RxM5P1
        @(gate output)
        copy ADD_R1M5P1
        DFM RDB ADD_R1M5P1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_met5_bb = COPY ant_met5
R2M5P1_a = DFM PROPERTY ant_met5_bb m5gate ant_met5
                      XFAB_BBOX_m5_p1_m1_prop XFAB_BBOX_m5_p1_m2_prop XFAB_BBOX_m5_p1_m3_prop XFAB_BBOX_m5_p1_m4_prop
                      XFAB_BBOX_m5_p1_m5_prop
                      XFAB_BBOX_m5_p2_m1_prop XFAB_BBOX_m5_p2_m2_prop XFAB_BBOX_m5_p2_m3_prop XFAB_BBOX_m5_p2_m4_prop
                      XFAB_BBOX_m5_p2_m5_prop
                      XFAB_BBOX_m5_p3_m1_prop XFAB_BBOX_m5_p3_m2_prop XFAB_BBOX_m5_p3_m3_prop XFAB_BBOX_m5_p3_m4_prop
                      XFAB_BBOX_m5_p3_m5_prop
                      XFAB_BBOX_m5_p4_m1_prop XFAB_BBOX_m5_p4_m2_prop XFAB_BBOX_m5_p4_m3_prop XFAB_BBOX_m5_p4_m4_prop
                      XFAB_BBOX_m5_p4_m5_prop
                      XFAB_BBOX_m5_p5_m1_prop XFAB_BBOX_m5_p5_m2_prop XFAB_BBOX_m5_p5_m3_prop XFAB_BBOX_m5_p5_m4_prop
                      XFAB_BBOX_m5_p5_m5_prop
                      NODAL MULTI
        [area_m5 = PERIMETER(ant_met5) * T_MET5]
        [area_gate = AREA(m5gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_gate_area)]
        [box_met5_area = PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_met5_area) + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_met5_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_met5_area) + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_met5_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_met5_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_m5) *
                                        (PROPERTY_REF(area_m5) + PROPERTY_REF(box_met5_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2M5P1 = DFM PROPERTY ant_met5_bb
                      R2M5P1_a OVERLAP MULTI
        [ratio = PROPERTY(R2M5P1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2M5P1 {@Maximum ratio of MET5 area to connected GATE area ... 400
        @(metal output)
        copy R2M5P1
        DFM RDB R2M5P1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2M5P1 = DFM PROPERTY ant_met5_bb
                          R2M5P1_a OVERLAP MULTI
            [ratio = PROPERTY(R2M5P1_a,ratio_a)] > VAR_RxM5P1
            [ratio = 0 ] > VAR_RxM5P1

ADD_R2M5P1 {@Maximum ratio of MET5 area to connected GATE area ... ^VAR_RxM5P1
        @(metal output)
        copy ADD_R2M5P1
        DFM RDB ADD_R2M5P1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF
#ENDIF


#IFDEF MIDMET
#IFDEF METAL5

a_viat = copy viatp_ac
CONNECT a_viat m5_m5
ant_viat = NET AREA RATIO a_viat m5_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VT {@Maximum ratio of VIATP area to connected GATE area ... 20
  NET AREA RATIO ant_viat m5gate > 20
      [AREA(ant_viat) / AREA(m5gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m5gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VT {@Maximum ratio of VIATP area to connected GATE area ... ^VAR_R1VT
  NET AREA RATIO ant_viat m5gate > VAR_R1VT
      [AREA(ant_viat) / AREA(m5gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m5gate
}
#ENDIF
#ELSE

vtgate_bb = COPY m5gate
R1VT_a_a = DFM PROPERTY vtgate_bb m5gate ant_viat
                      XFAB_BBOX_m5_p1_m1_prop XFAB_BBOX_m5_p1_m2_prop XFAB_BBOX_m5_p1_m3_prop XFAB_BBOX_m5_p1_m4_prop
                      XFAB_BBOX_m5_p1_m5_prop
                      XFAB_BBOX_m5_p2_m1_prop XFAB_BBOX_m5_p2_m2_prop XFAB_BBOX_m5_p2_m3_prop XFAB_BBOX_m5_p2_m4_prop
                      XFAB_BBOX_m5_p2_m5_prop
                      XFAB_BBOX_m5_p3_m1_prop XFAB_BBOX_m5_p3_m2_prop XFAB_BBOX_m5_p3_m3_prop XFAB_BBOX_m5_p3_m4_prop
                      XFAB_BBOX_m5_p3_m5_prop
                      XFAB_BBOX_m5_p4_m1_prop XFAB_BBOX_m5_p4_m2_prop XFAB_BBOX_m5_p4_m3_prop XFAB_BBOX_m5_p4_m4_prop
                      XFAB_BBOX_m5_p4_m5_prop
                      XFAB_BBOX_m5_p5_m1_prop XFAB_BBOX_m5_p5_m2_prop XFAB_BBOX_m5_p5_m3_prop XFAB_BBOX_m5_p5_m4_prop
                      XFAB_BBOX_m5_p5_m5_prop
                      NODAL MULTI
        [area_vt = AREA(ant_viat)]
        [area_gate = AREA(m5gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_gate_area)]
        [box_viat_area = PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_viat_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_viat_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_viat_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vt) *
                                        (PROPERTY_REF(area_vt) + PROPERTY_REF(box_viat_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VT_a = DFM PROPERTY vtgate_bb
                      R1VT_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_viat_bb = COPY ant_viat
R1VT_b_a = DFM PROPERTY ant_viat_bb m5gate ant_viat
                      XFAB_BBOX_m5_p1_m1_prop XFAB_BBOX_m5_p1_m2_prop XFAB_BBOX_m5_p1_m3_prop XFAB_BBOX_m5_p1_m4_prop
                      XFAB_BBOX_m5_p1_m5_prop
                      XFAB_BBOX_m5_p2_m1_prop XFAB_BBOX_m5_p2_m2_prop XFAB_BBOX_m5_p2_m3_prop XFAB_BBOX_m5_p2_m4_prop
                      XFAB_BBOX_m5_p2_m5_prop
                      XFAB_BBOX_m5_p3_m1_prop XFAB_BBOX_m5_p3_m2_prop XFAB_BBOX_m5_p3_m3_prop XFAB_BBOX_m5_p3_m4_prop
                      XFAB_BBOX_m5_p3_m5_prop
                      XFAB_BBOX_m5_p4_m1_prop XFAB_BBOX_m5_p4_m2_prop XFAB_BBOX_m5_p4_m3_prop XFAB_BBOX_m5_p4_m4_prop
                      XFAB_BBOX_m5_p4_m5_prop
                      XFAB_BBOX_m5_p5_m1_prop XFAB_BBOX_m5_p5_m2_prop XFAB_BBOX_m5_p5_m3_prop XFAB_BBOX_m5_p5_m4_prop
                      XFAB_BBOX_m5_p5_m5_prop
                      NODAL MULTI
        [area_vt = AREA(ant_viat)]
        [area_gate = AREA(m5gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_gate_area)]
        [box_viat_area = PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_viat_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_viat_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_viat_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vt) *
                                        (PROPERTY_REF(area_vt) + PROPERTY_REF(box_viat_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VT_b = DFM PROPERTY ant_viat_bb
                      R1VT_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VT {@Maximum ratio of VIATP area to connected GATE area ... 20
        copy R1VT_a
        copy R1VT_b
        DFM RDB R1VT_a "antenna.rdb" ALL CELLS
        DFM RDB R1VT_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VT_a = DFM PROPERTY vtgate_bb
                      R1VT_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_a_a,ratio_a)] > VAR_R1VT
        [ratio = 0 ] > VAR_R1VT

ADD_R1VT_b = DFM PROPERTY ant_viat_bb
                      R1VT_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_b_a,ratio_a)] > VAR_R1VT
        [ratio = 0 ] > VAR_R1VT

ADD_R1VT {@Maximum ratio of VIATP area to connected GATE area ... ^VAR_R1VT
        copy ADD_R1VT_a
        copy ADD_R1VT_b
        DFM RDB ADD_R1VT_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VT_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


mt_df    = copy m5_df
mt_p1    = copy m5_p1
mt_ct    = copy m5_ct
mt_m1    = copy m5_m1
mt_v1    = copy m5_v1
mt_m2    = copy m5_m2
mt_v2    = copy m5_v2
mt_m3    = copy m5_m3
mt_v3    = copy m5_v3
mt_m4    = copy m5_m4
mt_v4    = copy m5_v4
mt_m5    = copy m5_m5
mt_vt    = viatp_ac OR emptlay
mt_mt    = mettsl OR emptlay
mt_gate  = copy m5_gate

CONNECT mt_mt mt_m5 BY mt_vt
CONNECT mt_m5 mt_m4 BY mt_v4
CONNECT mt_m4 mt_m3 BY mt_v3
CONNECT mt_m3 mt_m2 BY mt_v2
CONNECT mt_m2 mt_m1 BY mt_v1
CONNECT mt_m1 mt_p1 mt_df BY mt_ct
mtgate = STAMP mt_gate BY mt_p1

ant_mett = NET AREA RATIO mt_mt mt_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_mett mtgate > 400
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(mettp output)
  NET AREA RATIO ant_mett OVER mtgate > 400
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(gate output)
  NET AREA RATIO ant_mett mtgate > VAR_RxMTP1
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

ADD_R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(mettp output)
  NET AREA RATIO ant_mett OVER mtgate > VAR_RxMTP1
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_mt_p1_m1_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p1_m2_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p1_m3_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p1_m4_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met4
        met1_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met4) * PROPERTY(met1_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met4) * PROPERTY(met1_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p1_m5_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met5
        met1_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met5) * PROPERTY(met1_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met5) * PROPERTY(met1_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_mt_p1_mt_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_mettp
        met1_ANTENNAPARTIALMETALSIDEAREA_mettp
        met1_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettp) * PROPERTY(met1_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettp) * PROPERTY(met1_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p2_m1_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p2_m2_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p2_m3_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p2_m4_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met4
        met2_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met4) * PROPERTY(met2_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met4) * PROPERTY(met2_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p2_m5_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met5
        met2_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met5) * PROPERTY(met2_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met5) * PROPERTY(met2_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_mt_p2_mt_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_mettp
        met2_ANTENNAPARTIALMETALSIDEAREA_mettp
        met2_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettp) * PROPERTY(met2_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettp) * PROPERTY(met2_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p3_m1_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p3_m2_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p3_m3_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p3_m4_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met4
        met3_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met4) * PROPERTY(met3_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met4) * PROPERTY(met3_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p3_m5_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met5
        met3_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met5) * PROPERTY(met3_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met5) * PROPERTY(met3_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_mt_p3_mt_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_mettp
        met3_ANTENNAPARTIALMETALSIDEAREA_mettp
        met3_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettp) * PROPERTY(met3_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettp) * PROPERTY(met3_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p4_m1_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met1
        met4_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met1) * PROPERTY(met4_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met1) * PROPERTY(met4_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p4_m2_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met2
        met4_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met2) * PROPERTY(met4_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met2) * PROPERTY(met4_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p4_m3_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met3
        met4_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met3) * PROPERTY(met4_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met3) * PROPERTY(met4_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p4_m4_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met4
        met4_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met4) * PROPERTY(met4_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met4) * PROPERTY(met4_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p4_m5_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met5
        met4_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met5) * PROPERTY(met4_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met5) * PROPERTY(met4_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_mt_p4_mt_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_mettp
        met4_ANTENNAPARTIALMETALSIDEAREA_mettp
        met4_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_mettp) * PROPERTY(met4_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met4_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met4_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_mettp) * PROPERTY(met4_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p5_m1_prop = DFM PROPERTY mt_m5
        met5_ANTENNADIFFAREA_met1
        met5_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met1) * PROPERTY(met5_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met1) * PROPERTY(met5_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p5_m2_prop = DFM PROPERTY mt_m5
        met5_ANTENNADIFFAREA_met2
        met5_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met2) * PROPERTY(met5_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met2) * PROPERTY(met5_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p5_m3_prop = DFM PROPERTY mt_m5
        met5_ANTENNADIFFAREA_met3
        met5_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met3) * PROPERTY(met5_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met3) * PROPERTY(met5_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p5_m4_prop = DFM PROPERTY mt_m5
        met5_ANTENNADIFFAREA_met4
        met5_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met4) * PROPERTY(met5_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met4) * PROPERTY(met5_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p5_m5_prop = DFM PROPERTY mt_m5
        met5_ANTENNADIFFAREA_met5
        met5_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met5) * PROPERTY(met5_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met5) * PROPERTY(met5_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_mt_p5_mt_prop = DFM PROPERTY mt_m5
        met5_ANTENNADIFFAREA_mettp
        met5_ANTENNAPARTIALMETALSIDEAREA_mettp
        met5_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_mettp) * PROPERTY(met5_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met5_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met5_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_mettp) * PROPERTY(met5_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_pt_m1_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met1
        mettp_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met1) * PROPERTY(mettp_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met1) * PROPERTY(mettp_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_pt_m2_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met2
        mettp_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met2) * PROPERTY(mettp_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met2) * PROPERTY(mettp_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_pt_m3_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met3
        mettp_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met3) * PROPERTY(mettp_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met3) * PROPERTY(mettp_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_pt_m4_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met4
        mettp_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met4) * PROPERTY(mettp_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met4) * PROPERTY(mettp_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_pt_m5_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met5
        mettp_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met5) * PROPERTY(mettp_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met5) * PROPERTY(mettp_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_mt_pt_mt_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_mettp
        mettp_ANTENNAPARTIALMETALSIDEAREA_mettp
        mettp_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettp) * PROPERTY(mettp_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(mettp_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(mettp_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettp) * PROPERTY(mettp_ANTENNADIFFAREA_mettp,val)]

mtgate_bb = COPY mtgate
R1MTP1_a = DFM PROPERTY mtgate_bb mtgate ant_mett
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_m4_prop
                      XFAB_BBOX_mt_p1_m5_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_m4_prop
                      XFAB_BBOX_mt_p2_m5_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_m4_prop
                      XFAB_BBOX_mt_p3_m5_prop XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_p4_m1_prop XFAB_BBOX_mt_p4_m2_prop XFAB_BBOX_mt_p4_m3_prop XFAB_BBOX_mt_p4_m4_prop
                      XFAB_BBOX_mt_p4_m5_prop XFAB_BBOX_mt_p4_mt_prop
                      XFAB_BBOX_mt_p5_m1_prop XFAB_BBOX_mt_p5_m2_prop XFAB_BBOX_mt_p5_m3_prop XFAB_BBOX_mt_p5_m4_prop
                      XFAB_BBOX_mt_p5_m5_prop XFAB_BBOX_mt_p5_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_m4_prop
                      XFAB_BBOX_mt_pt_m5_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_mt = PERIMETER(ant_mett) * T_METTP]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p5_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p5_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_mett_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_p5_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_mett_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p5_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p5_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_mt) *
                                        (PROPERTY_REF(area_mt) + PROPERTY_REF(box_mett_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MTP1 = DFM PROPERTY mtgate_bb
                      R1MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MTP1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(gate output)
        copy R1MTP1
        DFM RDB R1MTP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MTP1 = DFM PROPERTY mtgate_bb
                          R1MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MTP1_a,ratio_a)] > VAR_RxMTP1
        [ratio = 0 ] > VAR_RxMTP1

ADD_R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(gate output)
        copy ADD_R1MTP1
        DFM RDB ADD_R1MTP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_mett_bb = COPY ant_mett
R2MTP1_a = DFM PROPERTY ant_mett_bb mtgate ant_mett
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_m4_prop
                      XFAB_BBOX_mt_p1_m5_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_m4_prop
                      XFAB_BBOX_mt_p2_m5_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_m4_prop
                      XFAB_BBOX_mt_p3_m5_prop XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_p4_m1_prop XFAB_BBOX_mt_p4_m2_prop XFAB_BBOX_mt_p4_m3_prop XFAB_BBOX_mt_p4_m4_prop
                      XFAB_BBOX_mt_p4_m5_prop XFAB_BBOX_mt_p4_mt_prop
                      XFAB_BBOX_mt_p5_m1_prop XFAB_BBOX_mt_p5_m2_prop XFAB_BBOX_mt_p5_m3_prop XFAB_BBOX_mt_p5_m4_prop
                      XFAB_BBOX_mt_p5_m5_prop XFAB_BBOX_mt_p5_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_m4_prop
                      XFAB_BBOX_mt_pt_m5_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_mt = PERIMETER(ant_mett) * T_METTP]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p5_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p5_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_mett_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_p5_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_mett_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p5_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p5_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_mt) *
                                        (PROPERTY_REF(area_mt) + PROPERTY_REF(box_mett_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2MTP1 = DFM PROPERTY ant_mett_bb
                      R2MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MTP1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(metal output)
        copy R2MTP1
        DFM RDB R2MTP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MTP1 = DFM PROPERTY ant_mett_bb
                          R2MTP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MTP1_a,ratio_a)] > VAR_RxMTP1
            [ratio = 0 ] > VAR_RxMTP1

ADD_R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(metal output)
        copy ADD_R2MTP1
        DFM RDB ADD_R2MTP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


#ELSE
#IFDEF METAL4

a_viat = copy viatp_ac
CONNECT a_viat m4_m4
ant_viat = NET AREA RATIO a_viat m4_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VT {@Maximum ratio of VIATP area to connected GATE area ... 20
  NET AREA RATIO ant_viat m4gate > 20
      [AREA(ant_viat) / AREA(m4gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m4gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VT {@Maximum ratio of VIATP area to connected GATE area ... ^VAR_R1VT
  NET AREA RATIO ant_viat m4gate > VAR_R1VT
      [AREA(ant_viat) / AREA(m4gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m4gate
}
#ENDIF
#ELSE

vtgate_bb = COPY m4gate
R1VT_a_a = DFM PROPERTY vtgate_bb m4gate ant_viat
                      XFAB_BBOX_m4_p1_m1_prop XFAB_BBOX_m4_p1_m2_prop XFAB_BBOX_m4_p1_m3_prop XFAB_BBOX_m4_p1_m4_prop
                      XFAB_BBOX_m4_p2_m1_prop XFAB_BBOX_m4_p2_m2_prop XFAB_BBOX_m4_p2_m3_prop XFAB_BBOX_m4_p2_m4_prop
                      XFAB_BBOX_m4_p3_m1_prop XFAB_BBOX_m4_p3_m2_prop XFAB_BBOX_m4_p3_m3_prop XFAB_BBOX_m4_p3_m4_prop
                      XFAB_BBOX_m4_p4_m1_prop XFAB_BBOX_m4_p4_m2_prop XFAB_BBOX_m4_p4_m3_prop XFAB_BBOX_m4_p4_m4_prop
                      NODAL MULTI
        [area_vt = AREA(ant_viat)]
        [area_gate = AREA(m4gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_gate_area)]
        [box_viat_area = PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_viat_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_viat_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vt) *
                                        (PROPERTY_REF(area_vt) + PROPERTY_REF(box_viat_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VT_a = DFM PROPERTY vtgate_bb
                      R1VT_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_viat_bb = COPY ant_viat
R1VT_b_a = DFM PROPERTY ant_viat_bb m4gate ant_viat
                      XFAB_BBOX_m4_p1_m1_prop XFAB_BBOX_m4_p1_m2_prop XFAB_BBOX_m4_p1_m3_prop XFAB_BBOX_m4_p1_m4_prop
                      XFAB_BBOX_m4_p2_m1_prop XFAB_BBOX_m4_p2_m2_prop XFAB_BBOX_m4_p2_m3_prop XFAB_BBOX_m4_p2_m4_prop
                      XFAB_BBOX_m4_p3_m1_prop XFAB_BBOX_m4_p3_m2_prop XFAB_BBOX_m4_p3_m3_prop XFAB_BBOX_m4_p3_m4_prop
                      XFAB_BBOX_m4_p4_m1_prop XFAB_BBOX_m4_p4_m2_prop XFAB_BBOX_m4_p4_m3_prop XFAB_BBOX_m4_p4_m4_prop
                      NODAL MULTI
        [area_vt = AREA(ant_viat)]
        [area_gate = AREA(m4gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_gate_area)]
        [box_viat_area = PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_viat_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_viat_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vt) *
                                        (PROPERTY_REF(area_vt) + PROPERTY_REF(box_viat_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VT_b = DFM PROPERTY ant_viat_bb
                      R1VT_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VT {@Maximum ratio of VIATP area to connected GATE area ... 20
        copy R1VT_a
        copy R1VT_b
        DFM RDB R1VT_a "antenna.rdb" ALL CELLS
        DFM RDB R1VT_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VT_a = DFM PROPERTY vtgate_bb
                      R1VT_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_a_a,ratio_a)] > VAR_R1VT
        [ratio = 0 ] > VAR_R1VT

ADD_R1VT_b = DFM PROPERTY ant_viat_bb
                      R1VT_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_b_a,ratio_a)] > VAR_R1VT
        [ratio = 0 ] > VAR_R1VT

ADD_R1VT {@Maximum ratio of VIATP area to connected GATE area ... ^VAR_R1VT
        copy ADD_R1VT_a
        copy ADD_R1VT_b
        DFM RDB ADD_R1VT_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VT_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


mt_df    = copy m4_df
mt_p1    = copy m4_p1
mt_ct    = copy m4_ct
mt_m1    = copy m4_m1
mt_v1    = copy m4_v1
mt_m2    = copy m4_m2
mt_v2    = copy m4_v2
mt_m3    = copy m4_m3
mt_v3    = copy m4_v3
mt_m4    = copy m4_m4
mt_vt    = viatp_ac OR emptlay
mt_mt    = mettsl OR emptlay
mt_gate  = copy m4_gate

CONNECT mt_mt mt_m4 BY mt_vt
CONNECT mt_m4 mt_m3 BY mt_v3
CONNECT mt_m3 mt_m2 BY mt_v2
CONNECT mt_m2 mt_m1 BY mt_v1
CONNECT mt_m1 mt_p1 mt_df BY mt_ct
mtgate = STAMP mt_gate BY mt_p1

ant_mett = NET AREA RATIO mt_mt mt_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_mett mtgate > 400
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(mettp output)
  NET AREA RATIO ant_mett OVER mtgate > 400
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(gate output)
  NET AREA RATIO ant_mett mtgate > VAR_RxMTP1
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

ADD_R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(mettp output)
  NET AREA RATIO ant_mett OVER mtgate > VAR_RxMTP1
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_mt_p1_m1_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p1_m2_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p1_m3_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p1_m4_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met4
        met1_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met4) * PROPERTY(met1_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met4) * PROPERTY(met1_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p1_mt_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_mettp
        met1_ANTENNAPARTIALMETALSIDEAREA_mettp
        met1_ANTENNAPARTIALCUTAREA_viatpl
        met1_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettp) * PROPERTY(met1_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettp) * PROPERTY(met1_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p2_m1_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p2_m2_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p2_m3_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p2_m4_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met4
        met2_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met4) * PROPERTY(met2_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met4) * PROPERTY(met2_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p2_mt_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_mettp
        met2_ANTENNAPARTIALMETALSIDEAREA_mettp
        met2_ANTENNAPARTIALCUTAREA_viatpl
        met2_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettp) * PROPERTY(met2_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettp) * PROPERTY(met2_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p3_m1_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p3_m2_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p3_m3_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p3_m4_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met4
        met3_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met4) * PROPERTY(met3_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met4) * PROPERTY(met3_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p3_mt_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_mettp
        met3_ANTENNAPARTIALMETALSIDEAREA_mettp
        met3_ANTENNAPARTIALCUTAREA_viatpl
        met3_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettp) * PROPERTY(met3_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettp) * PROPERTY(met3_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p4_m1_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met1
        met4_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met1) * PROPERTY(met4_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met1) * PROPERTY(met4_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p4_m2_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met2
        met4_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met2) * PROPERTY(met4_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met2) * PROPERTY(met4_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p4_m3_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met3
        met4_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met3) * PROPERTY(met4_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met3) * PROPERTY(met4_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p4_m4_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_met4
        met4_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met4) * PROPERTY(met4_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met4) * PROPERTY(met4_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_p4_mt_prop = DFM PROPERTY mt_m4
        met4_ANTENNADIFFAREA_mettp
        met4_ANTENNAPARTIALMETALSIDEAREA_mettp
        met4_ANTENNAPARTIALCUTAREA_viatpl
        met4_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_mettp) * PROPERTY(met4_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met4_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met4_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met4_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met4_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_mettp) * PROPERTY(met4_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_pt_m1_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met1
        mettp_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met1) * PROPERTY(mettp_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met1) * PROPERTY(mettp_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_pt_m2_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met2
        mettp_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met2) * PROPERTY(mettp_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met2) * PROPERTY(mettp_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_pt_m3_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met3
        mettp_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met3) * PROPERTY(mettp_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met3) * PROPERTY(mettp_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_pt_m4_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met4
        mettp_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met4) * PROPERTY(mettp_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met4) * PROPERTY(mettp_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_mt_pt_mt_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_mettp
        mettp_ANTENNAPARTIALMETALSIDEAREA_mettp
        mettp_ANTENNAPARTIALCUTAREA_viatpl
        mettp_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettp) * PROPERTY(mettp_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(mettp_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(mettp_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(mettp_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(mettp_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettp) * PROPERTY(mettp_ANTENNADIFFAREA_mettp,val)]

mtgate_bb = COPY mtgate
R1MTP1_a = DFM PROPERTY mtgate_bb mtgate ant_mett
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_m4_prop
                      XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_m4_prop
                      XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_m4_prop
                      XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_p4_m1_prop XFAB_BBOX_mt_p4_m2_prop XFAB_BBOX_mt_p4_m3_prop XFAB_BBOX_mt_p4_m4_prop
                      XFAB_BBOX_mt_p4_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_m4_prop
                      XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_mt = PERIMETER(ant_mett) * T_METTP]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_mett_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_mett_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_mt) *
                                        (PROPERTY_REF(area_mt) + PROPERTY_REF(box_mett_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MTP1 = DFM PROPERTY mtgate_bb
                      R1MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MTP1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(gate output)
        copy R1MTP1
        DFM RDB R1MTP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MTP1 = DFM PROPERTY mtgate_bb
                          R1MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MTP1_a,ratio_a)] > VAR_RxMTP1
        [ratio = 0 ] > VAR_RxMTP1

ADD_R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(gate output)
        copy ADD_R1MTP1
        DFM RDB ADD_R1MTP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_mett_bb = COPY ant_mett
R2MTP1_a = DFM PROPERTY ant_mett_bb mtgate ant_mett
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_m4_prop
                      XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_m4_prop
                      XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_m4_prop
                      XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_p4_m1_prop XFAB_BBOX_mt_p4_m2_prop XFAB_BBOX_mt_p4_m3_prop XFAB_BBOX_mt_p4_m4_prop
                      XFAB_BBOX_mt_p4_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_m4_prop
                      XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_mt = PERIMETER(ant_mett) * T_METTP]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_mett_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_mett_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_mt) *
                                        (PROPERTY_REF(area_mt) + PROPERTY_REF(box_mett_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2MTP1 = DFM PROPERTY ant_mett_bb
                      R2MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MTP1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(metal output)
        copy R2MTP1
        DFM RDB R2MTP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MTP1 = DFM PROPERTY ant_mett_bb
                          R2MTP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MTP1_a,ratio_a)] > VAR_RxMTP1
            [ratio = 0 ] > VAR_RxMTP1

ADD_R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(metal output)
        copy ADD_R2MTP1
        DFM RDB ADD_R2MTP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ELSE
#IFDEF METAL3

a_viat = copy viatp_ac
CONNECT a_viat m3_m3
ant_viat = NET AREA RATIO a_viat m3_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VT {@Maximum ratio of VIATP area to connected GATE area ... 20
  NET AREA RATIO ant_viat m3gate > 20
      [AREA(ant_viat) / AREA(m3gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m3gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VT {@Maximum ratio of VIATP area to connected GATE area ... ^VAR_R1VT
  NET AREA RATIO ant_viat m3gate > VAR_R1VT
      [AREA(ant_viat) / AREA(m3gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m3gate
}
#ENDIF
#ELSE

vtgate_bb = COPY m3gate
R1VT_a_a = DFM PROPERTY vtgate_bb m3gate ant_viat
                      XFAB_BBOX_m3_p1_m1_prop XFAB_BBOX_m3_p1_m2_prop XFAB_BBOX_m3_p1_m3_prop
                      XFAB_BBOX_m3_p2_m1_prop XFAB_BBOX_m3_p2_m2_prop XFAB_BBOX_m3_p2_m3_prop
                      XFAB_BBOX_m3_p3_m1_prop XFAB_BBOX_m3_p3_m2_prop XFAB_BBOX_m3_p3_m3_prop
                      NODAL MULTI
        [area_vt = AREA(ant_viat)]
        [area_gate = AREA(m3gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_gate_area)]
        [box_viat_area = PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_viat_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_viat_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vt) *
                                        (PROPERTY_REF(area_vt) + PROPERTY_REF(box_viat_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VT_a = DFM PROPERTY vtgate_bb
                      R1VT_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_viat_bb = COPY ant_viat
R1VT_b_a = DFM PROPERTY ant_viat_bb m3gate ant_viat
                      XFAB_BBOX_m3_p1_m1_prop XFAB_BBOX_m3_p1_m2_prop XFAB_BBOX_m3_p1_m3_prop
                      XFAB_BBOX_m3_p2_m1_prop XFAB_BBOX_m3_p2_m2_prop XFAB_BBOX_m3_p2_m3_prop
                      XFAB_BBOX_m3_p3_m1_prop XFAB_BBOX_m3_p3_m2_prop XFAB_BBOX_m3_p3_m3_prop
                      NODAL MULTI
        [area_vt = AREA(ant_viat)]
        [area_gate = AREA(m3gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_gate_area)]
        [box_viat_area = PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_viat_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_viat_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vt) *
                                        (PROPERTY_REF(area_vt) + PROPERTY_REF(box_viat_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VT_b = DFM PROPERTY ant_viat_bb
                      R1VT_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VT {@Maximum ratio of VIATP area to connected GATE area ... 20
        copy R1VT_a
        copy R1VT_b
        DFM RDB R1VT_a "antenna.rdb" ALL CELLS
        DFM RDB R1VT_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VT_a = DFM PROPERTY vtgate_bb
                      R1VT_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_a_a,ratio_a)] > VAR_R1VT
        [ratio = 0 ] > VAR_R1VT

ADD_R1VT_b = DFM PROPERTY ant_viat_bb
                      R1VT_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_b_a,ratio_a)] > VAR_R1VT
        [ratio = 0 ] > VAR_R1VT

ADD_R1VT {@Maximum ratio of VIATP area to connected GATE area ... ^VAR_R1VT
        copy ADD_R1VT_a
        copy ADD_R1VT_b
        DFM RDB ADD_R1VT_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VT_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


mt_df    = copy m3_df
mt_p1    = copy m3_p1
mt_ct    = copy m3_ct
mt_m1    = copy m3_m1
mt_v1    = copy m3_v1
mt_m2    = copy m3_m2
mt_v2    = copy m3_v2
mt_m3    = copy m3_m3
mt_vt    = viatp_ac OR emptlay
mt_mt    = mettsl OR emptlay
mt_gate  = copy m3_gate

CONNECT mt_mt mt_m3 BY mt_vt
CONNECT mt_m3 mt_m2 BY mt_v2
CONNECT mt_m2 mt_m1 BY mt_v1
CONNECT mt_m1 mt_p1 mt_df BY mt_ct
mtgate = STAMP mt_gate BY mt_p1

ant_mett = NET AREA RATIO mt_mt mt_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_mett mtgate > 400
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(mettp output)
  NET AREA RATIO ant_mett OVER mtgate > 400
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(gate output)
  NET AREA RATIO ant_mett mtgate > VAR_RxMTP1
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

ADD_R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(mettp output)
  NET AREA RATIO ant_mett OVER mtgate > VAR_RxMTP1
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_mt_p1_m1_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p1_m2_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p1_m3_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p1_mt_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_mettp
        met1_ANTENNAPARTIALMETALSIDEAREA_mettp
        met1_ANTENNAPARTIALCUTAREA_viatpl
        met1_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettp) * PROPERTY(met1_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettp) * PROPERTY(met1_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p2_m1_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p2_m2_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p2_m3_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p2_mt_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_mettp
        met2_ANTENNAPARTIALMETALSIDEAREA_mettp
        met2_ANTENNAPARTIALCUTAREA_viatpl
        met2_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettp) * PROPERTY(met2_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettp) * PROPERTY(met2_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p3_m1_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p3_m2_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p3_m3_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_p3_mt_prop = DFM PROPERTY mt_m3
        met3_ANTENNADIFFAREA_mettp
        met3_ANTENNAPARTIALMETALSIDEAREA_mettp
        met3_ANTENNAPARTIALCUTAREA_viatpl
        met3_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettp) * PROPERTY(met3_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met3_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met3_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettp) * PROPERTY(met3_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_pt_m1_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met1
        mettp_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met1) * PROPERTY(mettp_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met1) * PROPERTY(mettp_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_pt_m2_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met2
        mettp_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met2) * PROPERTY(mettp_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met2) * PROPERTY(mettp_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_pt_m3_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met3
        mettp_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met3) * PROPERTY(mettp_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met3) * PROPERTY(mettp_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_mt_pt_mt_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_mettp
        mettp_ANTENNAPARTIALMETALSIDEAREA_mettp
        mettp_ANTENNAPARTIALCUTAREA_viatpl
        mettp_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettp) * PROPERTY(mettp_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(mettp_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(mettp_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(mettp_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(mettp_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettp) * PROPERTY(mettp_ANTENNADIFFAREA_mettp,val)]

mtgate_bb = COPY mtgate
R1MTP1_a = DFM PROPERTY mtgate_bb mtgate ant_mett
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_mt = PERIMETER(ant_mett) * T_METTP]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_mett_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_mett_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_mt) *
                                        (PROPERTY_REF(area_mt) + PROPERTY_REF(box_mett_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MTP1 = DFM PROPERTY mtgate_bb
                      R1MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MTP1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(gate output)
        copy R1MTP1
        DFM RDB R1MTP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MTP1 = DFM PROPERTY mtgate_bb
                          R1MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MTP1_a,ratio_a)] > VAR_RxMTP1
        [ratio = 0 ] > VAR_RxMTP1

ADD_R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(gate output)
        copy ADD_R1MTP1
        DFM RDB ADD_R1MTP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_mett_bb = COPY ant_mett
R2MTP1_a = DFM PROPERTY ant_mett_bb mtgate ant_mett
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_mt = PERIMETER(ant_mett) * T_METTP]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_mett_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_mett_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_mt) *
                                        (PROPERTY_REF(area_mt) + PROPERTY_REF(box_mett_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2MTP1 = DFM PROPERTY ant_mett_bb
                      R2MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MTP1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(metal output)
        copy R2MTP1
        DFM RDB R2MTP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MTP1 = DFM PROPERTY ant_mett_bb
                          R2MTP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MTP1_a,ratio_a)] > VAR_RxMTP1
            [ratio = 0 ] > VAR_RxMTP1

ADD_R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(metal output)
        copy ADD_R2MTP1
        DFM RDB ADD_R2MTP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


#ELSE

a_viat = copy viatp_ac
CONNECT a_viat m2_m2
ant_viat = NET AREA RATIO a_viat m2_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VT {@Maximum ratio of VIATP area to connected GATE area ... 20
  NET AREA RATIO ant_viat m2gate > 20
      [AREA(ant_viat) / AREA(m2gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m2gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VT {@Maximum ratio of VIATP area to connected GATE area ... ^VAR_R1VT
  NET AREA RATIO ant_viat m2gate > VAR_R1VT
      [AREA(ant_viat) / AREA(m2gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m2gate
}
#ENDIF
#ELSE

vtgate_bb = COPY m2gate
R1VT_a_a = DFM PROPERTY vtgate_bb m2gate ant_viat
                      XFAB_BBOX_m2_p1_m1_prop XFAB_BBOX_m2_p1_m2_prop
                      XFAB_BBOX_m2_p2_m1_prop XFAB_BBOX_m2_p2_m2_prop
                      NODAL MULTI
        [area_vt = AREA(ant_viat)]
        [area_gate = AREA(m2gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_gate_area)]
        [box_viat_area = PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_viat_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vt) *
                                        (PROPERTY_REF(area_vt) + PROPERTY_REF(box_viat_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VT_a = DFM PROPERTY vtgate_bb
                      R1VT_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_viat_bb = COPY ant_viat
R1VT_b_a = DFM PROPERTY ant_viat_bb m2gate ant_viat
                      XFAB_BBOX_m2_p1_m1_prop XFAB_BBOX_m2_p1_m2_prop
                      XFAB_BBOX_m2_p2_m1_prop XFAB_BBOX_m2_p2_m2_prop
                      NODAL MULTI
        [area_vt = AREA(ant_viat)]
        [area_gate = AREA(m2gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_gate_area)]
        [box_viat_area = PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_viat_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_viat_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vt) *
                                        (PROPERTY_REF(area_vt) + PROPERTY_REF(box_viat_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VT_b = DFM PROPERTY ant_viat_bb
                      R1VT_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VT {@Maximum ratio of VIATP area to connected GATE area ... 20
        copy R1VT_a
        copy R1VT_b
        DFM RDB R1VT_a "antenna.rdb" ALL CELLS
        DFM RDB R1VT_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VT_a = DFM PROPERTY vtgate_bb
                      R1VT_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_a_a,ratio_a)] > VAR_R1VT
        [ratio = 0 ] > VAR_R1VT

ADD_R1VT_b = DFM PROPERTY ant_viat_bb
                      R1VT_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VT_b_a,ratio_a)] > VAR_R1VT
        [ratio = 0 ] > VAR_R1VT

ADD_R1VT {@Maximum ratio of VIATP area to connected GATE area ... ^VAR_R1VT
        copy ADD_R1VT_a
        copy ADD_R1VT_b
        DFM RDB ADD_R1VT_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VT_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


mt_df    = copy m2_df
mt_p1    = copy m2_p1
mt_ct    = copy m2_ct
mt_m1    = copy m2_m1
mt_v1    = copy m2_v1
mt_m2    = copy m2_m2
mt_vt    = viatp_ac OR emptlay
mt_mt    = mettsl OR emptlay
mt_gate  = copy m2_gate

CONNECT mt_mt mt_m2 BY mt_vt
CONNECT mt_m2 mt_m1 BY mt_v1
CONNECT mt_m1 mt_p1 mt_df BY mt_ct
mtgate = STAMP mt_gate BY mt_p1

ant_mett = NET AREA RATIO mt_mt mt_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(gate output)
  NET AREA RATIO ant_mett mtgate > 400
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(mettp output)
  NET AREA RATIO ant_mett OVER mtgate > 400
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(gate output)
  NET AREA RATIO ant_mett mtgate > VAR_RxMTP1
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

ADD_R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(mettp output)
  NET AREA RATIO ant_mett OVER mtgate > VAR_RxMTP1
      [PERIMETER(ant_mett) * T_METTP / AREA(mtgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_mt_p1_m1_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p1_m2_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p1_mt_prop = DFM PROPERTY mt_m1
        met1_ANTENNADIFFAREA_mettp
        met1_ANTENNAPARTIALMETALSIDEAREA_mettp
        met1_ANTENNAPARTIALCUTAREA_viatpl
        met1_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettp) * PROPERTY(met1_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met1_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met1_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettp) * PROPERTY(met1_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_p2_m1_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_p2_m2_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_p2_mt_prop = DFM PROPERTY mt_m2
        met2_ANTENNADIFFAREA_mettp
        met2_ANTENNAPARTIALMETALSIDEAREA_mettp
        met2_ANTENNAPARTIALCUTAREA_viatpl
        met2_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettp) * PROPERTY(met2_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(met2_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(met2_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettp) * PROPERTY(met2_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_mt_pt_m1_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met1
        mettp_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met1) * PROPERTY(mettp_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met1) * PROPERTY(mettp_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_mt_pt_m2_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_met2
        mettp_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met2) * PROPERTY(mettp_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met2) * PROPERTY(mettp_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_mt_pt_mt_prop = DFM PROPERTY mt_mt
        mettp_ANTENNADIFFAREA_mettp
        mettp_ANTENNAPARTIALMETALSIDEAREA_mettp
        mettp_ANTENNAPARTIALCUTAREA_viatpl
        mettp_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettp) * PROPERTY(mettp_ANTENNAGATEAREA_mettp,val)]
                [box_mett_area = !!AREA(mettp_ANTENNAPARTIALMETALSIDEAREA_mettp) * PROPERTY(mettp_ANTENNAPARTIALMETALSIDEAREA_mettp,val)]
                [box_vial_area = !!AREA(mettp_ANTENNAPARTIALCUTAREA_viatpl) * PROPERTY(mettp_ANTENNAPARTIALCUTAREA_viatpl,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettp) * PROPERTY(mettp_ANTENNADIFFAREA_mettp,val)]

mtgate_bb = COPY mtgate
R1MTP1_a = DFM PROPERTY mtgate_bb mtgate ant_mett
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_mt = PERIMETER(ant_mett) * T_METTP]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_mett_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_mett_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_mt) *
                                        (PROPERTY_REF(area_mt) + PROPERTY_REF(box_mett_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MTP1 = DFM PROPERTY mtgate_bb
                      R1MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MTP1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(gate output)
        copy R1MTP1
        DFM RDB R1MTP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MTP1 = DFM PROPERTY mtgate_bb
                          R1MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MTP1_a,ratio_a)] > VAR_RxMTP1
        [ratio = 0 ] > VAR_RxMTP1

ADD_R1MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(gate output)
        copy ADD_R1MTP1
        DFM RDB ADD_R1MTP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_mett_bb = COPY ant_mett
R2MTP1_a = DFM PROPERTY ant_mett_bb mtgate ant_mett
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_mt = PERIMETER(ant_mett) * T_METTP]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_mett_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_mett_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_mett_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_mett_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_mt) *
                                        (PROPERTY_REF(area_mt) + PROPERTY_REF(box_mett_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 400

R2MTP1 = DFM PROPERTY ant_mett_bb
                      R2MTP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MTP1_a,ratio_a)] > 400
        [ratio = 0 ] > 400

R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... 400
        @(metal output)
        copy R2MTP1
        DFM RDB R2MTP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MTP1 = DFM PROPERTY ant_mett_bb
                          R2MTP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MTP1_a,ratio_a)] > VAR_RxMTP1
            [ratio = 0 ] > VAR_RxMTP1

ADD_R2MTP1 {@Maximum ratio of METTP area to connected GATE area ... ^VAR_RxMTP1
        @(metal output)
        copy ADD_R2MTP1
        DFM RDB ADD_R2MTP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ENDIF
#ENDIF
#ENDIF
#ENDIF


#IFDEF THKMET
#IFDEF METAL5

a_vial = copy viatpl_ac
CONNECT a_vial m5_m5
ant_vial = NET AREA RATIO a_vial m5_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
  NET AREA RATIO ant_vial m5gate > 20
      [AREA(ant_vial) / AREA(m5gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m5gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
  NET AREA RATIO ant_vial m5gate > VAR_R1VL
      [AREA(ant_vial) / AREA(m5gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m5gate
}
#ENDIF
#ELSE

vlgate_bb = COPY m5gate
R1VL_a_a = DFM PROPERTY vlgate_bb m5gate ant_vial
                      XFAB_BBOX_m5_p1_m1_prop XFAB_BBOX_m5_p1_m2_prop XFAB_BBOX_m5_p1_m3_prop XFAB_BBOX_m5_p1_m4_prop
                      XFAB_BBOX_m5_p1_m5_prop
                      XFAB_BBOX_m5_p2_m1_prop XFAB_BBOX_m5_p2_m2_prop XFAB_BBOX_m5_p2_m3_prop XFAB_BBOX_m5_p2_m4_prop
                      XFAB_BBOX_m5_p2_m5_prop
                      XFAB_BBOX_m5_p3_m1_prop XFAB_BBOX_m5_p3_m2_prop XFAB_BBOX_m5_p3_m3_prop XFAB_BBOX_m5_p3_m4_prop
                      XFAB_BBOX_m5_p3_m5_prop
                      XFAB_BBOX_m5_p4_m1_prop XFAB_BBOX_m5_p4_m2_prop XFAB_BBOX_m5_p4_m3_prop XFAB_BBOX_m5_p4_m4_prop
                      XFAB_BBOX_m5_p4_m5_prop
                      XFAB_BBOX_m5_p5_m1_prop XFAB_BBOX_m5_p5_m2_prop XFAB_BBOX_m5_p5_m3_prop XFAB_BBOX_m5_p5_m4_prop
                      XFAB_BBOX_m5_p5_m5_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(m5gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_vial_bb = COPY ant_vial
R1VL_b_a = DFM PROPERTY ant_vial_bb m5gate ant_vial
                      XFAB_BBOX_m5_p1_m1_prop XFAB_BBOX_m5_p1_m2_prop XFAB_BBOX_m5_p1_m3_prop XFAB_BBOX_m5_p1_m4_prop
                      XFAB_BBOX_m5_p1_m5_prop
                      XFAB_BBOX_m5_p2_m1_prop XFAB_BBOX_m5_p2_m2_prop XFAB_BBOX_m5_p2_m3_prop XFAB_BBOX_m5_p2_m4_prop
                      XFAB_BBOX_m5_p2_m5_prop
                      XFAB_BBOX_m5_p3_m1_prop XFAB_BBOX_m5_p3_m2_prop XFAB_BBOX_m5_p3_m3_prop XFAB_BBOX_m5_p3_m4_prop
                      XFAB_BBOX_m5_p3_m5_prop
                      XFAB_BBOX_m5_p4_m1_prop XFAB_BBOX_m5_p4_m2_prop XFAB_BBOX_m5_p4_m3_prop XFAB_BBOX_m5_p4_m4_prop
                      XFAB_BBOX_m5_p4_m5_prop
                      XFAB_BBOX_m5_p5_m1_prop XFAB_BBOX_m5_p5_m2_prop XFAB_BBOX_m5_p5_m3_prop XFAB_BBOX_m5_p5_m4_prop
                      XFAB_BBOX_m5_p5_m5_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(m5gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m5_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p1_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p2_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p3_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p4_m5_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m5_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m5_p5_m5_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
        copy R1VL_a
        copy R1VL_b
        DFM RDB R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB R1VL_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
        copy ADD_R1VL_a
        copy ADD_R1VL_b
        DFM RDB ADD_R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VL_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


ml_df    = copy m5_df
ml_p1    = copy m5_p1
ml_ct    = copy m5_ct
ml_m1    = copy m5_m1
ml_v1    = copy m5_v1
ml_m2    = copy m5_m2
ml_v2    = copy m5_v2
ml_m3    = copy m5_m3
ml_v3    = copy m5_v3
ml_m4    = copy m5_m4
ml_v4    = copy m5_v4
ml_m5    = copy m5_m5
ml_vl    = viatpl_ac OR emptlay
ml_ml    = mettpl OR emptlay
ml_gate  = copy m5_gate

CONNECT ml_ml ml_m5 BY ml_vl
CONNECT ml_m5 ml_m4 BY ml_v4
CONNECT ml_m4 ml_m3 BY ml_v3
CONNECT ml_m3 ml_m2 BY ml_v2
CONNECT ml_m2 ml_m1 BY ml_v1
CONNECT ml_m1 ml_p1 ml_df BY ml_ct
mlgate = STAMP ml_gate BY ml_p1

ant_metl = NET AREA RATIO ml_ml ml_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
  NET AREA RATIO ant_metl mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
  NET AREA RATIO ant_metl mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_ml_p1_m1_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p1_m2_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p1_m3_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p1_m4_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met4
        met1_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met4) * PROPERTY(met1_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met4) * PROPERTY(met1_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p1_m5_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met5
        met1_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met5) * PROPERTY(met1_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met5) * PROPERTY(met1_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_ml_p1_ml_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettpl
        met1_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met1_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettpl) * PROPERTY(met1_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettpl) * PROPERTY(met1_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p2_m1_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p2_m2_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p2_m3_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p2_m4_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met4
        met2_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met4) * PROPERTY(met2_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met4) * PROPERTY(met2_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p2_m5_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met5
        met2_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met5) * PROPERTY(met2_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met5) * PROPERTY(met2_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_ml_p2_ml_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettpl
        met2_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met2_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettpl) * PROPERTY(met2_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettpl) * PROPERTY(met2_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p3_m1_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p3_m2_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p3_m3_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p3_m4_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met4
        met3_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met4) * PROPERTY(met3_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met4) * PROPERTY(met3_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p3_m5_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met5
        met3_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met5) * PROPERTY(met3_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met5) * PROPERTY(met3_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_ml_p3_ml_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_mettpl
        met3_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met3_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettpl) * PROPERTY(met3_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettpl) * PROPERTY(met3_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p4_m1_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met1
        met4_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met1) * PROPERTY(met4_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met1) * PROPERTY(met4_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p4_m2_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met2
        met4_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met2) * PROPERTY(met4_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met2) * PROPERTY(met4_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p4_m3_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met3
        met4_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met3) * PROPERTY(met4_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met3) * PROPERTY(met4_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p4_m4_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met4
        met4_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met4) * PROPERTY(met4_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met4) * PROPERTY(met4_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p4_m5_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met5
        met4_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met5) * PROPERTY(met4_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met5) * PROPERTY(met4_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_ml_p4_ml_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_mettpl
        met4_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met4_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_mettpl) * PROPERTY(met4_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met4_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met4_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_mettpl) * PROPERTY(met4_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p5_m1_prop = DFM PROPERTY ml_m5
        met5_ANTENNADIFFAREA_met1
        met5_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met1) * PROPERTY(met5_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met1) * PROPERTY(met5_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p5_m2_prop = DFM PROPERTY ml_m5
        met5_ANTENNADIFFAREA_met2
        met5_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met2) * PROPERTY(met5_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met2) * PROPERTY(met5_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p5_m3_prop = DFM PROPERTY ml_m5
        met5_ANTENNADIFFAREA_met3
        met5_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met3) * PROPERTY(met5_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met3) * PROPERTY(met5_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p5_m4_prop = DFM PROPERTY ml_m5
        met5_ANTENNADIFFAREA_met4
        met5_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met4) * PROPERTY(met5_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met4) * PROPERTY(met5_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p5_m5_prop = DFM PROPERTY ml_m5
        met5_ANTENNADIFFAREA_met5
        met5_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_met5) * PROPERTY(met5_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_met5) * PROPERTY(met5_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_ml_p5_ml_prop = DFM PROPERTY ml_m5
        met5_ANTENNADIFFAREA_mettpl
        met5_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met5_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met5_ANTENNAGATEAREA_mettpl) * PROPERTY(met5_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met5_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met5_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met5_ANTENNADIFFAREA_mettpl) * PROPERTY(met5_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pl_m1_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met1
        mettpl_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met1) * PROPERTY(mettpl_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met1) * PROPERTY(mettpl_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pl_m2_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met2
        mettpl_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met2) * PROPERTY(mettpl_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met2) * PROPERTY(mettpl_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pl_m3_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met3
        mettpl_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met3) * PROPERTY(mettpl_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met3) * PROPERTY(mettpl_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_pl_m4_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met4
        mettpl_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met4) * PROPERTY(mettpl_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met4) * PROPERTY(mettpl_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_pl_m5_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met5
        mettpl_ANTENNAGATEAREA_met5
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met5) * PROPERTY(mettpl_ANTENNAGATEAREA_met5,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met5) * PROPERTY(mettpl_ANTENNADIFFAREA_met5,val)]

XFAB_BBOX_ml_pl_ml_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettpl
        mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettpl_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettpl) * PROPERTY(mettpl_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettpl) * PROPERTY(mettpl_ANTENNADIFFAREA_mettpl,val)]

mlgate_bb = COPY mlgate
R1MLP1_a = DFM PROPERTY mlgate_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop XFAB_BBOX_ml_p1_m4_prop
                      XFAB_BBOX_ml_p1_m5_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop XFAB_BBOX_ml_p2_m4_prop
                      XFAB_BBOX_ml_p2_m5_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop XFAB_BBOX_ml_p3_m4_prop
                      XFAB_BBOX_ml_p3_m5_prop XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_p4_m1_prop XFAB_BBOX_ml_p4_m2_prop XFAB_BBOX_ml_p4_m3_prop XFAB_BBOX_ml_p4_m4_prop
                      XFAB_BBOX_ml_p4_m5_prop XFAB_BBOX_ml_p4_ml_prop
                      XFAB_BBOX_ml_p5_m1_prop XFAB_BBOX_ml_p5_m2_prop XFAB_BBOX_ml_p5_m3_prop XFAB_BBOX_ml_p5_m4_prop
                      XFAB_BBOX_ml_p5_m5_prop XFAB_BBOX_ml_p5_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop XFAB_BBOX_ml_pl_m4_prop
                      XFAB_BBOX_ml_pl_m5_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p5_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p5_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p5_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p5_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p5_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MLP1 = DFM PROPERTY mlgate_bb
                      R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
        copy R1MLP1
        DFM RDB R1MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 = DFM PROPERTY mlgate_bb
                          R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > VAR_RxMLP1
        [ratio = 0 ] > VAR_RxMLP1

ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
        copy ADD_R1MLP1
        DFM RDB ADD_R1MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_metl_bb = COPY ant_metl
R2MLP1_a = DFM PROPERTY ant_metl_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop XFAB_BBOX_ml_p1_m4_prop
                      XFAB_BBOX_ml_p1_m5_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop XFAB_BBOX_ml_p2_m4_prop
                      XFAB_BBOX_ml_p2_m5_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop XFAB_BBOX_ml_p3_m4_prop
                      XFAB_BBOX_ml_p3_m5_prop XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_p4_m1_prop XFAB_BBOX_ml_p4_m2_prop XFAB_BBOX_ml_p4_m3_prop XFAB_BBOX_ml_p4_m4_prop
                      XFAB_BBOX_ml_p4_m5_prop XFAB_BBOX_ml_p4_ml_prop
                      XFAB_BBOX_ml_p5_m1_prop XFAB_BBOX_ml_p5_m2_prop XFAB_BBOX_ml_p5_m3_prop XFAB_BBOX_ml_p5_m4_prop
                      XFAB_BBOX_ml_p5_m5_prop XFAB_BBOX_ml_p5_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop XFAB_BBOX_ml_pl_m4_prop
                      XFAB_BBOX_ml_pl_m5_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p5_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p5_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p5_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p5_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p5_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p5_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m5_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p5_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p5_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p5_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p5_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p5_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p5_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p5_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m5_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 200

R2MLP1 = DFM PROPERTY ant_metl_bb
                      R2MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(metal output)
        copy R2MLP1
        DFM RDB R2MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MLP1 = DFM PROPERTY ant_metl_bb
                          R2MLP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MLP1_a,ratio_a)] > VAR_RxMLP1
            [ratio = 0 ] > VAR_RxMLP1

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(metal output)
        copy ADD_R2MLP1
        DFM RDB ADD_R2MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ELSE
#IFDEF MIDMET

a_vial = copy viatpl_ac
CONNECT a_vial mt_mt
ant_vial = NET AREA RATIO a_vial mt_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
  NET AREA RATIO ant_vial mtgate > 20
      [AREA(ant_vial) / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
  NET AREA RATIO ant_vial mtgate > VAR_R1VL
      [AREA(ant_vial) / AREA(mtgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mtgate
}
#ENDIF
#ENDIF

#IFDEF METAL4

#IFDEF XFAB_IP_BBOX_ANTENNA
vlgate_bb = COPY mtgate
R1VL_a_a = DFM PROPERTY vlgate_bb mtgate ant_vial
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_m4_prop
                      XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_m4_prop
                      XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_m4_prop
                      XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_p4_m1_prop XFAB_BBOX_mt_p4_m2_prop XFAB_BBOX_mt_p4_m3_prop XFAB_BBOX_mt_p4_m4_prop
                      XFAB_BBOX_mt_p4_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_m4_prop
                      XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_vial_bb = COPY ant_vial
R1VL_b_a = DFM PROPERTY ant_vial_bb mtgate ant_vial
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_m4_prop
                      XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_m4_prop
                      XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_m4_prop
                      XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_p4_m1_prop XFAB_BBOX_mt_p4_m2_prop XFAB_BBOX_mt_p4_m3_prop XFAB_BBOX_mt_p4_m4_prop
                      XFAB_BBOX_mt_p4_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_m4_prop
                      XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p4_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
        copy R1VL_a
        copy R1VL_b
        DFM RDB R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB R1VL_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
        copy ADD_R1VL_a
        copy ADD_R1VL_b
        DFM RDB ADD_R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VL_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF


ml_df    = copy mt_df
ml_p1    = copy mt_p1
ml_ct    = copy mt_ct
ml_m1    = copy mt_m1
ml_v1    = copy mt_v1
ml_m2    = copy mt_m2
ml_v2    = copy mt_v2
ml_m3    = copy mt_m3
ml_v3    = copy mt_v3
ml_m4    = copy mt_m4
ml_vt    = copy mt_vt
ml_mt    = copy mt_mt
ml_vl    = viatpl_ac OR emptlay
ml_ml    = mettpl OR emptlay
ml_gate  = copy mt_gate

CONNECT ml_ml ml_mt BY ml_vl
CONNECT ml_mt ml_m4 BY ml_vt
CONNECT ml_m4 ml_m3 BY ml_v3
CONNECT ml_m3 ml_m2 BY ml_v2
CONNECT ml_m2 ml_m1 BY ml_v1
CONNECT ml_m1 ml_p1 ml_df BY ml_ct
mlgate = STAMP ml_gate BY ml_p1

ant_metl = NET AREA RATIO ml_ml ml_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
  NET AREA RATIO ant_metl mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
  NET AREA RATIO ant_metl mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_ml_p1_m1_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p1_m2_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p1_m3_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p1_m4_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met4
        met1_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met4) * PROPERTY(met1_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met4) * PROPERTY(met1_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p1_mt_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettp
        met1_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettp) * PROPERTY(met1_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettp) * PROPERTY(met1_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p1_ml_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettpl
        met1_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met1_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettpl) * PROPERTY(met1_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettpl) * PROPERTY(met1_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p2_m1_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p2_m2_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p2_m3_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p2_m4_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met4
        met2_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met4) * PROPERTY(met2_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met4) * PROPERTY(met2_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p2_mt_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettp
        met2_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettp) * PROPERTY(met2_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettp) * PROPERTY(met2_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p2_ml_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettpl
        met2_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met2_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettpl) * PROPERTY(met2_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettpl) * PROPERTY(met2_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p3_m1_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p3_m2_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p3_m3_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p3_m4_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met4
        met3_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met4) * PROPERTY(met3_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met4) * PROPERTY(met3_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p3_mt_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_mettp
        met3_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettp) * PROPERTY(met3_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettp) * PROPERTY(met3_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p3_ml_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_mettpl
        met3_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met3_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettpl) * PROPERTY(met3_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettpl) * PROPERTY(met3_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p4_m1_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met1
        met4_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met1) * PROPERTY(met4_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met1) * PROPERTY(met4_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p4_m2_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met2
        met4_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met2) * PROPERTY(met4_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met2) * PROPERTY(met4_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p4_m3_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met3
        met4_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met3) * PROPERTY(met4_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met3) * PROPERTY(met4_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p4_m4_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met4
        met4_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met4) * PROPERTY(met4_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met4) * PROPERTY(met4_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p4_mt_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_mettp
        met4_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_mettp) * PROPERTY(met4_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_mettp) * PROPERTY(met4_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p4_ml_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_mettpl
        met4_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met4_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_mettpl) * PROPERTY(met4_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met4_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met4_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_mettpl) * PROPERTY(met4_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pt_m1_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met1
        mettp_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met1) * PROPERTY(mettp_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met1) * PROPERTY(mettp_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pt_m2_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met2
        mettp_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met2) * PROPERTY(mettp_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met2) * PROPERTY(mettp_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pt_m3_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met3
        mettp_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met3) * PROPERTY(mettp_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met3) * PROPERTY(mettp_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_pt_m4_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met4
        mettp_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met4) * PROPERTY(mettp_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met4) * PROPERTY(mettp_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_pt_mt_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_mettp
        mettp_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettp) * PROPERTY(mettp_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettp) * PROPERTY(mettp_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_pt_ml_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_mettpl
        mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettp_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettpl) * PROPERTY(mettp_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettpl) * PROPERTY(mettp_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pl_m1_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met1
        mettpl_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met1) * PROPERTY(mettpl_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met1) * PROPERTY(mettpl_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pl_m2_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met2
        mettpl_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met2) * PROPERTY(mettpl_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met2) * PROPERTY(mettpl_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pl_m3_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met3
        mettpl_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met3) * PROPERTY(mettpl_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met3) * PROPERTY(mettpl_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_pl_m4_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met4
        mettpl_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met4) * PROPERTY(mettpl_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met4) * PROPERTY(mettpl_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_pl_mt_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettp
        mettpl_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettp) * PROPERTY(mettpl_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettp) * PROPERTY(mettpl_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_pl_ml_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettpl
        mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettpl_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettpl) * PROPERTY(mettpl_ANTENNAGATEAREA_mettpl,val)]
                [box_mett_area = !!AREA(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettpl) * PROPERTY(mettpl_ANTENNADIFFAREA_mettpl,val)]

mlgate_bb = COPY mlgate
R1MLP1_a = DFM PROPERTY mlgate_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop XFAB_BBOX_ml_p1_m4_prop
                      XFAB_BBOX_ml_p1_mt_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop XFAB_BBOX_ml_p2_m4_prop
                      XFAB_BBOX_ml_p2_mt_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop XFAB_BBOX_ml_p3_m4_prop
                      XFAB_BBOX_ml_p3_mt_prop XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_p4_m1_prop XFAB_BBOX_ml_p4_m2_prop XFAB_BBOX_ml_p4_m3_prop XFAB_BBOX_ml_p4_m4_prop
                      XFAB_BBOX_ml_p4_mt_prop XFAB_BBOX_ml_p4_ml_prop
                      XFAB_BBOX_ml_pt_m1_prop XFAB_BBOX_ml_pt_m2_prop XFAB_BBOX_ml_pt_m3_prop XFAB_BBOX_ml_pt_m4_prop
                      XFAB_BBOX_ml_pt_mt_prop XFAB_BBOX_ml_pt_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop XFAB_BBOX_ml_pl_m4_prop
                      XFAB_BBOX_ml_pl_mt_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MLP1 = DFM PROPERTY mlgate_bb
                      R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
        copy R1MLP1
        DFM RDB R1MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 = DFM PROPERTY mlgate_bb
                          R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > VAR_RxMLP1
        [ratio = 0 ] > VAR_RxMLP1

ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
        copy ADD_R1MLP1
        DFM RDB ADD_R1MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_metl_bb = COPY ant_metl
R2MLP1_a = DFM PROPERTY ant_metl_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop XFAB_BBOX_ml_p1_m4_prop
                      XFAB_BBOX_ml_p1_mt_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop XFAB_BBOX_ml_p2_m4_prop
                      XFAB_BBOX_ml_p2_mt_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop XFAB_BBOX_ml_p3_m4_prop
                      XFAB_BBOX_ml_p3_mt_prop XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_p4_m1_prop XFAB_BBOX_ml_p4_m2_prop XFAB_BBOX_ml_p4_m3_prop XFAB_BBOX_ml_p4_m4_prop
                      XFAB_BBOX_ml_p4_mt_prop XFAB_BBOX_ml_p4_ml_prop
                      XFAB_BBOX_ml_pt_m1_prop XFAB_BBOX_ml_pt_m2_prop XFAB_BBOX_ml_pt_m3_prop XFAB_BBOX_ml_pt_m4_prop
                      XFAB_BBOX_ml_pt_mt_prop XFAB_BBOX_ml_pt_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop XFAB_BBOX_ml_pl_m4_prop
                      XFAB_BBOX_ml_pl_mt_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 200

R2MLP1 = DFM PROPERTY ant_metl_bb
                      R2MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(metal output)
        copy R2MLP1
        DFM RDB R2MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MLP1 = DFM PROPERTY ant_metl_bb
                          R2MLP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MLP1_a,ratio_a)] > VAR_RxMLP1
            [ratio = 0 ] > VAR_RxMLP1

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(metal output)
        copy ADD_R2MLP1
        DFM RDB ADD_R2MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ELSE
#IFDEF METAL3

#IFDEF XFAB_IP_BBOX_ANTENNA
vlgate_bb = COPY mtgate
R1VL_a_a = DFM PROPERTY vlgate_bb mtgate ant_vial
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_vial_bb = COPY ant_vial
R1VL_b_a = DFM PROPERTY ant_vial_bb mtgate ant_vial
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_m3_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_m3_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_p3_m1_prop XFAB_BBOX_mt_p3_m2_prop XFAB_BBOX_mt_p3_m3_prop XFAB_BBOX_mt_p3_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_m3_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
        copy R1VL_a
        copy R1VL_b
        DFM RDB R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB R1VL_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
        copy ADD_R1VL_a
        copy ADD_R1VL_b
        DFM RDB ADD_R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VL_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

ml_df    = copy mt_df
ml_p1    = copy mt_p1
ml_ct    = copy mt_ct
ml_m1    = copy mt_m1
ml_v1    = copy mt_v1
ml_m2    = copy mt_m2
ml_v2    = copy mt_v2
ml_m3    = copy mt_m3
ml_vt    = copy mt_vt
ml_mt    = copy mt_mt
ml_vl    = viatpl_ac OR emptlay
ml_ml    = mettpl OR emptlay
ml_gate  = copy mt_gate

CONNECT ml_ml ml_mt BY ml_vl
CONNECT ml_mt ml_m3 BY ml_vt
CONNECT ml_m3 ml_m2 BY ml_v2
CONNECT ml_m2 ml_m1 BY ml_v1
CONNECT ml_m1 ml_p1 ml_df BY ml_ct
mlgate = STAMP ml_gate BY ml_p1

ant_metl = NET AREA RATIO ml_ml ml_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
  NET AREA RATIO ant_metl mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
  NET AREA RATIO ant_metl mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_ml_p1_m1_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p1_m2_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p1_m3_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p1_mt_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettp
        met1_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettp) * PROPERTY(met1_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettp) * PROPERTY(met1_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p1_ml_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettpl
        met1_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met1_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettpl) * PROPERTY(met1_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettpl) * PROPERTY(met1_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p2_m1_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p2_m2_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p2_m3_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p2_mt_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettp
        met2_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettp) * PROPERTY(met2_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettp) * PROPERTY(met2_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p2_ml_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettpl
        met2_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met2_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettpl) * PROPERTY(met2_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettpl) * PROPERTY(met2_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p3_m1_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p3_m2_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p3_m3_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p3_mt_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_mettp
        met3_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettp) * PROPERTY(met3_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettp) * PROPERTY(met3_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p3_ml_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_mettpl
        met3_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met3_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettpl) * PROPERTY(met3_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettpl) * PROPERTY(met3_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pt_m1_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met1
        mettp_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met1) * PROPERTY(mettp_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met1) * PROPERTY(mettp_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pt_m2_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met2
        mettp_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met2) * PROPERTY(mettp_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met2) * PROPERTY(mettp_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pt_m3_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met3
        mettp_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met3) * PROPERTY(mettp_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met3) * PROPERTY(mettp_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_pt_mt_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_mettp
        mettp_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettp) * PROPERTY(mettp_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettp) * PROPERTY(mettp_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_pt_ml_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_mettpl
        mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettp_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettpl) * PROPERTY(mettp_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettpl) * PROPERTY(mettp_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pl_m1_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met1
        mettpl_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met1) * PROPERTY(mettpl_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met1) * PROPERTY(mettpl_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pl_m2_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met2
        mettpl_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met2) * PROPERTY(mettpl_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met2) * PROPERTY(mettpl_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pl_m3_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met3
        mettpl_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met3) * PROPERTY(mettpl_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met3) * PROPERTY(mettpl_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_pl_mt_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettp
        mettpl_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettp) * PROPERTY(mettpl_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettp) * PROPERTY(mettpl_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_pl_ml_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettpl
        mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettpl_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettpl) * PROPERTY(mettpl_ANTENNAGATEAREA_mettpl,val)]
                [box_mett_area = !!AREA(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettpl) * PROPERTY(mettpl_ANTENNADIFFAREA_mettpl,val)]

mlgate_bb = COPY mlgate
R1MLP1_a = DFM PROPERTY mlgate_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop
                      XFAB_BBOX_ml_p1_mt_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop
                      XFAB_BBOX_ml_p2_mt_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop
                      XFAB_BBOX_ml_p3_mt_prop XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_pt_m1_prop XFAB_BBOX_ml_pt_m2_prop XFAB_BBOX_ml_pt_m3_prop
                      XFAB_BBOX_ml_pt_mt_prop XFAB_BBOX_ml_pt_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop
                      XFAB_BBOX_ml_pl_mt_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MLP1 = DFM PROPERTY mlgate_bb
                      R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
        copy R1MLP1
        DFM RDB R1MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 = DFM PROPERTY mlgate_bb
                          R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > VAR_RxMLP1
        [ratio = 0 ] > VAR_RxMLP1

ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
        copy ADD_R1MLP1
        DFM RDB ADD_R1MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_metl_bb = COPY ant_metl
R2MLP1_a = DFM PROPERTY ant_metl_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop
                      XFAB_BBOX_ml_p1_mt_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop
                      XFAB_BBOX_ml_p2_mt_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop
                      XFAB_BBOX_ml_p3_mt_prop XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_pt_m1_prop XFAB_BBOX_ml_pt_m2_prop XFAB_BBOX_ml_pt_m3_prop
                      XFAB_BBOX_ml_pt_mt_prop XFAB_BBOX_ml_pt_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop
                      XFAB_BBOX_ml_pl_mt_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 200

R2MLP1 = DFM PROPERTY ant_metl_bb
                      R2MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(metal output)
        copy R2MLP1
        DFM RDB R2MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MLP1 = DFM PROPERTY ant_metl_bb
                          R2MLP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MLP1_a,ratio_a)] > VAR_RxMLP1
            [ratio = 0 ] > VAR_RxMLP1

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(metal output)
        copy ADD_R2MLP1
        DFM RDB ADD_R2MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ELSE

#IFDEF XFAB_IP_BBOX_ANTENNA
vlgate_bb = COPY mtgate
R1VL_a_a = DFM PROPERTY vlgate_bb mtgate ant_vial
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_vial_bb = COPY ant_vial
R1VL_b_a = DFM PROPERTY ant_vial_bb mtgate ant_vial
                      XFAB_BBOX_mt_p1_m1_prop XFAB_BBOX_mt_p1_m2_prop XFAB_BBOX_mt_p1_mt_prop
                      XFAB_BBOX_mt_p2_m1_prop XFAB_BBOX_mt_p2_m2_prop XFAB_BBOX_mt_p2_mt_prop
                      XFAB_BBOX_mt_pt_m1_prop XFAB_BBOX_mt_pt_m2_prop XFAB_BBOX_mt_pt_mt_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(mtgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_vial_area) + PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_mt_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p1_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_p2_mt_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_mt_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_mt_pt_mt_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
        copy R1VL_a
        copy R1VL_b
        DFM RDB R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB R1VL_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
        copy ADD_R1VL_a
        copy ADD_R1VL_b
        DFM RDB ADD_R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VL_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

ml_df    = copy mt_df
ml_p1    = copy mt_p1
ml_ct    = copy mt_ct
ml_m1    = copy mt_m1
ml_v1    = copy mt_v1
ml_m2    = copy mt_m2
ml_vt    = copy mt_vt
ml_mt    = copy mt_mt
ml_vl    = viatpl_ac OR emptlay
ml_ml    = mettpl OR emptlay
ml_gate  = copy mt_gate

CONNECT ml_ml ml_mt BY ml_vl
CONNECT ml_mt ml_m2 BY ml_vt
CONNECT ml_m2 ml_m1 BY ml_v1
CONNECT ml_m1 ml_p1 ml_df BY ml_ct
mlgate = STAMP ml_gate BY ml_p1

ant_metl = NET AREA RATIO ml_ml ml_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
  NET AREA RATIO ant_metl mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
  NET AREA RATIO ant_metl mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_ml_p1_m1_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p1_m2_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p1_mt_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettp
        met1_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettp) * PROPERTY(met1_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettp) * PROPERTY(met1_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p1_ml_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettpl
        met1_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met1_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettpl) * PROPERTY(met1_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettpl) * PROPERTY(met1_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p2_m1_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p2_m2_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p2_mt_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettp
        met2_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettp) * PROPERTY(met2_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettp) * PROPERTY(met2_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_p2_ml_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettpl
        met2_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met2_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettpl) * PROPERTY(met2_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettpl) * PROPERTY(met2_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pt_m1_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met1
        mettp_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met1) * PROPERTY(mettp_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met1) * PROPERTY(mettp_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pt_m2_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_met2
        mettp_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_met2) * PROPERTY(mettp_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_met2) * PROPERTY(mettp_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pt_mt_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_mettp
        mettp_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettp) * PROPERTY(mettp_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettp) * PROPERTY(mettp_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_pt_ml_prop = DFM PROPERTY ml_mt
        mettp_ANTENNADIFFAREA_mettpl
        mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettp_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettp_ANTENNAGATEAREA_mettpl) * PROPERTY(mettp_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettp_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettp_ANTENNADIFFAREA_mettpl) * PROPERTY(mettp_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pl_m1_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met1
        mettpl_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met1) * PROPERTY(mettpl_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met1) * PROPERTY(mettpl_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pl_m2_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met2
        mettpl_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met2) * PROPERTY(mettpl_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met2) * PROPERTY(mettpl_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pl_mt_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettp
        mettpl_ANTENNAGATEAREA_mettp
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettp) * PROPERTY(mettpl_ANTENNAGATEAREA_mettp,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettp) * PROPERTY(mettpl_ANTENNADIFFAREA_mettp,val)]

XFAB_BBOX_ml_pl_ml_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettpl
        mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettpl_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettpl) * PROPERTY(mettpl_ANTENNAGATEAREA_mettpl,val)]
                [box_mett_area = !!AREA(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettpl) * PROPERTY(mettpl_ANTENNADIFFAREA_mettpl,val)]

mlgate_bb = COPY mlgate
R1MLP1_a = DFM PROPERTY mlgate_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_mt_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_mt_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_pt_m1_prop XFAB_BBOX_ml_pt_m2_prop XFAB_BBOX_ml_pt_mt_prop XFAB_BBOX_ml_pt_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_mt_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MLP1 = DFM PROPERTY mlgate_bb
                      R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
        copy R1MLP1
        DFM RDB R1MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 = DFM PROPERTY mlgate_bb
                          R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > VAR_RxMLP1
        [ratio = 0 ] > VAR_RxMLP1

ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
        copy ADD_R1MLP1
        DFM RDB ADD_R1MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_metl_bb = COPY ant_metl
R2MLP1_a = DFM PROPERTY ant_metl_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_mt_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_mt_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_pt_m1_prop XFAB_BBOX_ml_pt_m2_prop XFAB_BBOX_ml_pt_mt_prop XFAB_BBOX_ml_pt_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_mt_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pt_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pt_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_mt_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 200

R2MLP1 = DFM PROPERTY ant_metl_bb
                      R2MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(metal output)
        copy R2MLP1
        DFM RDB R2MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MLP1 = DFM PROPERTY ant_metl_bb
                          R2MLP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MLP1_a,ratio_a)] > VAR_RxMLP1
            [ratio = 0 ] > VAR_RxMLP1

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(metal output)
        copy ADD_R2MLP1
        DFM RDB ADD_R2MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ENDIF
#ENDIF

#ELSE
#IFDEF METAL4

a_vial = copy viatpl_ac
CONNECT a_vial m4_m4
ant_vial = NET AREA RATIO a_vial m4_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
  NET AREA RATIO ant_vial m4gate > 20
      [AREA(ant_vial) / AREA(m4gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m4gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
  NET AREA RATIO ant_vial m4gate > VAR_R1VL
      [AREA(ant_vial) / AREA(m4gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m4gate
}
#ENDIF
#ELSE

vlgate_bb = COPY m4gate
R1VL_a_a = DFM PROPERTY vlgate_bb m4gate ant_vial
                      XFAB_BBOX_m4_p1_m1_prop XFAB_BBOX_m4_p1_m2_prop XFAB_BBOX_m4_p1_m3_prop XFAB_BBOX_m4_p1_m4_prop
                      XFAB_BBOX_m4_p2_m1_prop XFAB_BBOX_m4_p2_m2_prop XFAB_BBOX_m4_p2_m3_prop XFAB_BBOX_m4_p2_m4_prop
                      XFAB_BBOX_m4_p3_m1_prop XFAB_BBOX_m4_p3_m2_prop XFAB_BBOX_m4_p3_m3_prop XFAB_BBOX_m4_p3_m4_prop
                      XFAB_BBOX_m4_p4_m1_prop XFAB_BBOX_m4_p4_m2_prop XFAB_BBOX_m4_p4_m3_prop XFAB_BBOX_m4_p4_m4_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(m4gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_vial_bb = COPY ant_vial
R1VL_b_a = DFM PROPERTY ant_vial_bb m4gate ant_vial
                      XFAB_BBOX_m4_p1_m1_prop XFAB_BBOX_m4_p1_m2_prop XFAB_BBOX_m4_p1_m3_prop XFAB_BBOX_m4_p1_m4_prop
                      XFAB_BBOX_m4_p2_m1_prop XFAB_BBOX_m4_p2_m2_prop XFAB_BBOX_m4_p2_m3_prop XFAB_BBOX_m4_p2_m4_prop
                      XFAB_BBOX_m4_p3_m1_prop XFAB_BBOX_m4_p3_m2_prop XFAB_BBOX_m4_p3_m3_prop XFAB_BBOX_m4_p3_m4_prop
                      XFAB_BBOX_m4_p4_m1_prop XFAB_BBOX_m4_p4_m2_prop XFAB_BBOX_m4_p4_m3_prop XFAB_BBOX_m4_p4_m4_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(m4gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m4_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m4_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m4_p4_m4_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
        copy R1VL_a
        copy R1VL_b
        DFM RDB R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB R1VL_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
        copy ADD_R1VL_a
        copy ADD_R1VL_b
        DFM RDB ADD_R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VL_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

ml_df    = copy m4_df
ml_p1    = copy m4_p1
ml_ct    = copy m4_ct
ml_m1    = copy m4_m1
ml_v1    = copy m4_v1
ml_m2    = copy m4_m2
ml_v2    = copy m4_v2
ml_m3    = copy m4_m3
ml_v3    = copy m4_v3
ml_m4    = copy m4_m4
ml_vl    = viatpl_ac OR emptlay
ml_ml    = mettpl OR emptlay
ml_gate  = copy m4_gate

CONNECT ml_ml ml_m4 BY ml_vl
CONNECT ml_m4 ml_m3 BY ml_v3
CONNECT ml_m3 ml_m2 BY ml_v2
CONNECT ml_m2 ml_m1 BY ml_v1
CONNECT ml_m1 ml_p1 ml_df BY ml_ct
mlgate = STAMP ml_gate BY ml_p1

ant_metl = NET AREA RATIO ml_ml ml_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
  NET AREA RATIO ant_metl mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
  NET AREA RATIO ant_metl mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_ml_p1_m1_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p1_m2_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p1_m3_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p1_m4_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met4
        met1_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met4) * PROPERTY(met1_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met4) * PROPERTY(met1_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p1_ml_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettpl
        met1_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met1_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettpl) * PROPERTY(met1_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettpl) * PROPERTY(met1_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p2_m1_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p2_m2_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p2_m3_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p2_m4_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met4
        met2_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met4) * PROPERTY(met2_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met4) * PROPERTY(met2_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p2_ml_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettpl
        met2_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met2_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettpl) * PROPERTY(met2_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettpl) * PROPERTY(met2_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p3_m1_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p3_m2_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p3_m3_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p3_m4_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met4
        met3_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met4) * PROPERTY(met3_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met4) * PROPERTY(met3_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p3_ml_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_mettpl
        met3_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met3_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettpl) * PROPERTY(met3_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettpl) * PROPERTY(met3_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p4_m1_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met1
        met4_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met1) * PROPERTY(met4_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met1) * PROPERTY(met4_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p4_m2_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met2
        met4_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met2) * PROPERTY(met4_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met2) * PROPERTY(met4_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p4_m3_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met3
        met4_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met3) * PROPERTY(met4_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met3) * PROPERTY(met4_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p4_m4_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_met4
        met4_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_met4) * PROPERTY(met4_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_met4) * PROPERTY(met4_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_p4_ml_prop = DFM PROPERTY ml_m4
        met4_ANTENNADIFFAREA_mettpl
        met4_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met4_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met4_ANTENNAGATEAREA_mettpl) * PROPERTY(met4_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met4_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met4_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met4_ANTENNADIFFAREA_mettpl) * PROPERTY(met4_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pl_m1_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met1
        mettpl_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met1) * PROPERTY(mettpl_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met1) * PROPERTY(mettpl_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pl_m2_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met2
        mettpl_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met2) * PROPERTY(mettpl_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met2) * PROPERTY(mettpl_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pl_m3_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met3
        mettpl_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met3) * PROPERTY(mettpl_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met3) * PROPERTY(mettpl_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_pl_m4_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met4
        mettpl_ANTENNAGATEAREA_met4
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met4) * PROPERTY(mettpl_ANTENNAGATEAREA_met4,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met4) * PROPERTY(mettpl_ANTENNADIFFAREA_met4,val)]

XFAB_BBOX_ml_pl_ml_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettpl
        mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettpl_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettpl) * PROPERTY(mettpl_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettpl) * PROPERTY(mettpl_ANTENNADIFFAREA_mettpl,val)]

mlgate_bb = COPY mlgate
R1MLP1_a = DFM PROPERTY mlgate_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop XFAB_BBOX_ml_p1_m4_prop
                      XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop XFAB_BBOX_ml_p2_m4_prop
                      XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop XFAB_BBOX_ml_p3_m4_prop
                      XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_p4_m1_prop XFAB_BBOX_ml_p4_m2_prop XFAB_BBOX_ml_p4_m3_prop XFAB_BBOX_ml_p4_m4_prop
                      XFAB_BBOX_ml_p4_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop XFAB_BBOX_ml_pl_m4_prop
                      XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MLP1 = DFM PROPERTY mlgate_bb
                      R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
        copy R1MLP1
        DFM RDB R1MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 = DFM PROPERTY mlgate_bb
                          R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > VAR_RxMLP1
        [ratio = 0 ] > VAR_RxMLP1

ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
        copy ADD_R1MLP1
        DFM RDB ADD_R1MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_metl_bb = COPY ant_metl
R2MLP1_a = DFM PROPERTY ant_metl_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop XFAB_BBOX_ml_p1_m4_prop
                      XFAB_BBOX_ml_p1_ml_prop 
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop XFAB_BBOX_ml_p2_m4_prop
                      XFAB_BBOX_ml_p2_ml_prop 
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop XFAB_BBOX_ml_p3_m4_prop
                      XFAB_BBOX_ml_p3_ml_prop 
                      XFAB_BBOX_ml_p4_m1_prop XFAB_BBOX_ml_p4_m2_prop XFAB_BBOX_ml_p4_m3_prop XFAB_BBOX_ml_p4_m4_prop
                      XFAB_BBOX_ml_p4_ml_prop 
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop XFAB_BBOX_ml_pl_m4_prop
                      XFAB_BBOX_ml_pl_ml_prop 
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area) 
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area) 
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area) 
                       + PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_gate_area) 
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio)) 
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio)) 
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio)) 
                   + (PROPERTY(XFAB_BBOX_ml_p4_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p4_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p4_ml_prop,box_dio)) 
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m4_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 200

R2MLP1 = DFM PROPERTY ant_metl_bb
                      R2MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(metal output)
        copy R2MLP1
        DFM RDB R2MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MLP1 = DFM PROPERTY ant_metl_bb
                          R2MLP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MLP1_a,ratio_a)] > VAR_RxMLP1
            [ratio = 0 ] > VAR_RxMLP1

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(metal output)
        copy ADD_R2MLP1
        DFM RDB ADD_R2MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ELSE
#IFDEF METAL3

a_vial = copy viatpl_ac
CONNECT a_vial m3_m3
ant_vial = NET AREA RATIO a_vial m3_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
  NET AREA RATIO ant_vial m3gate > 20
      [AREA(ant_vial) / AREA(m3gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m3gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
  NET AREA RATIO ant_vial m3gate > VAR_R1VL
      [AREA(ant_vial) / AREA(m3gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m3gate
}
#ENDIF
#ELSE

vlgate_bb = COPY m3gate
R1VL_a_a = DFM PROPERTY vlgate_bb m3gate ant_vial
                      XFAB_BBOX_m3_p1_m1_prop XFAB_BBOX_m3_p1_m2_prop XFAB_BBOX_m3_p1_m3_prop 
                      XFAB_BBOX_m3_p2_m1_prop XFAB_BBOX_m3_p2_m2_prop XFAB_BBOX_m3_p2_m3_prop
                      XFAB_BBOX_m3_p3_m1_prop XFAB_BBOX_m3_p3_m2_prop XFAB_BBOX_m3_p3_m3_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(m3gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_vial_bb = COPY ant_vial
R1VL_b_a = DFM PROPERTY ant_vial_bb m3gate ant_vial
                      XFAB_BBOX_m3_p1_m1_prop XFAB_BBOX_m3_p1_m2_prop XFAB_BBOX_m3_p1_m3_prop 
                      XFAB_BBOX_m3_p2_m1_prop XFAB_BBOX_m3_p2_m2_prop XFAB_BBOX_m3_p2_m3_prop
                      XFAB_BBOX_m3_p3_m1_prop XFAB_BBOX_m3_p3_m2_prop XFAB_BBOX_m3_p3_m3_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(m3gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_vial_area)
                       + PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m3_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p1_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p2_m3_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m3_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m3_p3_m3_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
        copy R1VL_a
        copy R1VL_b
        DFM RDB R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB R1VL_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
        copy ADD_R1VL_a
        copy ADD_R1VL_b
        DFM RDB ADD_R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VL_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

ml_df    = copy m3_df
ml_p1    = copy m3_p1
ml_ct    = copy m3_ct
ml_m1    = copy m3_m1
ml_v1    = copy m3_v1
ml_m2    = copy m3_m2
ml_v2    = copy m3_v2
ml_m3    = copy m3_m3
ml_vl    = viatpl_ac OR emptlay
ml_ml    = mettpl OR emptlay
ml_gate  = copy m3_gate

CONNECT ml_ml ml_m3 BY ml_vl
CONNECT ml_m3 ml_m2 BY ml_v2
CONNECT ml_m2 ml_m1 BY ml_v1
CONNECT ml_m1 ml_p1 ml_df BY ml_ct
mlgate = STAMP ml_gate BY ml_p1

ant_metl = NET AREA RATIO ml_ml ml_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
  NET AREA RATIO ant_metl mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
  NET AREA RATIO ant_metl mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_ml_p1_m1_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p1_m2_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p1_m3_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met3
        met1_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met3) * PROPERTY(met1_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met3) * PROPERTY(met1_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p1_ml_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettpl
        met1_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met1_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettpl) * PROPERTY(met1_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettpl) * PROPERTY(met1_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p2_m1_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p2_m2_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p2_m3_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met3
        met2_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met3) * PROPERTY(met2_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met3) * PROPERTY(met2_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p2_ml_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettpl
        met2_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met2_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettpl) * PROPERTY(met2_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettpl) * PROPERTY(met2_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p3_m1_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met1
        met3_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met1) * PROPERTY(met3_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met1) * PROPERTY(met3_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p3_m2_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met2
        met3_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met2) * PROPERTY(met3_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met2) * PROPERTY(met3_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p3_m3_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_met3
        met3_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_met3) * PROPERTY(met3_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_met3) * PROPERTY(met3_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_p3_ml_prop = DFM PROPERTY ml_m3
        met3_ANTENNADIFFAREA_mettpl
        met3_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met3_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met3_ANTENNAGATEAREA_mettpl) * PROPERTY(met3_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met3_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met3_ANTENNADIFFAREA_mettpl) * PROPERTY(met3_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pl_m1_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met1
        mettpl_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met1) * PROPERTY(mettpl_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met1) * PROPERTY(mettpl_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pl_m2_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met2
        mettpl_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met2) * PROPERTY(mettpl_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met2) * PROPERTY(mettpl_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pl_m3_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met3
        mettpl_ANTENNAGATEAREA_met3
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met3) * PROPERTY(mettpl_ANTENNAGATEAREA_met3,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met3) * PROPERTY(mettpl_ANTENNADIFFAREA_met3,val)]

XFAB_BBOX_ml_pl_ml_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettpl
        mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettpl_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettpl) * PROPERTY(mettpl_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettpl) * PROPERTY(mettpl_ANTENNADIFFAREA_mettpl,val)]

mlgate_bb = COPY mlgate
R1MLP1_a = DFM PROPERTY mlgate_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MLP1 = DFM PROPERTY mlgate_bb
                      R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
        copy R1MLP1
        DFM RDB R1MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 = DFM PROPERTY mlgate_bb
                          R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > VAR_RxMLP1
        [ratio = 0 ] > VAR_RxMLP1

ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
        copy ADD_R1MLP1
        DFM RDB ADD_R1MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_metl_bb = COPY ant_metl
R2MLP1_a = DFM PROPERTY ant_metl_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_m3_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_m3_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_p3_m1_prop XFAB_BBOX_ml_p3_m2_prop XFAB_BBOX_ml_p3_m3_prop XFAB_BBOX_ml_p3_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_m3_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p3_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p3_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m3_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 200

R2MLP1 = DFM PROPERTY ant_metl_bb
                      R2MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(metal output)
        copy R2MLP1
        DFM RDB R2MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MLP1 = DFM PROPERTY ant_metl_bb
                          R2MLP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MLP1_a,ratio_a)] > VAR_RxMLP1
            [ratio = 0 ] > VAR_RxMLP1

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(metal output)
        copy ADD_R2MLP1
        DFM RDB ADD_R2MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ELSE

a_vial = copy viatpl_ac
CONNECT a_vial m2_m2
ant_vial = NET AREA RATIO a_vial m2_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
  NET AREA RATIO ant_vial m2gate > 20
      [AREA(ant_vial) / AREA(m2gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m2gate
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
  NET AREA RATIO ant_vial m2gate > VAR_R1VL
      [AREA(ant_vial) / AREA(m2gate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER m2gate
}
#ENDIF
#ELSE

vlgate_bb = COPY m2gate
R1VL_a_a = DFM PROPERTY vlgate_bb m2gate ant_vial
                      XFAB_BBOX_m2_p1_m1_prop XFAB_BBOX_m2_p1_m2_prop
                      XFAB_BBOX_m2_p2_m1_prop XFAB_BBOX_m2_p2_m2_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(m2gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > 20
        [ratio = 0 ] > 20

ant_vial_bb = COPY ant_vial
R1VL_b_a = DFM PROPERTY ant_vial_bb m2gate ant_vial
                      XFAB_BBOX_m2_p1_m1_prop XFAB_BBOX_m2_p1_m2_prop
                      XFAB_BBOX_m2_p2_m1_prop XFAB_BBOX_m2_p2_m2_prop
                      NODAL MULTI
        [area_vl = AREA(ant_vial)]
        [area_gate = AREA(m2gate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_gate_area)]
        [box_vial_area = PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_vial_area) + PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_vial_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_m2_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_m2_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_m2_p2_m2_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_vl) *
                                        (PROPERTY_REF(area_vl) + PROPERTY_REF(box_vial_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 20

R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > 20
        [ratio = 0 ] > 20

R1VL {@Maximum ratio of VIATPL area to connected GATE area ... 20
        copy R1VL_a
        copy R1VL_b
        DFM RDB R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB R1VL_b "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1VL_a = DFM PROPERTY vlgate_bb
                      R1VL_a_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_a_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL_b = DFM PROPERTY ant_vial_bb
                      R1VL_b_a OVERLAP MULTI
        [ratio = PROPERTY(R1VL_b_a,ratio_a)] > VAR_R1VL
        [ratio = 0 ] > VAR_R1VL

ADD_R1VL {@Maximum ratio of VIATPL area to connected GATE area ... ^VAR_R1VL
        copy ADD_R1VL_a
        copy ADD_R1VL_b
        DFM RDB ADD_R1VL_a "antenna.rdb" ALL CELLS
        DFM RDB ADD_R1VL_b "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

ml_df    = copy m2_df
ml_p1    = copy m2_p1
ml_ct    = copy m2_ct
ml_m1    = copy m2_m1
ml_v1    = copy m2_v1
ml_m2    = copy m2_m2
ml_vl    = viatpl_ac OR emptlay
ml_ml    = mettpl OR emptlay
ml_gate  = copy m2_gate

CONNECT ml_ml ml_m2 BY ml_vl
CONNECT ml_m2 ml_m1 BY ml_v1
CONNECT ml_m1 ml_p1 ml_df BY ml_ct
mlgate = STAMP ml_gate BY ml_p1

ant_metl = NET AREA RATIO ml_ml ml_df == 0

#IFNDEF XFAB_IP_BBOX_ANTENNA
R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
  NET AREA RATIO ant_metl mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > 200
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
  NET AREA RATIO ant_metl mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)] ACCUMULATE
      RDB "antenna.ratio" BY LAYER mlgate
}

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(mettpl output)
  NET AREA RATIO ant_metl OVER mlgate > VAR_RxMLP1
      [PERIMETER(ant_metl) * T_METTPL / AREA(mlgate)]
}
#ENDIF
#ELSE

XFAB_BBOX_ml_p1_m1_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met1
        met1_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met1) * PROPERTY(met1_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met1) * PROPERTY(met1_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p1_m2_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_met2
        met1_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_met2) * PROPERTY(met1_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_met2) * PROPERTY(met1_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p1_ml_prop = DFM PROPERTY ml_m1
        met1_ANTENNADIFFAREA_mettpl
        met1_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met1_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met1_ANTENNAGATEAREA_mettpl) * PROPERTY(met1_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met1_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met1_ANTENNADIFFAREA_mettpl) * PROPERTY(met1_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_p2_m1_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met1
        met2_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met1) * PROPERTY(met2_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met1) * PROPERTY(met2_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_p2_m2_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_met2
        met2_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_met2) * PROPERTY(met2_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_met2) * PROPERTY(met2_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_p2_ml_prop = DFM PROPERTY ml_m2
        met2_ANTENNADIFFAREA_mettpl
        met2_ANTENNAPARTIALMETALSIDEAREA_mettpl
        met2_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(met2_ANTENNAGATEAREA_mettpl) * PROPERTY(met2_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(met2_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(met2_ANTENNADIFFAREA_mettpl) * PROPERTY(met2_ANTENNADIFFAREA_mettpl,val)]

XFAB_BBOX_ml_pl_m1_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met1
        mettpl_ANTENNAGATEAREA_met1
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met1) * PROPERTY(mettpl_ANTENNAGATEAREA_met1,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met1) * PROPERTY(mettpl_ANTENNADIFFAREA_met1,val)]

XFAB_BBOX_ml_pl_m2_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_met2
        mettpl_ANTENNAGATEAREA_met2
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_met2) * PROPERTY(mettpl_ANTENNAGATEAREA_met2,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_met2) * PROPERTY(mettpl_ANTENNADIFFAREA_met2,val)]

XFAB_BBOX_ml_pl_ml_prop = DFM PROPERTY ml_ml
        mettpl_ANTENNADIFFAREA_mettpl
        mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl
        mettpl_ANTENNAGATEAREA_mettpl
        OVERLAP MULTI
                [box_gate_area = !!AREA(mettpl_ANTENNAGATEAREA_mettpl) * PROPERTY(mettpl_ANTENNAGATEAREA_mettpl,val)]
                [box_metl_area = !!AREA(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl) * PROPERTY(mettpl_ANTENNAPARTIALMETALSIDEAREA_mettpl,val)]
                [box_dio = !!AREA(mettpl_ANTENNADIFFAREA_mettpl) * PROPERTY(mettpl_ANTENNADIFFAREA_mettpl,val)]

mlgate_bb = COPY mlgate
R1MLP1_a = DFM PROPERTY mlgate_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]

R1MLP1 = DFM PROPERTY mlgate_bb
                      R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(gate output)
        copy R1MLP1
        DFM RDB R1MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R1MLP1 = DFM PROPERTY mlgate_bb
                          R1MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R1MLP1_a,ratio_a)] > VAR_RxMLP1
        [ratio = 0 ] > VAR_RxMLP1

ADD_R1MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(gate output)
        copy ADD_R1MLP1
        DFM RDB ADD_R1MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF

ant_metl_bb = COPY ant_metl
R2MLP1_a = DFM PROPERTY ant_metl_bb mlgate ant_metl
                      XFAB_BBOX_ml_p1_m1_prop XFAB_BBOX_ml_p1_m2_prop XFAB_BBOX_ml_p1_ml_prop
                      XFAB_BBOX_ml_p2_m1_prop XFAB_BBOX_ml_p2_m2_prop XFAB_BBOX_ml_p2_ml_prop
                      XFAB_BBOX_ml_pl_m1_prop XFAB_BBOX_ml_pl_m2_prop XFAB_BBOX_ml_pl_ml_prop
                      NODAL MULTI
        [area_ml = PERIMETER(ant_metl) * T_METTPL]
        [area_gate = AREA(mlgate)]
        [box_gate_area = PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_gate_area) 
                       + PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_gate_area) 
                       + PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_gate_area) + PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_gate_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_gate_area)]
        [box_metl_area = PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_metl_area) + PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_metl_area)
                       + PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_metl_area)]
        [box_dio = (((PROPERTY(XFAB_BBOX_ml_p1_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p1_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p1_ml_prop,box_dio)) 
                   + (PROPERTY(XFAB_BBOX_ml_p2_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_p2_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_p2_ml_prop,box_dio)) 
                   + (PROPERTY(XFAB_BBOX_ml_pl_m1_prop,box_dio)) + (PROPERTY(XFAB_BBOX_ml_pl_m2_prop,box_dio))
                   + (PROPERTY(XFAB_BBOX_ml_pl_ml_prop,box_dio))) > 0) ? 1 : 0]
        [ratio_a = !PROPERTY_REF(box_dio) * !!PROPERTY_REF(area_ml) *
                                        (PROPERTY_REF(area_ml) + PROPERTY_REF(box_metl_area)) /
                                        (PROPERTY_REF(area_gate) + PROPERTY_REF(box_gate_area))]
        [ratio_a = 0 ] > 200

R2MLP1 = DFM PROPERTY ant_metl_bb
                      R2MLP1_a OVERLAP MULTI
        [ratio = PROPERTY(R2MLP1_a,ratio_a)] > 200
        [ratio = 0 ] > 200

R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... 200
        @(metal output)
        copy R2MLP1
        DFM RDB R2MLP1 "antenna.rdb" ALL CELLS
}

#IFDEF VAR_ANT_RATIO
ADD_R2MLP1 = DFM PROPERTY ant_metl_bb
                          R2MLP1_a OVERLAP MULTI
            [ratio = PROPERTY(R2MLP1_a,ratio_a)] > VAR_RxMLP1
            [ratio = 0 ] > VAR_RxMLP1

ADD_R2MLP1 {@Maximum ratio of METTPL area to connected GATE area ... ^VAR_RxMLP1
        @(metal output)
        copy ADD_R2MLP1
        DFM RDB ADD_R2MLP1 "antenna.rdb" ALL CELLS
}
#ENDIF
#ENDIF

#ENDIF
#ENDIF

#ENDIF
#ENDIF
#ENDIF


//-----End of DRC--------

